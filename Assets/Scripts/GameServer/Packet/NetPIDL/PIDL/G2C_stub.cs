




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;	     

            
using System.Collections.Generic; 
namespace NetProtocol.Packet.G2C
{
	public class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool PlayerSelectResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerSelectRes packet);  
		public PlayerSelectResDelegate PlayerSelectRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerSelectRes packet)
		{ 
			return false;
		};
		public delegate bool PlayerEnterStageFirstResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerEnterStageFirstRes packet);  
		public PlayerEnterStageFirstResDelegate PlayerEnterStageFirstRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerEnterStageFirstRes packet)
		{ 
			return false;
		};
		public delegate bool PlayerEnterStageSecondResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerEnterStageSecondRes packet);  
		public PlayerEnterStageSecondResDelegate PlayerEnterStageSecondRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerEnterStageSecondRes packet)
		{ 
			return false;
		};
		public delegate bool PlayerEnterStageThirdResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerEnterStageThirdRes packet);  
		public PlayerEnterStageThirdResDelegate PlayerEnterStageThirdRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerEnterStageThirdRes packet)
		{ 
			return false;
		};
		public delegate bool PlayerEnterStageFourthResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerEnterStageFourthRes packet);  
		public PlayerEnterStageFourthResDelegate PlayerEnterStageFourthRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerEnterStageFourthRes packet)
		{ 
			return false;
		};
		public delegate bool PlayerEnterStageFifthResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerEnterStageFifthRes packet);  
		public PlayerEnterStageFifthResDelegate PlayerEnterStageFifthRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerEnterStageFifthRes packet)
		{ 
			return false;
		};
		public delegate bool PlayerGameEnterResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerGameEnterRes packet);  
		public PlayerGameEnterResDelegate PlayerGameEnterRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerGameEnterRes packet)
		{ 
			return false;
		};
		public delegate bool AuthenticateBotCredentialResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.AuthenticateBotCredentialRes packet);  
		public AuthenticateBotCredentialResDelegate AuthenticateBotCredentialRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.AuthenticateBotCredentialRes packet)
		{ 
			return false;
		};
		public delegate bool ActorAddBuffV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorAddBuffV2Noti packet);  
		public ActorAddBuffV2NotiDelegate ActorAddBuffV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorAddBuffV2Noti packet)
		{ 
			return false;
		};
		public delegate bool ActorChangedLevelToMeV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorChangedLevelToMeV2Noti packet);  
		public ActorChangedLevelToMeV2NotiDelegate ActorChangedLevelToMeV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorChangedLevelToMeV2Noti packet)
		{ 
			return false;
		};
		public delegate bool ActorChangedLevelV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorChangedLevelV2Noti packet);  
		public ActorChangedLevelV2NotiDelegate ActorChangedLevelV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorChangedLevelV2Noti packet)
		{ 
			return false;
		};
		public delegate bool ActorChangeStateV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorChangeStateV2Noti packet);  
		public ActorChangeStateV2NotiDelegate ActorChangeStateV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorChangeStateV2Noti packet)
		{ 
			return false;
		};
		public delegate bool ActorCostumeNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorCostumeNoti packet);  
		public ActorCostumeNotiDelegate ActorCostumeNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorCostumeNoti packet)
		{ 
			return false;
		};
		public delegate bool ActorDeathV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorDeathV2Noti packet);  
		public ActorDeathV2NotiDelegate ActorDeathV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorDeathV2Noti packet)
		{ 
			return false;
		};
		public delegate bool ActorDisAppearV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorDisAppearV2Noti packet);  
		public ActorDisAppearV2NotiDelegate ActorDisAppearV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorDisAppearV2Noti packet)
		{ 
			return false;
		};
		public delegate bool ActorGuildV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorGuildV2Noti packet);  
		public ActorGuildV2NotiDelegate ActorGuildV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorGuildV2Noti packet)
		{ 
			return false;
		};
		public delegate bool ActorHpMpUpdateV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorHpMpUpdateV2Noti packet);  
		public ActorHpMpUpdateV2NotiDelegate ActorHpMpUpdateV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorHpMpUpdateV2Noti packet)
		{ 
			return false;
		};
		public delegate bool ActorHpUpdateV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorHpUpdateV2Noti packet);  
		public ActorHpUpdateV2NotiDelegate ActorHpUpdateV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorHpUpdateV2Noti packet)
		{ 
			return false;
		};
		public delegate bool ActorMoveV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorMoveV2Noti packet);  
		public ActorMoveV2NotiDelegate ActorMoveV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorMoveV2Noti packet)
		{ 
			return false;
		};
		public delegate bool ActorMpUpdateV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorMpUpdateV2Noti packet);  
		public ActorMpUpdateV2NotiDelegate ActorMpUpdateV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorMpUpdateV2Noti packet)
		{ 
			return false;
		};
		public delegate bool ActorPetV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorPetV2Noti packet);  
		public ActorPetV2NotiDelegate ActorPetV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorPetV2Noti packet)
		{ 
			return false;
		};
		public delegate bool ActorRemoveBuffV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorRemoveBuffV2Noti packet);  
		public ActorRemoveBuffV2NotiDelegate ActorRemoveBuffV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorRemoveBuffV2Noti packet)
		{ 
			return false;
		};
		public delegate bool ActorRideV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorRideV2Noti packet);  
		public ActorRideV2NotiDelegate ActorRideV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorRideV2Noti packet)
		{ 
			return false;
		};
		public delegate bool ActorsDisAppearV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorsDisAppearV2Noti packet);  
		public ActorsDisAppearV2NotiDelegate ActorsDisAppearV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorsDisAppearV2Noti packet)
		{ 
			return false;
		};
		public delegate bool MonsterActorAppearV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MonsterActorAppearV2Noti packet);  
		public MonsterActorAppearV2NotiDelegate MonsterActorAppearV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MonsterActorAppearV2Noti packet)
		{ 
			return false;
		};
		public delegate bool MonsterActorsAppearV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MonsterActorsAppearV2Noti packet);  
		public MonsterActorsAppearV2NotiDelegate MonsterActorsAppearV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MonsterActorsAppearV2Noti packet)
		{ 
			return false;
		};
		public delegate bool MonsterActorTargetNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MonsterActorTargetNoti packet);  
		public MonsterActorTargetNotiDelegate MonsterActorTargetNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MonsterActorTargetNoti packet)
		{ 
			return false;
		};
		public delegate bool PlayerActorAppearV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerActorAppearV2Noti packet);  
		public PlayerActorAppearV2NotiDelegate PlayerActorAppearV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerActorAppearV2Noti packet)
		{ 
			return false;
		};
		public delegate bool PlayerActorsAppearV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerActorsAppearV2Noti packet);  
		public PlayerActorsAppearV2NotiDelegate PlayerActorsAppearV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerActorsAppearV2Noti packet)
		{ 
			return false;
		};
		public delegate bool PlayerActorZoneStateNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerActorZoneStateNoti packet);  
		public PlayerActorZoneStateNotiDelegate PlayerActorZoneStateNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerActorZoneStateNoti packet)
		{ 
			return false;
		};
		public delegate bool ActorStatSyncNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorStatSyncNoti packet);  
		public ActorStatSyncNotiDelegate ActorStatSyncNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorStatSyncNoti packet)
		{ 
			return false;
		};
		public delegate bool PropActorAppearNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PropActorAppearNoti packet);  
		public PropActorAppearNotiDelegate PropActorAppearNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PropActorAppearNoti packet)
		{ 
			return false;
		};
		public delegate bool ActorPendingDisAppearNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorPendingDisAppearNoti packet);  
		public ActorPendingDisAppearNotiDelegate ActorPendingDisAppearNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorPendingDisAppearNoti packet)
		{ 
			return false;
		};
		public delegate bool PropActorsAppearNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PropActorsAppearNoti packet);  
		public PropActorsAppearNotiDelegate PropActorsAppearNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PropActorsAppearNoti packet)
		{ 
			return false;
		};
		public delegate bool DesignateBindStoneResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.DesignateBindStoneRes packet);  
		public DesignateBindStoneResDelegate DesignateBindStoneRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.DesignateBindStoneRes packet)
		{ 
			return false;
		};
		public delegate bool PortalByBindStoneResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PortalByBindStoneRes packet);  
		public PortalByBindStoneResDelegate PortalByBindStoneRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PortalByBindStoneRes packet)
		{ 
			return false;
		};
		public delegate bool PlayerBlackRosterGetPreferenceResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerBlackRosterGetPreferenceRes packet);  
		public PlayerBlackRosterGetPreferenceResDelegate PlayerBlackRosterGetPreferenceRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerBlackRosterGetPreferenceRes packet)
		{ 
			return false;
		};
		public delegate bool PlayerBlackRosterObservingNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerBlackRosterObservingNoti packet);  
		public PlayerBlackRosterObservingNotiDelegate PlayerBlackRosterObservingNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerBlackRosterObservingNoti packet)
		{ 
			return false;
		};
		public delegate bool PlayerBlackRosterObservingResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerBlackRosterObservingRes packet);  
		public PlayerBlackRosterObservingResDelegate PlayerBlackRosterObservingRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerBlackRosterObservingRes packet)
		{ 
			return false;
		};
		public delegate bool PlayerBlackRosterProvocationNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerBlackRosterProvocationNoti packet);  
		public PlayerBlackRosterProvocationNotiDelegate PlayerBlackRosterProvocationNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerBlackRosterProvocationNoti packet)
		{ 
			return false;
		};
		public delegate bool PlayerBlackRosterProvocationResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerBlackRosterProvocationRes packet);  
		public PlayerBlackRosterProvocationResDelegate PlayerBlackRosterProvocationRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerBlackRosterProvocationRes packet)
		{ 
			return false;
		};
		public delegate bool PlayerBlackRosterRankResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerBlackRosterRankRes packet);  
		public PlayerBlackRosterRankResDelegate PlayerBlackRosterRankRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerBlackRosterRankRes packet)
		{ 
			return false;
		};
		public delegate bool PlayerBlackRosterRevengeResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerBlackRosterRevengeRes packet);  
		public PlayerBlackRosterRevengeResDelegate PlayerBlackRosterRevengeRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerBlackRosterRevengeRes packet)
		{ 
			return false;
		};
		public delegate bool PlayerBlackRosterSetPreferenceResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerBlackRosterSetPreferenceRes packet);  
		public PlayerBlackRosterSetPreferenceResDelegate PlayerBlackRosterSetPreferenceRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerBlackRosterSetPreferenceRes packet)
		{ 
			return false;
		};
		public delegate bool PlayerBlackRostersResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerBlackRostersRes packet);  
		public PlayerBlackRostersResDelegate PlayerBlackRostersRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerBlackRostersRes packet)
		{ 
			return false;
		};
		public delegate bool PlayerBlackRosterLastWeekRankResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerBlackRosterLastWeekRankRes packet);  
		public PlayerBlackRosterLastWeekRankResDelegate PlayerBlackRosterLastWeekRankRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerBlackRosterLastWeekRankRes packet)
		{ 
			return false;
		};
		public delegate bool PlayerBlackRosterMessageNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerBlackRosterMessageNoti packet);  
		public PlayerBlackRosterMessageNotiDelegate PlayerBlackRosterMessageNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerBlackRosterMessageNoti packet)
		{ 
			return false;
		};
		public delegate bool CheatGetMainQuestV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CheatGetMainQuestV2Noti packet);  
		public CheatGetMainQuestV2NotiDelegate CheatGetMainQuestV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CheatGetMainQuestV2Noti packet)
		{ 
			return false;
		};
		public delegate bool CheatMessageV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CheatMessageV2Res packet);  
		public CheatMessageV2ResDelegate CheatMessageV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CheatMessageV2Res packet)
		{ 
			return false;
		};
		public delegate bool CheatQuestResetV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CheatQuestResetV2Noti packet);  
		public CheatQuestResetV2NotiDelegate CheatQuestResetV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CheatQuestResetV2Noti packet)
		{ 
			return false;
		};
		public delegate bool AccountBlockPlayerAddResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.AccountBlockPlayerAddRes packet);  
		public AccountBlockPlayerAddResDelegate AccountBlockPlayerAddRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.AccountBlockPlayerAddRes packet)
		{ 
			return false;
		};
		public delegate bool AccountBlockPlayerDeleteResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.AccountBlockPlayerDeleteRes packet);  
		public AccountBlockPlayerDeleteResDelegate AccountBlockPlayerDeleteRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.AccountBlockPlayerDeleteRes packet)
		{ 
			return false;
		};
		public delegate bool AccountBlockPlayerReasonEditResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.AccountBlockPlayerReasonEditRes packet);  
		public AccountBlockPlayerReasonEditResDelegate AccountBlockPlayerReasonEditRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.AccountBlockPlayerReasonEditRes packet)
		{ 
			return false;
		};
		public delegate bool AccountBlockPlayersResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.AccountBlockPlayersRes packet);  
		public AccountBlockPlayersResDelegate AccountBlockPlayersRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.AccountBlockPlayersRes packet)
		{ 
			return false;
		};
		public delegate bool ChatMessageV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ChatMessageV2Noti packet);  
		public ChatMessageV2NotiDelegate ChatMessageV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ChatMessageV2Noti packet)
		{ 
			return false;
		};
		public delegate bool ChatMessageV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ChatMessageV2Res packet);  
		public ChatMessageV2ResDelegate ChatMessageV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ChatMessageV2Res packet)
		{ 
			return false;
		};
		public delegate bool PlayerSearchV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerSearchV2Res packet);  
		public PlayerSearchV2ResDelegate PlayerSearchV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerSearchV2Res packet)
		{ 
			return false;
		};
		public delegate bool LinkItemInfoResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.LinkItemInfoRes packet);  
		public LinkItemInfoResDelegate LinkItemInfoRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.LinkItemInfoRes packet)
		{ 
			return false;
		};
		public delegate bool CostumeCardBuildResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CostumeCardBuildRes packet);  
		public CostumeCardBuildResDelegate CostumeCardBuildRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CostumeCardBuildRes packet)
		{ 
			return false;
		};
		public delegate bool CostumeCardGachaResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CostumeCardGachaRes packet);  
		public CostumeCardGachaResDelegate CostumeCardGachaRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CostumeCardGachaRes packet)
		{ 
			return false;
		};
		public delegate bool CostumeCardInfoResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CostumeCardInfoRes packet);  
		public CostumeCardInfoResDelegate CostumeCardInfoRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CostumeCardInfoRes packet)
		{ 
			return false;
		};
		public delegate bool CostumeCardMixResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CostumeCardMixRes packet);  
		public CostumeCardMixResDelegate CostumeCardMixRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CostumeCardMixRes packet)
		{ 
			return false;
		};
		public delegate bool CostumeCollectNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CostumeCollectNoti packet);  
		public CostumeCollectNotiDelegate CostumeCollectNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CostumeCollectNoti packet)
		{ 
			return false;
		};
		public delegate bool CostumeCollectResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CostumeCollectRes packet);  
		public CostumeCollectResDelegate CostumeCollectRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CostumeCollectRes packet)
		{ 
			return false;
		};
		public delegate bool CostumeEquipBodyResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CostumeEquipBodyRes packet);  
		public CostumeEquipBodyResDelegate CostumeEquipBodyRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CostumeEquipBodyRes packet)
		{ 
			return false;
		};
		public delegate bool CostumeEquipBodyShowResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CostumeEquipBodyShowRes packet);  
		public CostumeEquipBodyShowResDelegate CostumeEquipBodyShowRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CostumeEquipBodyShowRes packet)
		{ 
			return false;
		};
		public delegate bool CostumeEquipHeadResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CostumeEquipHeadRes packet);  
		public CostumeEquipHeadResDelegate CostumeEquipHeadRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CostumeEquipHeadRes packet)
		{ 
			return false;
		};
		public delegate bool CostumeEquipHeadShowResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CostumeEquipHeadShowRes packet);  
		public CostumeEquipHeadShowResDelegate CostumeEquipHeadShowRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CostumeEquipHeadShowRes packet)
		{ 
			return false;
		};
		public delegate bool CostumeInfoResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CostumeInfoRes packet);  
		public CostumeInfoResDelegate CostumeInfoRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CostumeInfoRes packet)
		{ 
			return false;
		};
		public delegate bool CostumeConfirmAcceptResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CostumeConfirmAcceptRes packet);  
		public CostumeConfirmAcceptResDelegate CostumeConfirmAcceptRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CostumeConfirmAcceptRes packet)
		{ 
			return false;
		};
		public delegate bool CostumeConfirmChangeResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CostumeConfirmChangeRes packet);  
		public CostumeConfirmChangeResDelegate CostumeConfirmChangeRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CostumeConfirmChangeRes packet)
		{ 
			return false;
		};
		public delegate bool CostumeConfirmInfoResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CostumeConfirmInfoRes packet);  
		public CostumeConfirmInfoResDelegate CostumeConfirmInfoRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CostumeConfirmInfoRes packet)
		{ 
			return false;
		};
		public delegate bool PortalEffectNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PortalEffectNoti packet);  
		public PortalEffectNotiDelegate PortalEffectNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PortalEffectNoti packet)
		{ 
			return false;
		};
		public delegate bool PortalEffectResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PortalEffectRes packet);  
		public PortalEffectResDelegate PortalEffectRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PortalEffectRes packet)
		{ 
			return false;
		};
		public delegate bool AttainmentDailyRewardV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.AttainmentDailyRewardV2Res packet);  
		public AttainmentDailyRewardV2ResDelegate AttainmentDailyRewardV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.AttainmentDailyRewardV2Res packet)
		{ 
			return false;
		};
		public delegate bool AttainmentNormalRewardV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.AttainmentNormalRewardV2Res packet);  
		public AttainmentNormalRewardV2ResDelegate AttainmentNormalRewardV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.AttainmentNormalRewardV2Res packet)
		{ 
			return false;
		};
		public delegate bool AttainmentProgressV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.AttainmentProgressV2Noti packet);  
		public AttainmentProgressV2NotiDelegate AttainmentProgressV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.AttainmentProgressV2Noti packet)
		{ 
			return false;
		};
		public delegate bool AttainmentsNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.AttainmentsNoti packet);  
		public AttainmentsNotiDelegate AttainmentsNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.AttainmentsNoti packet)
		{ 
			return false;
		};
		public delegate bool AttendanceRewardV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.AttendanceRewardV2Res packet);  
		public AttendanceRewardV2ResDelegate AttendanceRewardV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.AttendanceRewardV2Res packet)
		{ 
			return false;
		};
		public delegate bool BossScheduleNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BossScheduleNoti packet);  
		public BossScheduleNotiDelegate BossScheduleNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BossScheduleNoti packet)
		{ 
			return false;
		};
		public delegate bool BossScheduleResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BossScheduleRes packet);  
		public BossScheduleResDelegate BossScheduleRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BossScheduleRes packet)
		{ 
			return false;
		};
		public delegate bool EventAttendanceListV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.EventAttendanceListV2Noti packet);  
		public EventAttendanceListV2NotiDelegate EventAttendanceListV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.EventAttendanceListV2Noti packet)
		{ 
			return false;
		};
		public delegate bool EventExchangeRewardV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.EventExchangeRewardV2Res packet);  
		public EventExchangeRewardV2ResDelegate EventExchangeRewardV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.EventExchangeRewardV2Res packet)
		{ 
			return false;
		};
		public delegate bool GuildAdminBuffActiveResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminBuffActiveRes packet);  
		public GuildAdminBuffActiveResDelegate GuildAdminBuffActiveRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminBuffActiveRes packet)
		{ 
			return false;
		};
		public delegate bool GuildAdminBuffBuyResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminBuffBuyRes packet);  
		public GuildAdminBuffBuyResDelegate GuildAdminBuffBuyRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminBuffBuyRes packet)
		{ 
			return false;
		};
		public delegate bool GuildAdminInfoResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminInfoRes packet);  
		public GuildAdminInfoResDelegate GuildAdminInfoRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminInfoRes packet)
		{ 
			return false;
		};
		public delegate bool GuildAdminMasterChangeNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminMasterChangeNoti packet);  
		public GuildAdminMasterChangeNotiDelegate GuildAdminMasterChangeNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminMasterChangeNoti packet)
		{ 
			return false;
		};
		public delegate bool GuildAdminMasterChangeResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminMasterChangeRes packet);  
		public GuildAdminMasterChangeResDelegate GuildAdminMasterChangeRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminMasterChangeRes packet)
		{ 
			return false;
		};
		public delegate bool GuildAdminMemberBanishNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminMemberBanishNoti packet);  
		public GuildAdminMemberBanishNotiDelegate GuildAdminMemberBanishNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminMemberBanishNoti packet)
		{ 
			return false;
		};
		public delegate bool GuildAdminMemberBanishResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminMemberBanishRes packet);  
		public GuildAdminMemberBanishResDelegate GuildAdminMemberBanishRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminMemberBanishRes packet)
		{ 
			return false;
		};
		public delegate bool GuildAdminMemberUpdateNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminMemberUpdateNoti packet);  
		public GuildAdminMemberUpdateNotiDelegate GuildAdminMemberUpdateNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminMemberUpdateNoti packet)
		{ 
			return false;
		};
		public delegate bool GuildAdminMemberUpdateResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminMemberUpdateRes packet);  
		public GuildAdminMemberUpdateResDelegate GuildAdminMemberUpdateRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminMemberUpdateRes packet)
		{ 
			return false;
		};
		public delegate bool GuildAdminUpdateBaseNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminUpdateBaseNoti packet);  
		public GuildAdminUpdateBaseNotiDelegate GuildAdminUpdateBaseNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminUpdateBaseNoti packet)
		{ 
			return false;
		};
		public delegate bool GuildAdminUpdateBaseResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminUpdateBaseRes packet);  
		public GuildAdminUpdateBaseResDelegate GuildAdminUpdateBaseRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminUpdateBaseRes packet)
		{ 
			return false;
		};
		public delegate bool GuildAdminUpdateIntroNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminUpdateIntroNoti packet);  
		public GuildAdminUpdateIntroNotiDelegate GuildAdminUpdateIntroNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminUpdateIntroNoti packet)
		{ 
			return false;
		};
		public delegate bool GuildAdminUpdateIntroResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminUpdateIntroRes packet);  
		public GuildAdminUpdateIntroResDelegate GuildAdminUpdateIntroRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminUpdateIntroRes packet)
		{ 
			return false;
		};
		public delegate bool GuildAdminUpdateNoticeNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminUpdateNoticeNoti packet);  
		public GuildAdminUpdateNoticeNotiDelegate GuildAdminUpdateNoticeNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminUpdateNoticeNoti packet)
		{ 
			return false;
		};
		public delegate bool GuildAdminUpdateNoticeResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminUpdateNoticeRes packet);  
		public GuildAdminUpdateNoticeResDelegate GuildAdminUpdateNoticeRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminUpdateNoticeRes packet)
		{ 
			return false;
		};
		public delegate bool GuildAdminUpdateTendencyNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminUpdateTendencyNoti packet);  
		public GuildAdminUpdateTendencyNotiDelegate GuildAdminUpdateTendencyNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminUpdateTendencyNoti packet)
		{ 
			return false;
		};
		public delegate bool GuildAdminUpdateTendencyResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminUpdateTendencyRes packet);  
		public GuildAdminUpdateTendencyResDelegate GuildAdminUpdateTendencyRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminUpdateTendencyRes packet)
		{ 
			return false;
		};
		public delegate bool GuildAdminUpdateTypeNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminUpdateTypeNoti packet);  
		public GuildAdminUpdateTypeNotiDelegate GuildAdminUpdateTypeNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminUpdateTypeNoti packet)
		{ 
			return false;
		};
		public delegate bool GuildAdminUpdateTypeResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminUpdateTypeRes packet);  
		public GuildAdminUpdateTypeResDelegate GuildAdminUpdateTypeRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAdminUpdateTypeRes packet)
		{ 
			return false;
		};
		public delegate bool GuildAttendResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAttendRes packet);  
		public GuildAttendResDelegate GuildAttendRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildAttendRes packet)
		{ 
			return false;
		};
		public delegate bool GuildBaseNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildBaseNoti packet);  
		public GuildBaseNotiDelegate GuildBaseNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildBaseNoti packet)
		{ 
			return false;
		};
		public delegate bool GuildBuffInfoResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildBuffInfoRes packet);  
		public GuildBuffInfoResDelegate GuildBuffInfoRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildBuffInfoRes packet)
		{ 
			return false;
		};
		public delegate bool GuildBuffNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildBuffNoti packet);  
		public GuildBuffNotiDelegate GuildBuffNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildBuffNoti packet)
		{ 
			return false;
		};
		public delegate bool GuildCreateResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildCreateRes packet);  
		public GuildCreateResDelegate GuildCreateRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildCreateRes packet)
		{ 
			return false;
		};
		public delegate bool GuildDeleteResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildDeleteRes packet);  
		public GuildDeleteResDelegate GuildDeleteRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildDeleteRes packet)
		{ 
			return false;
		};
		public delegate bool GuildDonateResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildDonateRes packet);  
		public GuildDonateResDelegate GuildDonateRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildDonateRes packet)
		{ 
			return false;
		};
		public delegate bool GuildDonationByCronV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildDonationByCronV2Res packet);  
		public GuildDonationByCronV2ResDelegate GuildDonationByCronV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildDonationByCronV2Res packet)
		{ 
			return false;
		};
		public delegate bool GuildFindResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildFindRes packet);  
		public GuildFindResDelegate GuildFindRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildFindRes packet)
		{ 
			return false;
		};
		public delegate bool GuildHistoryNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildHistoryNoti packet);  
		public GuildHistoryNotiDelegate GuildHistoryNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildHistoryNoti packet)
		{ 
			return false;
		};
		public delegate bool GuildHistoryResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildHistoryRes packet);  
		public GuildHistoryResDelegate GuildHistoryRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildHistoryRes packet)
		{ 
			return false;
		};
		public delegate bool GuildInfoCallResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildInfoCallRes packet);  
		public GuildInfoCallResDelegate GuildInfoCallRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildInfoCallRes packet)
		{ 
			return false;
		};
		public delegate bool GuildInfoResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildInfoRes packet);  
		public GuildInfoResDelegate GuildInfoRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildInfoRes packet)
		{ 
			return false;
		};
		public delegate bool GuildJoinRequestConfirmNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildJoinRequestConfirmNoti packet);  
		public GuildJoinRequestConfirmNotiDelegate GuildJoinRequestConfirmNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildJoinRequestConfirmNoti packet)
		{ 
			return false;
		};
		public delegate bool GuildJoinRequestConfirmResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildJoinRequestConfirmRes packet);  
		public GuildJoinRequestConfirmResDelegate GuildJoinRequestConfirmRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildJoinRequestConfirmRes packet)
		{ 
			return false;
		};
		public delegate bool GuildJoinRequestListResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildJoinRequestListRes packet);  
		public GuildJoinRequestListResDelegate GuildJoinRequestListRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildJoinRequestListRes packet)
		{ 
			return false;
		};
		public delegate bool GuildLeaveNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildLeaveNoti packet);  
		public GuildLeaveNotiDelegate GuildLeaveNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildLeaveNoti packet)
		{ 
			return false;
		};
		public delegate bool GuildLeaveResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildLeaveRes packet);  
		public GuildLeaveResDelegate GuildLeaveRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildLeaveRes packet)
		{ 
			return false;
		};
		public delegate bool GuildLiveInviteConfirmNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildLiveInviteConfirmNoti packet);  
		public GuildLiveInviteConfirmNotiDelegate GuildLiveInviteConfirmNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildLiveInviteConfirmNoti packet)
		{ 
			return false;
		};
		public delegate bool GuildLiveInviteConfirmResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildLiveInviteConfirmRes packet);  
		public GuildLiveInviteConfirmResDelegate GuildLiveInviteConfirmRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildLiveInviteConfirmRes packet)
		{ 
			return false;
		};
		public delegate bool GuildLiveInviteNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildLiveInviteNoti packet);  
		public GuildLiveInviteNotiDelegate GuildLiveInviteNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildLiveInviteNoti packet)
		{ 
			return false;
		};
		public delegate bool GuildLiveInviteResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildLiveInviteRes packet);  
		public GuildLiveInviteResDelegate GuildLiveInviteRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildLiveInviteRes packet)
		{ 
			return false;
		};
		public delegate bool GuildMemberInfoResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildMemberInfoRes packet);  
		public GuildMemberInfoResDelegate GuildMemberInfoRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildMemberInfoRes packet)
		{ 
			return false;
		};
		public delegate bool GuildMemberNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildMemberNoti packet);  
		public GuildMemberNotiDelegate GuildMemberNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildMemberNoti packet)
		{ 
			return false;
		};
		public delegate bool GuildMemberStateV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildMemberStateV2Noti packet);  
		public GuildMemberStateV2NotiDelegate GuildMemberStateV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildMemberStateV2Noti packet)
		{ 
			return false;
		};
		public delegate bool GuildMemberUpdateNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildMemberUpdateNoti packet);  
		public GuildMemberUpdateNotiDelegate GuildMemberUpdateNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildMemberUpdateNoti packet)
		{ 
			return false;
		};
		public delegate bool GuildPointNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildPointNoti packet);  
		public GuildPointNotiDelegate GuildPointNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildPointNoti packet)
		{ 
			return false;
		};
		public delegate bool GuildSignRequestCancelResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildSignRequestCancelRes packet);  
		public GuildSignRequestCancelResDelegate GuildSignRequestCancelRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildSignRequestCancelRes packet)
		{ 
			return false;
		};
		public delegate bool GuildSignRequestListResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildSignRequestListRes packet);  
		public GuildSignRequestListResDelegate GuildSignRequestListRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildSignRequestListRes packet)
		{ 
			return false;
		};
		public delegate bool GuildSignRequestResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildSignRequestRes packet);  
		public GuildSignRequestResDelegate GuildSignRequestRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildSignRequestRes packet)
		{ 
			return false;
		};
		public delegate bool GuildUpdateCrestNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildUpdateCrestNoti packet);  
		public GuildUpdateCrestNotiDelegate GuildUpdateCrestNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildUpdateCrestNoti packet)
		{ 
			return false;
		};
		public delegate bool GuildUpdateCurrencyV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildUpdateCurrencyV2Noti packet);  
		public GuildUpdateCurrencyV2NotiDelegate GuildUpdateCurrencyV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildUpdateCurrencyV2Noti packet)
		{ 
			return false;
		};
		public delegate bool GuildVoteInfoResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildVoteInfoRes packet);  
		public GuildVoteInfoResDelegate GuildVoteInfoRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildVoteInfoRes packet)
		{ 
			return false;
		};
		public delegate bool GuildVoteMasterImpeachResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildVoteMasterImpeachRes packet);  
		public GuildVoteMasterImpeachResDelegate GuildVoteMasterImpeachRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildVoteMasterImpeachRes packet)
		{ 
			return false;
		};
		public delegate bool GuildVoteNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildVoteNoti packet);  
		public GuildVoteNotiDelegate GuildVoteNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildVoteNoti packet)
		{ 
			return false;
		};
		public delegate bool GuildVoteResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildVoteRes packet);  
		public GuildVoteResDelegate GuildVoteRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildVoteRes packet)
		{ 
			return false;
		};
		public delegate bool GuildWarehouseChangeSizeV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildWarehouseChangeSizeV2Res packet);  
		public GuildWarehouseChangeSizeV2ResDelegate GuildWarehouseChangeSizeV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildWarehouseChangeSizeV2Res packet)
		{ 
			return false;
		};
		public delegate bool GuildWarehouseInfoV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildWarehouseInfoV2Res packet);  
		public GuildWarehouseInfoV2ResDelegate GuildWarehouseInfoV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildWarehouseInfoV2Res packet)
		{ 
			return false;
		};
		public delegate bool GuildWarehouseItemMoveV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildWarehouseItemMoveV2Res packet);  
		public GuildWarehouseItemMoveV2ResDelegate GuildWarehouseItemMoveV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildWarehouseItemMoveV2Res packet)
		{ 
			return false;
		};
		public delegate bool GuildWarehouseWalletMoveV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildWarehouseWalletMoveV2Res packet);  
		public GuildWarehouseWalletMoveV2ResDelegate GuildWarehouseWalletMoveV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildWarehouseWalletMoveV2Res packet)
		{ 
			return false;
		};
		public delegate bool GuildRubyNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildRubyNoti packet);  
		public GuildRubyNotiDelegate GuildRubyNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildRubyNoti packet)
		{ 
			return false;
		};
		public delegate bool GuildCronNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildCronNoti packet);  
		public GuildCronNotiDelegate GuildCronNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildCronNoti packet)
		{ 
			return false;
		};
		public delegate bool GuildTerritoryInfoResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildTerritoryInfoRes packet);  
		public GuildTerritoryInfoResDelegate GuildTerritoryInfoRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildTerritoryInfoRes packet)
		{ 
			return false;
		};
		public delegate bool GuildTerritorySetResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildTerritorySetRes packet);  
		public GuildTerritorySetResDelegate GuildTerritorySetRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildTerritorySetRes packet)
		{ 
			return false;
		};
		public delegate bool WorldTerritoryOverviewResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WorldTerritoryOverviewRes packet);  
		public WorldTerritoryOverviewResDelegate WorldTerritoryOverviewRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WorldTerritoryOverviewRes packet)
		{ 
			return false;
		};
		public delegate bool WorldBossLastAttackNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WorldBossLastAttackNoti packet);  
		public WorldBossLastAttackNotiDelegate WorldBossLastAttackNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WorldBossLastAttackNoti packet)
		{ 
			return false;
		};
		public delegate bool DungeonClearHistoryV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.DungeonClearHistoryV2Noti packet);  
		public DungeonClearHistoryV2NotiDelegate DungeonClearHistoryV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.DungeonClearHistoryV2Noti packet)
		{ 
			return false;
		};
		public delegate bool DungeonClearV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.DungeonClearV2Noti packet);  
		public DungeonClearV2NotiDelegate DungeonClearV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.DungeonClearV2Noti packet)
		{ 
			return false;
		};
		public delegate bool DungeonCronUpdateV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.DungeonCronUpdateV2Noti packet);  
		public DungeonCronUpdateV2NotiDelegate DungeonCronUpdateV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.DungeonCronUpdateV2Noti packet)
		{ 
			return false;
		};
		public delegate bool DungeonEnterV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.DungeonEnterV2Res packet);  
		public DungeonEnterV2ResDelegate DungeonEnterV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.DungeonEnterV2Res packet)
		{ 
			return false;
		};
		public delegate bool DungeonExpUpdateV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.DungeonExpUpdateV2Noti packet);  
		public DungeonExpUpdateV2NotiDelegate DungeonExpUpdateV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.DungeonExpUpdateV2Noti packet)
		{ 
			return false;
		};
		public delegate bool DungeonGiveUpV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.DungeonGiveUpV2Res packet);  
		public DungeonGiveUpV2ResDelegate DungeonGiveUpV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.DungeonGiveUpV2Res packet)
		{ 
			return false;
		};
		public delegate bool DungeonLeaveV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.DungeonLeaveV2Res packet);  
		public DungeonLeaveV2ResDelegate DungeonLeaveV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.DungeonLeaveV2Res packet)
		{ 
			return false;
		};
		public delegate bool DungeonLoadingCompleteAllV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.DungeonLoadingCompleteAllV2Noti packet);  
		public DungeonLoadingCompleteAllV2NotiDelegate DungeonLoadingCompleteAllV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.DungeonLoadingCompleteAllV2Noti packet)
		{ 
			return false;
		};
		public delegate bool DungeonLoadingCompleteV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.DungeonLoadingCompleteV2Res packet);  
		public DungeonLoadingCompleteV2ResDelegate DungeonLoadingCompleteV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.DungeonLoadingCompleteV2Res packet)
		{ 
			return false;
		};
		public delegate bool ExpDungeonClearNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ExpDungeonClearNoti packet);  
		public ExpDungeonClearNotiDelegate ExpDungeonClearNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ExpDungeonClearNoti packet)
		{ 
			return false;
		};
		public delegate bool EquipDungeonClearNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.EquipDungeonClearNoti packet);  
		public EquipDungeonClearNotiDelegate EquipDungeonClearNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.EquipDungeonClearNoti packet)
		{ 
			return false;
		};
		public delegate bool MineralDungeonClearNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MineralDungeonClearNoti packet);  
		public MineralDungeonClearNotiDelegate MineralDungeonClearNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MineralDungeonClearNoti packet)
		{ 
			return false;
		};
		public delegate bool PartyDungeonClearNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyDungeonClearNoti packet);  
		public PartyDungeonClearNotiDelegate PartyDungeonClearNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyDungeonClearNoti packet)
		{ 
			return false;
		};
		public delegate bool InteractStartResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.InteractStartRes packet);  
		public InteractStartResDelegate InteractStartRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.InteractStartRes packet)
		{ 
			return false;
		};
		public delegate bool InteractEndResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.InteractEndRes packet);  
		public InteractEndResDelegate InteractEndRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.InteractEndRes packet)
		{ 
			return false;
		};
		public delegate bool InteractCancelResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.InteractCancelRes packet);  
		public InteractCancelResDelegate InteractCancelRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.InteractCancelRes packet)
		{ 
			return false;
		};
		public delegate bool InteractNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.InteractNoti packet);  
		public InteractNotiDelegate InteractNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.InteractNoti packet)
		{ 
			return false;
		};
		public delegate bool EquipmentVisibleV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.EquipmentVisibleV2Res packet);  
		public EquipmentVisibleV2ResDelegate EquipmentVisibleV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.EquipmentVisibleV2Res packet)
		{ 
			return false;
		};
		public delegate bool InventoryChangeSizeV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.InventoryChangeSizeV2Res packet);  
		public InventoryChangeSizeV2ResDelegate InventoryChangeSizeV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.InventoryChangeSizeV2Res packet)
		{ 
			return false;
		};
		public delegate bool ItemAddOptionV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemAddOptionV2Res packet);  
		public ItemAddOptionV2ResDelegate ItemAddOptionV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemAddOptionV2Res packet)
		{ 
			return false;
		};
		public delegate bool ItemAddV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemAddV2Noti packet);  
		public ItemAddV2NotiDelegate ItemAddV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemAddV2Noti packet)
		{ 
			return false;
		};
		public delegate bool ItemChangeOptionV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemChangeOptionV2Res packet);  
		public ItemChangeOptionV2ResDelegate ItemChangeOptionV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemChangeOptionV2Res packet)
		{ 
			return false;
		};
		public delegate bool ItemCollectionBookmarksRegisterV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemCollectionBookmarksRegisterV2Res packet);  
		public ItemCollectionBookmarksRegisterV2ResDelegate ItemCollectionBookmarksRegisterV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemCollectionBookmarksRegisterV2Res packet)
		{ 
			return false;
		};
		public delegate bool ItemCollectionBookmarksUnregisterV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemCollectionBookmarksUnregisterV2Res packet);  
		public ItemCollectionBookmarksUnregisterV2ResDelegate ItemCollectionBookmarksUnregisterV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemCollectionBookmarksUnregisterV2Res packet)
		{ 
			return false;
		};
		public delegate bool ItemCollectionListV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemCollectionListV2Noti packet);  
		public ItemCollectionListV2NotiDelegate ItemCollectionListV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemCollectionListV2Noti packet)
		{ 
			return false;
		};
		public delegate bool ItemCollectionRegisterV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemCollectionRegisterV2Res packet);  
		public ItemCollectionRegisterV2ResDelegate ItemCollectionRegisterV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemCollectionRegisterV2Res packet)
		{ 
			return false;
		};
		public delegate bool ItemCombineV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemCombineV2Res packet);  
		public ItemCombineV2ResDelegate ItemCombineV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemCombineV2Res packet)
		{ 
			return false;
		};
		public delegate bool ItemDeleteV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemDeleteV2Noti packet);  
		public ItemDeleteV2NotiDelegate ItemDeleteV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemDeleteV2Noti packet)
		{ 
			return false;
		};
		public delegate bool ItemDeleteV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemDeleteV2Res packet);  
		public ItemDeleteV2ResDelegate ItemDeleteV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemDeleteV2Res packet)
		{ 
			return false;
		};
		public delegate bool ItemDisassembleV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemDisassembleV2Res packet);  
		public ItemDisassembleV2ResDelegate ItemDisassembleV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemDisassembleV2Res packet)
		{ 
			return false;
		};
		public delegate bool ItemEnchantV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemEnchantV2Res packet);  
		public ItemEnchantV2ResDelegate ItemEnchantV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemEnchantV2Res packet)
		{ 
			return false;
		};
		public delegate bool ItemEquipV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemEquipV2Noti packet);  
		public ItemEquipV2NotiDelegate ItemEquipV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemEquipV2Noti packet)
		{ 
			return false;
		};
		public delegate bool ItemEquipV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemEquipV2Res packet);  
		public ItemEquipV2ResDelegate ItemEquipV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemEquipV2Res packet)
		{ 
			return false;
		};
		public delegate bool ItemIntensionV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemIntensionV2Res packet);  
		public ItemIntensionV2ResDelegate ItemIntensionV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemIntensionV2Res packet)
		{ 
			return false;
		};
		public delegate bool ItemMixOptionV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemMixOptionV2Res packet);  
		public ItemMixOptionV2ResDelegate ItemMixOptionV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemMixOptionV2Res packet)
		{ 
			return false;
		};
		public delegate bool ItemPackageUseV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemPackageUseV2Res packet);  
		public ItemPackageUseV2ResDelegate ItemPackageUseV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemPackageUseV2Res packet)
		{ 
			return false;
		};
		public delegate bool ItemProductionV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemProductionV2Res packet);  
		public ItemProductionV2ResDelegate ItemProductionV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemProductionV2Res packet)
		{ 
			return false;
		};
		public delegate bool ItemSelectUseV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemSelectUseV2Res packet);  
		public ItemSelectUseV2ResDelegate ItemSelectUseV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemSelectUseV2Res packet)
		{ 
			return false;
		};
		public delegate bool ItemUpdateV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemUpdateV2Noti packet);  
		public ItemUpdateV2NotiDelegate ItemUpdateV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemUpdateV2Noti packet)
		{ 
			return false;
		};
		public delegate bool ItemUpgradeV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemUpgradeV2Res packet);  
		public ItemUpgradeV2ResDelegate ItemUpgradeV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemUpgradeV2Res packet)
		{ 
			return false;
		};
		public delegate bool ItemUseV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemUseV2Res packet);  
		public ItemUseV2ResDelegate ItemUseV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemUseV2Res packet)
		{ 
			return false;
		};
		public delegate bool PkLootingAddV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PkLootingAddV2Noti packet);  
		public PkLootingAddV2NotiDelegate PkLootingAddV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PkLootingAddV2Noti packet)
		{ 
			return false;
		};
		public delegate bool PkLootingItemV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PkLootingItemV2Res packet);  
		public PkLootingItemV2ResDelegate PkLootingItemV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PkLootingItemV2Res packet)
		{ 
			return false;
		};
		public delegate bool PkLootingListV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PkLootingListV2Res packet);  
		public PkLootingListV2ResDelegate PkLootingListV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PkLootingListV2Res packet)
		{ 
			return false;
		};
		public delegate bool PkLootingV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PkLootingV2Noti packet);  
		public PkLootingV2NotiDelegate PkLootingV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PkLootingV2Noti packet)
		{ 
			return false;
		};
		public delegate bool PlayerInventoryExtendInfoNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerInventoryExtendInfoNoti packet);  
		public PlayerInventoryExtendInfoNotiDelegate PlayerInventoryExtendInfoNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerInventoryExtendInfoNoti packet)
		{ 
			return false;
		};
		public delegate bool PlayerInventoryInfoV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerInventoryInfoV2Noti packet);  
		public PlayerInventoryInfoV2NotiDelegate PlayerInventoryInfoV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerInventoryInfoV2Noti packet)
		{ 
			return false;
		};
		public delegate bool WarehouseChangeSizeV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WarehouseChangeSizeV2Res packet);  
		public WarehouseChangeSizeV2ResDelegate WarehouseChangeSizeV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WarehouseChangeSizeV2Res packet)
		{ 
			return false;
		};
		public delegate bool WarehouseInfoV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WarehouseInfoV2Res packet);  
		public WarehouseInfoV2ResDelegate WarehouseInfoV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WarehouseInfoV2Res packet)
		{ 
			return false;
		};
		public delegate bool WarehouseItemMoveV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WarehouseItemMoveV2Res packet);  
		public WarehouseItemMoveV2ResDelegate WarehouseItemMoveV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WarehouseItemMoveV2Res packet)
		{ 
			return false;
		};
		public delegate bool ItemIntentionSucceedNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemIntentionSucceedNoti packet);  
		public ItemIntentionSucceedNotiDelegate ItemIntentionSucceedNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemIntentionSucceedNoti packet)
		{ 
			return false;
		};
		public delegate bool ItemSetLockResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemSetLockRes packet);  
		public ItemSetLockResDelegate ItemSetLockRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemSetLockRes packet)
		{ 
			return false;
		};
		public delegate bool ItemMarketPriceResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemMarketPriceRes packet);  
		public ItemMarketPriceResDelegate ItemMarketPriceRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemMarketPriceRes packet)
		{ 
			return false;
		};
		public delegate bool ItemInheritResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemInheritRes packet);  
		public ItemInheritResDelegate ItemInheritRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ItemInheritRes packet)
		{ 
			return false;
		};
		public delegate bool MailListV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MailListV2Res packet);  
		public MailListV2ResDelegate MailListV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MailListV2Res packet)
		{ 
			return false;
		};
		public delegate bool MailReadAllV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MailReadAllV2Res packet);  
		public MailReadAllV2ResDelegate MailReadAllV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MailReadAllV2Res packet)
		{ 
			return false;
		};
		public delegate bool MailReadV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MailReadV2Res packet);  
		public MailReadV2ResDelegate MailReadV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MailReadV2Res packet)
		{ 
			return false;
		};
		public delegate bool MatchingApplyResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MatchingApplyRes packet);  
		public MatchingApplyResDelegate MatchingApplyRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MatchingApplyRes packet)
		{ 
			return false;
		};
		public delegate bool MatchingCancelResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MatchingCancelRes packet);  
		public MatchingCancelResDelegate MatchingCancelRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MatchingCancelRes packet)
		{ 
			return false;
		};
		public delegate bool MatchingCompleteNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MatchingCompleteNoti packet);  
		public MatchingCompleteNotiDelegate MatchingCompleteNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MatchingCompleteNoti packet)
		{ 
			return false;
		};
		public delegate bool MatchingIncompleteNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MatchingIncompleteNoti packet);  
		public MatchingIncompleteNotiDelegate MatchingIncompleteNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MatchingIncompleteNoti packet)
		{ 
			return false;
		};
		public delegate bool MatchingMatchedNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MatchingMatchedNoti packet);  
		public MatchingMatchedNotiDelegate MatchingMatchedNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MatchingMatchedNoti packet)
		{ 
			return false;
		};
		public delegate bool MatchingRejectReplyNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MatchingRejectReplyNoti packet);  
		public MatchingRejectReplyNotiDelegate MatchingRejectReplyNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MatchingRejectReplyNoti packet)
		{ 
			return false;
		};
		public delegate bool MatchingReplyNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MatchingReplyNoti packet);  
		public MatchingReplyNotiDelegate MatchingReplyNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MatchingReplyNoti packet)
		{ 
			return false;
		};
		public delegate bool MatchingReplyResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MatchingReplyRes packet);  
		public MatchingReplyResDelegate MatchingReplyRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MatchingReplyRes packet)
		{ 
			return false;
		};
		public delegate bool AuthenticatePlayerCredentialResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.AuthenticatePlayerCredentialRes packet);  
		public AuthenticatePlayerCredentialResDelegate AuthenticatePlayerCredentialRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.AuthenticatePlayerCredentialRes packet)
		{ 
			return false;
		};
		public delegate bool BindStonesNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BindStonesNoti packet);  
		public BindStonesNotiDelegate BindStonesNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BindStonesNoti packet)
		{ 
			return false;
		};
		public delegate bool BroadCastContextNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BroadCastContextNoti packet);  
		public BroadCastContextNotiDelegate BroadCastContextNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BroadCastContextNoti packet)
		{ 
			return false;
		};
		public delegate bool BroadCastContextResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BroadCastContextRes packet);  
		public BroadCastContextResDelegate BroadCastContextRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BroadCastContextRes packet)
		{ 
			return false;
		};
		public delegate bool CutSceneEndV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CutSceneEndV2Res packet);  
		public CutSceneEndV2ResDelegate CutSceneEndV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CutSceneEndV2Res packet)
		{ 
			return false;
		};
		public delegate bool CutSceneStartV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CutSceneStartV2Res packet);  
		public CutSceneStartV2ResDelegate CutSceneStartV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CutSceneStartV2Res packet)
		{ 
			return false;
		};
		public delegate bool CutSceneStateV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CutSceneStateV2Noti packet);  
		public CutSceneStateV2NotiDelegate CutSceneStateV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CutSceneStateV2Noti packet)
		{ 
			return false;
		};
		public delegate bool DebugPlayerStateV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.DebugPlayerStateV2Noti packet);  
		public DebugPlayerStateV2NotiDelegate DebugPlayerStateV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.DebugPlayerStateV2Noti packet)
		{ 
			return false;
		};
		public delegate bool LogOutResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.LogOutRes packet);  
		public LogOutResDelegate LogOutRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.LogOutRes packet)
		{ 
			return false;
		};
		public delegate bool PortalV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PortalV2Res packet);  
		public PortalV2ResDelegate PortalV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PortalV2Res packet)
		{ 
			return false;
		};
		public delegate bool ReturnToLobbyResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ReturnToLobbyRes packet);  
		public ReturnToLobbyResDelegate ReturnToLobbyRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ReturnToLobbyRes packet)
		{ 
			return false;
		};
		public delegate bool ServerTimeV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ServerTimeV2Res packet);  
		public ServerTimeV2ResDelegate ServerTimeV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ServerTimeV2Res packet)
		{ 
			return false;
		};
		public delegate bool SystemMessageV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SystemMessageV2Noti packet);  
		public SystemMessageV2NotiDelegate SystemMessageV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SystemMessageV2Noti packet)
		{ 
			return false;
		};
		public delegate bool TemporalFluxZoneEnterNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TemporalFluxZoneEnterNoti packet);  
		public TemporalFluxZoneEnterNotiDelegate TemporalFluxZoneEnterNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TemporalFluxZoneEnterNoti packet)
		{ 
			return false;
		};
		public delegate bool TemporalFluxZoneExitNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TemporalFluxZoneExitNoti packet);  
		public TemporalFluxZoneExitNotiDelegate TemporalFluxZoneExitNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TemporalFluxZoneExitNoti packet)
		{ 
			return false;
		};
		public delegate bool TestPacketV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TestPacketV2Noti packet);  
		public TestPacketV2NotiDelegate TestPacketV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TestPacketV2Noti packet)
		{ 
			return false;
		};
		public delegate bool TestPacketV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TestPacketV2Res packet);  
		public TestPacketV2ResDelegate TestPacketV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TestPacketV2Res packet)
		{ 
			return false;
		};
		public delegate bool TicketInfoV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TicketInfoV2Noti packet);  
		public TicketInfoV2NotiDelegate TicketInfoV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TicketInfoV2Noti packet)
		{ 
			return false;
		};
		public delegate bool TriggerActivateMapMoveV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TriggerActivateMapMoveV2Noti packet);  
		public TriggerActivateMapMoveV2NotiDelegate TriggerActivateMapMoveV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TriggerActivateMapMoveV2Noti packet)
		{ 
			return false;
		};
		public delegate bool TriggerActivateV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TriggerActivateV2Res packet);  
		public TriggerActivateV2ResDelegate TriggerActivateV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TriggerActivateV2Res packet)
		{ 
			return false;
		};
		public delegate bool UnionV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.UnionV2Res packet);  
		public UnionV2ResDelegate UnionV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.UnionV2Res packet)
		{ 
			return false;
		};
		public delegate bool ZoneLoadingCompletedResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ZoneLoadingCompletedRes packet);  
		public ZoneLoadingCompletedResDelegate ZoneLoadingCompletedRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ZoneLoadingCompletedRes packet)
		{ 
			return false;
		};
		public delegate bool BossDamagedInfoNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BossDamagedInfoNoti packet);  
		public BossDamagedInfoNotiDelegate BossDamagedInfoNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BossDamagedInfoNoti packet)
		{ 
			return false;
		};
		public delegate bool BossFirstDamagedNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BossFirstDamagedNoti packet);  
		public BossFirstDamagedNotiDelegate BossFirstDamagedNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BossFirstDamagedNoti packet)
		{ 
			return false;
		};
		public delegate bool BossKilledNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BossKilledNoti packet);  
		public BossKilledNotiDelegate BossKilledNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BossKilledNoti packet)
		{ 
			return false;
		};
		public delegate bool BossKilledRewardNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BossKilledRewardNoti packet);  
		public BossKilledRewardNotiDelegate BossKilledRewardNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BossKilledRewardNoti packet)
		{ 
			return false;
		};
		public delegate bool GainMessageNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GainMessageNoti packet);  
		public GainMessageNotiDelegate GainMessageNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GainMessageNoti packet)
		{ 
			return false;
		};
		public delegate bool TicketUpdateNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TicketUpdateNoti packet);  
		public TicketUpdateNotiDelegate TicketUpdateNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TicketUpdateNoti packet)
		{ 
			return false;
		};
		public delegate bool BossDamagedInfoResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BossDamagedInfoRes packet);  
		public BossDamagedInfoResDelegate BossDamagedInfoRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BossDamagedInfoRes packet)
		{ 
			return false;
		};
		public delegate bool WorldBossDamagedInfoNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WorldBossDamagedInfoNoti packet);  
		public WorldBossDamagedInfoNotiDelegate WorldBossDamagedInfoNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WorldBossDamagedInfoNoti packet)
		{ 
			return false;
		};
		public delegate bool BossTakenDamageOnPlayerKillNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BossTakenDamageOnPlayerKillNoti packet);  
		public BossTakenDamageOnPlayerKillNotiDelegate BossTakenDamageOnPlayerKillNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BossTakenDamageOnPlayerKillNoti packet)
		{ 
			return false;
		};
		public delegate bool PartyChangeLootingNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyChangeLootingNoti packet);  
		public PartyChangeLootingNotiDelegate PartyChangeLootingNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyChangeLootingNoti packet)
		{ 
			return false;
		};
		public delegate bool PartyChangeLootingResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyChangeLootingRes packet);  
		public PartyChangeLootingResDelegate PartyChangeLootingRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyChangeLootingRes packet)
		{ 
			return false;
		};
		public delegate bool PartyCreateResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyCreateRes packet);  
		public PartyCreateResDelegate PartyCreateRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyCreateRes packet)
		{ 
			return false;
		};
		public delegate bool PartyDisbandNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyDisbandNoti packet);  
		public PartyDisbandNotiDelegate PartyDisbandNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyDisbandNoti packet)
		{ 
			return false;
		};
		public delegate bool PartyDisbandResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyDisbandRes packet);  
		public PartyDisbandResDelegate PartyDisbandRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyDisbandRes packet)
		{ 
			return false;
		};
		public delegate bool PartyDungeonEntranceInquiryResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyDungeonEntranceInquiryRes packet);  
		public PartyDungeonEntranceInquiryResDelegate PartyDungeonEntranceInquiryRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyDungeonEntranceInquiryRes packet)
		{ 
			return false;
		};
		public delegate bool PartyEnterDungeonCanceledNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyEnterDungeonCanceledNoti packet);  
		public PartyEnterDungeonCanceledNotiDelegate PartyEnterDungeonCanceledNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyEnterDungeonCanceledNoti packet)
		{ 
			return false;
		};
		public delegate bool PartyEnterDungeonNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyEnterDungeonNoti packet);  
		public PartyEnterDungeonNotiDelegate PartyEnterDungeonNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyEnterDungeonNoti packet)
		{ 
			return false;
		};
		public delegate bool PartyEnterDungeonReplyNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyEnterDungeonReplyNoti packet);  
		public PartyEnterDungeonReplyNotiDelegate PartyEnterDungeonReplyNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyEnterDungeonReplyNoti packet)
		{ 
			return false;
		};
		public delegate bool PartyEnterDungeonReplyResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyEnterDungeonReplyRes packet);  
		public PartyEnterDungeonReplyResDelegate PartyEnterDungeonReplyRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyEnterDungeonReplyRes packet)
		{ 
			return false;
		};
		public delegate bool PartyEnterDungeonResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyEnterDungeonRes packet);  
		public PartyEnterDungeonResDelegate PartyEnterDungeonRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyEnterDungeonRes packet)
		{ 
			return false;
		};
		public delegate bool PartyEnterNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyEnterNoti packet);  
		public PartyEnterNotiDelegate PartyEnterNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyEnterNoti packet)
		{ 
			return false;
		};
		public delegate bool PartyInfoNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyInfoNoti packet);  
		public PartyInfoNotiDelegate PartyInfoNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyInfoNoti packet)
		{ 
			return false;
		};
		public delegate bool PartyInfoResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyInfoRes packet);  
		public PartyInfoResDelegate PartyInfoRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyInfoRes packet)
		{ 
			return false;
		};
		public delegate bool PartyInviteNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyInviteNoti packet);  
		public PartyInviteNotiDelegate PartyInviteNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyInviteNoti packet)
		{ 
			return false;
		};
		public delegate bool PartyInviteReplyNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyInviteReplyNoti packet);  
		public PartyInviteReplyNotiDelegate PartyInviteReplyNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyInviteReplyNoti packet)
		{ 
			return false;
		};
		public delegate bool PartyInviteReplyResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyInviteReplyRes packet);  
		public PartyInviteReplyResDelegate PartyInviteReplyRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyInviteReplyRes packet)
		{ 
			return false;
		};
		public delegate bool PartyInviteResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyInviteRes packet);  
		public PartyInviteResDelegate PartyInviteRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyInviteRes packet)
		{ 
			return false;
		};
		public delegate bool PartyKickedNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyKickedNoti packet);  
		public PartyKickedNotiDelegate PartyKickedNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyKickedNoti packet)
		{ 
			return false;
		};
		public delegate bool PartyLeaderChangeNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyLeaderChangeNoti packet);  
		public PartyLeaderChangeNotiDelegate PartyLeaderChangeNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyLeaderChangeNoti packet)
		{ 
			return false;
		};
		public delegate bool PartyLeaderChangeResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyLeaderChangeRes packet);  
		public PartyLeaderChangeResDelegate PartyLeaderChangeRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyLeaderChangeRes packet)
		{ 
			return false;
		};
		public delegate bool PartyLeaveNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyLeaveNoti packet);  
		public PartyLeaveNotiDelegate PartyLeaveNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyLeaveNoti packet)
		{ 
			return false;
		};
		public delegate bool PartyLeaveResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyLeaveRes packet);  
		public PartyLeaveResDelegate PartyLeaveRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyLeaveRes packet)
		{ 
			return false;
		};
		public delegate bool PartyMemberKickNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyMemberKickNoti packet);  
		public PartyMemberKickNotiDelegate PartyMemberKickNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyMemberKickNoti packet)
		{ 
			return false;
		};
		public delegate bool PartyMemberKickResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyMemberKickRes packet);  
		public PartyMemberKickResDelegate PartyMemberKickRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyMemberKickRes packet)
		{ 
			return false;
		};
		public delegate bool PartyMemberUpdateNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyMemberUpdateNoti packet);  
		public PartyMemberUpdateNotiDelegate PartyMemberUpdateNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyMemberUpdateNoti packet)
		{ 
			return false;
		};
		public delegate bool PartySuggestionPlayersResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartySuggestionPlayersRes packet);  
		public PartySuggestionPlayersResDelegate PartySuggestionPlayersRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartySuggestionPlayersRes packet)
		{ 
			return false;
		};
		public delegate bool PartyEnterDungeonCanceledResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyEnterDungeonCanceledRes packet);  
		public PartyEnterDungeonCanceledResDelegate PartyEnterDungeonCanceledRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PartyEnterDungeonCanceledRes packet)
		{ 
			return false;
		};
		public delegate bool PetCollectInfoV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PetCollectInfoV2Res packet);  
		public PetCollectInfoV2ResDelegate PetCollectInfoV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PetCollectInfoV2Res packet)
		{ 
			return false;
		};
		public delegate bool PetEquipOffV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PetEquipOffV2Noti packet);  
		public PetEquipOffV2NotiDelegate PetEquipOffV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PetEquipOffV2Noti packet)
		{ 
			return false;
		};
		public delegate bool PetEquipOffV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PetEquipOffV2Res packet);  
		public PetEquipOffV2ResDelegate PetEquipOffV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PetEquipOffV2Res packet)
		{ 
			return false;
		};
		public delegate bool PetEquipV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PetEquipV2Noti packet);  
		public PetEquipV2NotiDelegate PetEquipV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PetEquipV2Noti packet)
		{ 
			return false;
		};
		public delegate bool PetEquipV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PetEquipV2Res packet);  
		public PetEquipV2ResDelegate PetEquipV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PetEquipV2Res packet)
		{ 
			return false;
		};
		public delegate bool PetFeedUseV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PetFeedUseV2Res packet);  
		public PetFeedUseV2ResDelegate PetFeedUseV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PetFeedUseV2Res packet)
		{ 
			return false;
		};
		public delegate bool PetGachaV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PetGachaV2Res packet);  
		public PetGachaV2ResDelegate PetGachaV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PetGachaV2Res packet)
		{ 
			return false;
		};
		public delegate bool PetInfoV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PetInfoV2Res packet);  
		public PetInfoV2ResDelegate PetInfoV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PetInfoV2Res packet)
		{ 
			return false;
		};
		public delegate bool PetMixV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PetMixV2Res packet);  
		public PetMixV2ResDelegate PetMixV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PetMixV2Res packet)
		{ 
			return false;
		};
		public delegate bool PetUpgradeV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PetUpgradeV2Res packet);  
		public PetUpgradeV2ResDelegate PetUpgradeV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PetUpgradeV2Res packet)
		{ 
			return false;
		};
		public delegate bool PetInActiveBuffResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PetInActiveBuffRes packet);  
		public PetInActiveBuffResDelegate PetInActiveBuffRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PetInActiveBuffRes packet)
		{ 
			return false;
		};
		public delegate bool PhaseFieldEndV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PhaseFieldEndV2Res packet);  
		public PhaseFieldEndV2ResDelegate PhaseFieldEndV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PhaseFieldEndV2Res packet)
		{ 
			return false;
		};
		public delegate bool PhaseFieldStartV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PhaseFieldStartV2Res packet);  
		public PhaseFieldStartV2ResDelegate PhaseFieldStartV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PhaseFieldStartV2Res packet)
		{ 
			return false;
		};
		public delegate bool PlayerCrimeV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerCrimeV2Noti packet);  
		public PlayerCrimeV2NotiDelegate PlayerCrimeV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerCrimeV2Noti packet)
		{ 
			return false;
		};
		public delegate bool PlayerDeleteResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerDeleteRes packet);  
		public PlayerDeleteResDelegate PlayerDeleteRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerDeleteRes packet)
		{ 
			return false;
		};
		public delegate bool PlayerEventV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerEventV2Noti packet);  
		public PlayerEventV2NotiDelegate PlayerEventV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerEventV2Noti packet)
		{ 
			return false;
		};
		public delegate bool PlayerExpChangeV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerExpChangeV2Noti packet);  
		public PlayerExpChangeV2NotiDelegate PlayerExpChangeV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerExpChangeV2Noti packet)
		{ 
			return false;
		};
		public delegate bool PlayerGetMacroResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerGetMacroRes packet);  
		public PlayerGetMacroResDelegate PlayerGetMacroRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerGetMacroRes packet)
		{ 
			return false;
		};
		public delegate bool PlayerLootingV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerLootingV2Noti packet);  
		public PlayerLootingV2NotiDelegate PlayerLootingV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerLootingV2Noti packet)
		{ 
			return false;
		};
		public delegate bool PlayerMapMoveV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerMapMoveV2Res packet);  
		public PlayerMapMoveV2ResDelegate PlayerMapMoveV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerMapMoveV2Res packet)
		{ 
			return false;
		};
		public delegate bool PlayerMoveV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerMoveV2Noti packet);  
		public PlayerMoveV2NotiDelegate PlayerMoveV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerMoveV2Noti packet)
		{ 
			return false;
		};
		public delegate bool PlayerMoveV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerMoveV2Res packet);  
		public PlayerMoveV2ResDelegate PlayerMoveV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerMoveV2Res packet)
		{ 
			return false;
		};
		public delegate bool PlayerTendencyNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerTendencyNoti packet);  
		public PlayerTendencyNotiDelegate PlayerTendencyNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerTendencyNoti packet)
		{ 
			return false;
		};
		public delegate bool PlayerPvpValueNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerPvpValueNoti packet);  
		public PlayerPvpValueNotiDelegate PlayerPvpValueNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerPvpValueNoti packet)
		{ 
			return false;
		};
		public delegate bool PlayerResurrectionV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerResurrectionV2Noti packet);  
		public PlayerResurrectionV2NotiDelegate PlayerResurrectionV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerResurrectionV2Noti packet)
		{ 
			return false;
		};
		public delegate bool PlayerResurrectionV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerResurrectionV2Res packet);  
		public PlayerResurrectionV2ResDelegate PlayerResurrectionV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerResurrectionV2Res packet)
		{ 
			return false;
		};
		public delegate bool PlayerSetMacroResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerSetMacroRes packet);  
		public PlayerSetMacroResDelegate PlayerSetMacroRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerSetMacroRes packet)
		{ 
			return false;
		};
		public delegate bool PlayerStatChangeV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerStatChangeV2Noti packet);  
		public PlayerStatChangeV2NotiDelegate PlayerStatChangeV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerStatChangeV2Noti packet)
		{ 
			return false;
		};
		public delegate bool PlayerStatPointChangeV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerStatPointChangeV2Noti packet);  
		public PlayerStatPointChangeV2NotiDelegate PlayerStatPointChangeV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerStatPointChangeV2Noti packet)
		{ 
			return false;
		};
		public delegate bool PlayerStatPointChangeV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerStatPointChangeV2Res packet);  
		public PlayerStatPointChangeV2ResDelegate PlayerStatPointChangeV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerStatPointChangeV2Res packet)
		{ 
			return false;
		};
		public delegate bool PlayerStatPointInitV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerStatPointInitV2Res packet);  
		public PlayerStatPointInitV2ResDelegate PlayerStatPointInitV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerStatPointInitV2Res packet)
		{ 
			return false;
		};
		public delegate bool PlayerStatV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerStatV2Res packet);  
		public PlayerStatV2ResDelegate PlayerStatV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerStatV2Res packet)
		{ 
			return false;
		};
		public delegate bool PlayerWalletUpdateV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerWalletUpdateV2Noti packet);  
		public PlayerWalletUpdateV2NotiDelegate PlayerWalletUpdateV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerWalletUpdateV2Noti packet)
		{ 
			return false;
		};
		public delegate bool PlayerWalletV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerWalletV2Noti packet);  
		public PlayerWalletV2NotiDelegate PlayerWalletV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerWalletV2Noti packet)
		{ 
			return false;
		};
		public delegate bool PlayerWantedV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerWantedV2Noti packet);  
		public PlayerWantedV2NotiDelegate PlayerWantedV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerWantedV2Noti packet)
		{ 
			return false;
		};
		public delegate bool PlayerDeathInfoResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerDeathInfoRes packet);  
		public PlayerDeathInfoResDelegate PlayerDeathInfoRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerDeathInfoRes packet)
		{ 
			return false;
		};
		public delegate bool RecoverPlayerExpResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RecoverPlayerExpRes packet);  
		public RecoverPlayerExpResDelegate RecoverPlayerExpRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RecoverPlayerExpRes packet)
		{ 
			return false;
		};
		public delegate bool PlayerCombatCapabilityNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerCombatCapabilityNoti packet);  
		public PlayerCombatCapabilityNotiDelegate PlayerCombatCapabilityNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerCombatCapabilityNoti packet)
		{ 
			return false;
		};
		public delegate bool PlayerClassUpV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerClassUpV2Res packet);  
		public PlayerClassUpV2ResDelegate PlayerClassUpV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerClassUpV2Res packet)
		{ 
			return false;
		};
		public delegate bool QuickslotSetResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.QuickslotSetRes packet);  
		public QuickslotSetResDelegate QuickslotSetRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.QuickslotSetRes packet)
		{ 
			return false;
		};
		public delegate bool QuickslotListNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.QuickslotListNoti packet);  
		public QuickslotListNotiDelegate QuickslotListNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.QuickslotListNoti packet)
		{ 
			return false;
		};
		public delegate bool MembershipAddNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MembershipAddNoti packet);  
		public MembershipAddNotiDelegate MembershipAddNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MembershipAddNoti packet)
		{ 
			return false;
		};
		public delegate bool MembershipUpdateNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MembershipUpdateNoti packet);  
		public MembershipUpdateNotiDelegate MembershipUpdateNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MembershipUpdateNoti packet)
		{ 
			return false;
		};
		public delegate bool MembershipListNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MembershipListNoti packet);  
		public MembershipListNotiDelegate MembershipListNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.MembershipListNoti packet)
		{ 
			return false;
		};
		public delegate bool PlayerExpRecoveryPopupResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerExpRecoveryPopupRes packet);  
		public PlayerExpRecoveryPopupResDelegate PlayerExpRecoveryPopupRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerExpRecoveryPopupRes packet)
		{ 
			return false;
		};
		public delegate bool RTTPlayerMoveV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RTTPlayerMoveV2Res packet);  
		public RTTPlayerMoveV2ResDelegate RTTPlayerMoveV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RTTPlayerMoveV2Res packet)
		{ 
			return false;
		};
		public delegate bool CheatGetQuestV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CheatGetQuestV2Noti packet);  
		public CheatGetQuestV2NotiDelegate CheatGetQuestV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CheatGetQuestV2Noti packet)
		{ 
			return false;
		};
		public delegate bool DailyQuestOpenV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.DailyQuestOpenV2Noti packet);  
		public DailyQuestOpenV2NotiDelegate DailyQuestOpenV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.DailyQuestOpenV2Noti packet)
		{ 
			return false;
		};
		public delegate bool PlayerQuestProgressV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerQuestProgressV2Noti packet);  
		public PlayerQuestProgressV2NotiDelegate PlayerQuestProgressV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerQuestProgressV2Noti packet)
		{ 
			return false;
		};
		public delegate bool QuestAbandonV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.QuestAbandonV2Res packet);  
		public QuestAbandonV2ResDelegate QuestAbandonV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.QuestAbandonV2Res packet)
		{ 
			return false;
		};
		public delegate bool QuestAcceptV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.QuestAcceptV2Res packet);  
		public QuestAcceptV2ResDelegate QuestAcceptV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.QuestAcceptV2Res packet)
		{ 
			return false;
		};
		public delegate bool QuestCompleteV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.QuestCompleteV2Res packet);  
		public QuestCompleteV2ResDelegate QuestCompleteV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.QuestCompleteV2Res packet)
		{ 
			return false;
		};
		public delegate bool QuestConditionCompleteV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.QuestConditionCompleteV2Res packet);  
		public QuestConditionCompleteV2ResDelegate QuestConditionCompleteV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.QuestConditionCompleteV2Res packet)
		{ 
			return false;
		};
		public delegate bool QuestListV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.QuestListV2Res packet);  
		public QuestListV2ResDelegate QuestListV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.QuestListV2Res packet)
		{ 
			return false;
		};
		public delegate bool QuestPortalV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.QuestPortalV2Res packet);  
		public QuestPortalV2ResDelegate QuestPortalV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.QuestPortalV2Res packet)
		{ 
			return false;
		};
		public delegate bool QuestRegisterV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.QuestRegisterV2Res packet);  
		public QuestRegisterV2ResDelegate QuestRegisterV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.QuestRegisterV2Res packet)
		{ 
			return false;
		};
		public delegate bool QuestRerollV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.QuestRerollV2Res packet);  
		public QuestRerollV2ResDelegate QuestRerollV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.QuestRerollV2Res packet)
		{ 
			return false;
		};
		public delegate bool QuestResetCheatV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.QuestResetCheatV2Noti packet);  
		public QuestResetCheatV2NotiDelegate QuestResetCheatV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.QuestResetCheatV2Noti packet)
		{ 
			return false;
		};
		public delegate bool QuestRewardV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.QuestRewardV2Res packet);  
		public QuestRewardV2ResDelegate QuestRewardV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.QuestRewardV2Res packet)
		{ 
			return false;
		};
		public delegate bool QuestTalkCompleteV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.QuestTalkCompleteV2Res packet);  
		public QuestTalkCompleteV2ResDelegate QuestTalkCompleteV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.QuestTalkCompleteV2Res packet)
		{ 
			return false;
		};
		public delegate bool ResetDailyQuestV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ResetDailyQuestV2Noti packet);  
		public ResetDailyQuestV2NotiDelegate ResetDailyQuestV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ResetDailyQuestV2Noti packet)
		{ 
			return false;
		};
		public delegate bool TutorialSkipV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TutorialSkipV2Res packet);  
		public TutorialSkipV2ResDelegate TutorialSkipV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TutorialSkipV2Res packet)
		{ 
			return false;
		};
		public delegate bool GuildRelationResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildRelationRes packet);  
		public GuildRelationResDelegate GuildRelationRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GuildRelationRes packet)
		{ 
			return false;
		};
		public delegate bool PlayerRelationResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerRelationRes packet);  
		public PlayerRelationResDelegate PlayerRelationRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.PlayerRelationRes packet)
		{ 
			return false;
		};
		public delegate bool RelationsNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RelationsNoti packet);  
		public RelationsNotiDelegate RelationsNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RelationsNoti packet)
		{ 
			return false;
		};
		public delegate bool RideAttachDeleteV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideAttachDeleteV2Res packet);  
		public RideAttachDeleteV2ResDelegate RideAttachDeleteV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideAttachDeleteV2Res packet)
		{ 
			return false;
		};
		public delegate bool RideAttachDisassembleV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideAttachDisassembleV2Res packet);  
		public RideAttachDisassembleV2ResDelegate RideAttachDisassembleV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideAttachDisassembleV2Res packet)
		{ 
			return false;
		};
		public delegate bool RideAttachEquipOffV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideAttachEquipOffV2Noti packet);  
		public RideAttachEquipOffV2NotiDelegate RideAttachEquipOffV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideAttachEquipOffV2Noti packet)
		{ 
			return false;
		};
		public delegate bool RideAttachEquipOffV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideAttachEquipOffV2Res packet);  
		public RideAttachEquipOffV2ResDelegate RideAttachEquipOffV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideAttachEquipOffV2Res packet)
		{ 
			return false;
		};
		public delegate bool RideAttachEquipV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideAttachEquipV2Noti packet);  
		public RideAttachEquipV2NotiDelegate RideAttachEquipV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideAttachEquipV2Noti packet)
		{ 
			return false;
		};
		public delegate bool RideAttachEquipV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideAttachEquipV2Res packet);  
		public RideAttachEquipV2ResDelegate RideAttachEquipV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideAttachEquipV2Res packet)
		{ 
			return false;
		};
		public delegate bool RideAttachGachaV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideAttachGachaV2Res packet);  
		public RideAttachGachaV2ResDelegate RideAttachGachaV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideAttachGachaV2Res packet)
		{ 
			return false;
		};
		public delegate bool RideAttachInvenExtendV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideAttachInvenExtendV2Res packet);  
		public RideAttachInvenExtendV2ResDelegate RideAttachInvenExtendV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideAttachInvenExtendV2Res packet)
		{ 
			return false;
		};
		public delegate bool RideCollectInfosNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideCollectInfosNoti packet);  
		public RideCollectInfosNotiDelegate RideCollectInfosNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideCollectInfosNoti packet)
		{ 
			return false;
		};
		public delegate bool RideEquipOffV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideEquipOffV2Res packet);  
		public RideEquipOffV2ResDelegate RideEquipOffV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideEquipOffV2Res packet)
		{ 
			return false;
		};
		public delegate bool RideEquipV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideEquipV2Res packet);  
		public RideEquipV2ResDelegate RideEquipV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideEquipV2Res packet)
		{ 
			return false;
		};
		public delegate bool RideGachaV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideGachaV2Res packet);  
		public RideGachaV2ResDelegate RideGachaV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideGachaV2Res packet)
		{ 
			return false;
		};
		public delegate bool RideInfosNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideInfosNoti packet);  
		public RideInfosNotiDelegate RideInfosNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideInfosNoti packet)
		{ 
			return false;
		};
		public delegate bool RideMixV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideMixV2Res packet);  
		public RideMixV2ResDelegate RideMixV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideMixV2Res packet)
		{ 
			return false;
		};
		public delegate bool RideSitOffV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideSitOffV2Noti packet);  
		public RideSitOffV2NotiDelegate RideSitOffV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideSitOffV2Noti packet)
		{ 
			return false;
		};
		public delegate bool RideSitOffV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideSitOffV2Res packet);  
		public RideSitOffV2ResDelegate RideSitOffV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideSitOffV2Res packet)
		{ 
			return false;
		};
		public delegate bool RideSitV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideSitV2Noti packet);  
		public RideSitV2NotiDelegate RideSitV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideSitV2Noti packet)
		{ 
			return false;
		};
		public delegate bool RideSitV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideSitV2Res packet);  
		public RideSitV2ResDelegate RideSitV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RideSitV2Res packet)
		{ 
			return false;
		};
		public delegate bool BuyCashShopItemV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BuyCashShopItemV2Res packet);  
		public BuyCashShopItemV2ResDelegate BuyCashShopItemV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BuyCashShopItemV2Res packet)
		{ 
			return false;
		};
		public delegate bool BuyGameShopItemV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BuyGameShopItemV2Res packet);  
		public BuyGameShopItemV2ResDelegate BuyGameShopItemV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BuyGameShopItemV2Res packet)
		{ 
			return false;
		};
		public delegate bool GameShopSellItemV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GameShopSellItemV2Res packet);  
		public GameShopSellItemV2ResDelegate GameShopSellItemV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GameShopSellItemV2Res packet)
		{ 
			return false;
		};
		public delegate bool ShopBuyCountListNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ShopBuyCountListNoti packet);  
		public ShopBuyCountListNotiDelegate ShopBuyCountListNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ShopBuyCountListNoti packet)
		{ 
			return false;
		};
		public delegate bool ChangedSiegeWarMatchInfoV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ChangedSiegeWarMatchInfoV2Noti packet);  
		public ChangedSiegeWarMatchInfoV2NotiDelegate ChangedSiegeWarMatchInfoV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ChangedSiegeWarMatchInfoV2Noti packet)
		{ 
			return false;
		};
		public delegate bool ChangeSiegeModeV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ChangeSiegeModeV2Res packet);  
		public ChangeSiegeModeV2ResDelegate ChangeSiegeModeV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ChangeSiegeModeV2Res packet)
		{ 
			return false;
		};
		public delegate bool ChangeSiegeWarInfoV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ChangeSiegeWarInfoV2Noti packet);  
		public ChangeSiegeWarInfoV2NotiDelegate ChangeSiegeWarInfoV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ChangeSiegeWarInfoV2Noti packet)
		{ 
			return false;
		};
		public delegate bool ChangeSiegeWarObjectInfoV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ChangeSiegeWarObjectInfoV2Noti packet);  
		public ChangeSiegeWarObjectInfoV2NotiDelegate ChangeSiegeWarObjectInfoV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ChangeSiegeWarObjectInfoV2Noti packet)
		{ 
			return false;
		};
		public delegate bool ChoiceSiegeWarFactionV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ChoiceSiegeWarFactionV2Res packet);  
		public ChoiceSiegeWarFactionV2ResDelegate ChoiceSiegeWarFactionV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ChoiceSiegeWarFactionV2Res packet)
		{ 
			return false;
		};
		public delegate bool CreatedDungeonSiegeWarV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CreatedDungeonSiegeWarV2Noti packet);  
		public CreatedDungeonSiegeWarV2NotiDelegate CreatedDungeonSiegeWarV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.CreatedDungeonSiegeWarV2Noti packet)
		{ 
			return false;
		};
		public delegate bool DungeonSiegeWarClearV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.DungeonSiegeWarClearV2Noti packet);  
		public DungeonSiegeWarClearV2NotiDelegate DungeonSiegeWarClearV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.DungeonSiegeWarClearV2Noti packet)
		{ 
			return false;
		};
		public delegate bool GetSiegeWarInfoV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GetSiegeWarInfoV2Res packet);  
		public GetSiegeWarInfoV2ResDelegate GetSiegeWarInfoV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GetSiegeWarInfoV2Res packet)
		{ 
			return false;
		};
		public delegate bool GetSiegeWarMatchInfoV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GetSiegeWarMatchInfoV2Res packet);  
		public GetSiegeWarMatchInfoV2ResDelegate GetSiegeWarMatchInfoV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.GetSiegeWarMatchInfoV2Res packet)
		{ 
			return false;
		};
		public delegate bool ShowLocalizationV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ShowLocalizationV2Noti packet);  
		public ShowLocalizationV2NotiDelegate ShowLocalizationV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ShowLocalizationV2Noti packet)
		{ 
			return false;
		};
		public delegate bool ActorChangeBattleModeV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorChangeBattleModeV2Noti packet);  
		public ActorChangeBattleModeV2NotiDelegate ActorChangeBattleModeV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ActorChangeBattleModeV2Noti packet)
		{ 
			return false;
		};
		public delegate bool BuffListInfoV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BuffListInfoV2Res packet);  
		public BuffListInfoV2ResDelegate BuffListInfoV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BuffListInfoV2Res packet)
		{ 
			return false;
		};
		public delegate bool SkillChangeAutoUseV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillChangeAutoUseV2Res packet);  
		public SkillChangeAutoUseV2ResDelegate SkillChangeAutoUseV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillChangeAutoUseV2Res packet)
		{ 
			return false;
		};
		public delegate bool SkillChangePresetV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillChangePresetV2Res packet);  
		public SkillChangePresetV2ResDelegate SkillChangePresetV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillChangePresetV2Res packet)
		{ 
			return false;
		};
		public delegate bool SkillDotEffectV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillDotEffectV2Noti packet);  
		public SkillDotEffectV2NotiDelegate SkillDotEffectV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillDotEffectV2Noti packet)
		{ 
			return false;
		};
		public delegate bool SkillEquipV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillEquipV2Res packet);  
		public SkillEquipV2ResDelegate SkillEquipV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillEquipV2Res packet)
		{ 
			return false;
		};
		public delegate bool SkillHitEffectV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillHitEffectV2Noti packet);  
		public SkillHitEffectV2NotiDelegate SkillHitEffectV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillHitEffectV2Noti packet)
		{ 
			return false;
		};
		public delegate bool SkillHitV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillHitV2Noti packet);  
		public SkillHitV2NotiDelegate SkillHitV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillHitV2Noti packet)
		{ 
			return false;
		};
		public delegate bool SkillHitV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillHitV2Res packet);  
		public SkillHitV2ResDelegate SkillHitV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillHitV2Res packet)
		{ 
			return false;
		};
		public delegate bool SkillLearnV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillLearnV2Res packet);  
		public SkillLearnV2ResDelegate SkillLearnV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillLearnV2Res packet)
		{ 
			return false;
		};
		public delegate bool SkillLevelUpV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillLevelUpV2Res packet);  
		public SkillLevelUpV2ResDelegate SkillLevelUpV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillLevelUpV2Res packet)
		{ 
			return false;
		};
		public delegate bool SkillListInfoV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillListInfoV2Res packet);  
		public SkillListInfoV2ResDelegate SkillListInfoV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillListInfoV2Res packet)
		{ 
			return false;
		};
		public delegate bool SkillPreActionEndV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillPreActionEndV2Noti packet);  
		public SkillPreActionEndV2NotiDelegate SkillPreActionEndV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillPreActionEndV2Noti packet)
		{ 
			return false;
		};
		public delegate bool SkillPresetInfosNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillPresetInfosNoti packet);  
		public SkillPresetInfosNotiDelegate SkillPresetInfosNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillPresetInfosNoti packet)
		{ 
			return false;
		};
		public delegate bool SkillUnEquipV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillUnEquipV2Res packet);  
		public SkillUnEquipV2ResDelegate SkillUnEquipV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillUnEquipV2Res packet)
		{ 
			return false;
		};
		public delegate bool SkillUpgradeV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillUpgradeV2Res packet);  
		public SkillUpgradeV2ResDelegate SkillUpgradeV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillUpgradeV2Res packet)
		{ 
			return false;
		};
		public delegate bool SkillUseV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillUseV2Noti packet);  
		public SkillUseV2NotiDelegate SkillUseV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillUseV2Noti packet)
		{ 
			return false;
		};
		public delegate bool SkillUseV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillUseV2Res packet);  
		public SkillUseV2ResDelegate SkillUseV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillUseV2Res packet)
		{ 
			return false;
		};
		public delegate bool SkillDotHealEffectV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillDotHealEffectV2Noti packet);  
		public SkillDotHealEffectV2NotiDelegate SkillDotHealEffectV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.SkillDotHealEffectV2Noti packet)
		{ 
			return false;
		};
		public delegate bool RTTSkillUseV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RTTSkillUseV2Res packet);  
		public RTTSkillUseV2ResDelegate RTTSkillUseV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RTTSkillUseV2Res packet)
		{ 
			return false;
		};
		public delegate bool RTTSkillHitV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RTTSkillHitV2Res packet);  
		public RTTSkillHitV2ResDelegate RTTSkillHitV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.RTTSkillHitV2Res packet)
		{ 
			return false;
		};
		public delegate bool TitleAddV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TitleAddV2Noti packet);  
		public TitleAddV2NotiDelegate TitleAddV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TitleAddV2Noti packet)
		{ 
			return false;
		};
		public delegate bool TitleChangeV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TitleChangeV2Noti packet);  
		public TitleChangeV2NotiDelegate TitleChangeV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TitleChangeV2Noti packet)
		{ 
			return false;
		};
		public delegate bool TitleChangeV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TitleChangeV2Res packet);  
		public TitleChangeV2ResDelegate TitleChangeV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TitleChangeV2Res packet)
		{ 
			return false;
		};
		public delegate bool TitleConditionUpdateV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TitleConditionUpdateV2Noti packet);  
		public TitleConditionUpdateV2NotiDelegate TitleConditionUpdateV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TitleConditionUpdateV2Noti packet)
		{ 
			return false;
		};
		public delegate bool TitleListV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TitleListV2Res packet);  
		public TitleListV2ResDelegate TitleListV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TitleListV2Res packet)
		{ 
			return false;
		};
		public delegate bool TradeCronAverageBalanceResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeCronAverageBalanceRes packet);  
		public TradeCronAverageBalanceResDelegate TradeCronAverageBalanceRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeCronAverageBalanceRes packet)
		{ 
			return false;
		};
		public delegate bool TradeCronBalanceResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeCronBalanceRes packet);  
		public TradeCronBalanceResDelegate TradeCronBalanceRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeCronBalanceRes packet)
		{ 
			return false;
		};
		public delegate bool TradeCronBuyResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeCronBuyRes packet);  
		public TradeCronBuyResDelegate TradeCronBuyRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeCronBuyRes packet)
		{ 
			return false;
		};
		public delegate bool TradeCronInfoResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeCronInfoRes packet);  
		public TradeCronInfoResDelegate TradeCronInfoRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeCronInfoRes packet)
		{ 
			return false;
		};
		public delegate bool TradeCronListResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeCronListRes packet);  
		public TradeCronListResDelegate TradeCronListRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeCronListRes packet)
		{ 
			return false;
		};
		public delegate bool TradeCronPreviousDayBalanceResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeCronPreviousDayBalanceRes packet);  
		public TradeCronPreviousDayBalanceResDelegate TradeCronPreviousDayBalanceRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeCronPreviousDayBalanceRes packet)
		{ 
			return false;
		};
		public delegate bool TradeCronSellResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeCronSellRes packet);  
		public TradeCronSellResDelegate TradeCronSellRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeCronSellRes packet)
		{ 
			return false;
		};
		public delegate bool TradeCronWeeklyBalanceResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeCronWeeklyBalanceRes packet);  
		public TradeCronWeeklyBalanceResDelegate TradeCronWeeklyBalanceRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeCronWeeklyBalanceRes packet)
		{ 
			return false;
		};
		public delegate bool TradePersonalListNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradePersonalListNoti packet);  
		public TradePersonalListNotiDelegate TradePersonalListNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradePersonalListNoti packet)
		{ 
			return false;
		};
		public delegate bool TradePersonalRequestResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradePersonalRequestRes packet);  
		public TradePersonalRequestResDelegate TradePersonalRequestRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradePersonalRequestRes packet)
		{ 
			return false;
		};
		public delegate bool TradePersonalUpdateNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradePersonalUpdateNoti packet);  
		public TradePersonalUpdateNotiDelegate TradePersonalUpdateNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradePersonalUpdateNoti packet)
		{ 
			return false;
		};
		public delegate bool TradePersonalAddNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradePersonalAddNoti packet);  
		public TradePersonalAddNotiDelegate TradePersonalAddNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradePersonalAddNoti packet)
		{ 
			return false;
		};
		public delegate bool TradePersonalDeleteNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradePersonalDeleteNoti packet);  
		public TradePersonalDeleteNotiDelegate TradePersonalDeleteNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradePersonalDeleteNoti packet)
		{ 
			return false;
		};
		public delegate bool TradePersonalAcceptResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradePersonalAcceptRes packet);  
		public TradePersonalAcceptResDelegate TradePersonalAcceptRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradePersonalAcceptRes packet)
		{ 
			return false;
		};
		public delegate bool TradePersonalRefuseResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradePersonalRefuseRes packet);  
		public TradePersonalRefuseResDelegate TradePersonalRefuseRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradePersonalRefuseRes packet)
		{ 
			return false;
		};
		public delegate bool TradePersonalCancelResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradePersonalCancelRes packet);  
		public TradePersonalCancelResDelegate TradePersonalCancelRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradePersonalCancelRes packet)
		{ 
			return false;
		};
		public delegate bool TradePersonalWithdrawResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradePersonalWithdrawRes packet);  
		public TradePersonalWithdrawResDelegate TradePersonalWithdrawRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradePersonalWithdrawRes packet)
		{ 
			return false;
		};
		public delegate bool TradePersonalFinishResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradePersonalFinishRes packet);  
		public TradePersonalFinishResDelegate TradePersonalFinishRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradePersonalFinishRes packet)
		{ 
			return false;
		};
		public delegate bool TradePersonalHistoryResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradePersonalHistoryRes packet);  
		public TradePersonalHistoryResDelegate TradePersonalHistoryRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradePersonalHistoryRes packet)
		{ 
			return false;
		};
		public delegate bool TradeCronMyListResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeCronMyListRes packet);  
		public TradeCronMyListResDelegate TradeCronMyListRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeCronMyListRes packet)
		{ 
			return false;
		};
		public delegate bool TradeCronSettleResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeCronSettleRes packet);  
		public TradeCronSettleResDelegate TradeCronSettleRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeCronSettleRes packet)
		{ 
			return false;
		};
		public delegate bool TradeCronTradesResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeCronTradesRes packet);  
		public TradeCronTradesResDelegate TradeCronTradesRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeCronTradesRes packet)
		{ 
			return false;
		};
		public delegate bool TradeCronTimeToNextChangeBalanceResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeCronTimeToNextChangeBalanceRes packet);  
		public TradeCronTimeToNextChangeBalanceResDelegate TradeCronTimeToNextChangeBalanceRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeCronTimeToNextChangeBalanceRes packet)
		{ 
			return false;
		};
		public delegate bool TradeCronCancelResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeCronCancelRes packet);  
		public TradeCronCancelResDelegate TradeCronCancelRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeCronCancelRes packet)
		{ 
			return false;
		};
		public delegate bool TradeCronReclaimExpiredResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeCronReclaimExpiredRes packet);  
		public TradeCronReclaimExpiredResDelegate TradeCronReclaimExpiredRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeCronReclaimExpiredRes packet)
		{ 
			return false;
		};
		public delegate bool TradeCronRemainingCanceledPenaltyTimeResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeCronRemainingCanceledPenaltyTimeRes packet);  
		public TradeCronRemainingCanceledPenaltyTimeResDelegate TradeCronRemainingCanceledPenaltyTimeRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeCronRemainingCanceledPenaltyTimeRes packet)
		{ 
			return false;
		};
		public delegate bool TradeItemSellListNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeItemSellListNoti packet);  
		public TradeItemSellListNotiDelegate TradeItemSellListNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeItemSellListNoti packet)
		{ 
			return false;
		};
		public delegate bool TradeItemUpdateNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeItemUpdateNoti packet);  
		public TradeItemUpdateNotiDelegate TradeItemUpdateNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeItemUpdateNoti packet)
		{ 
			return false;
		};
		public delegate bool TradeItemDeleteNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeItemDeleteNoti packet);  
		public TradeItemDeleteNotiDelegate TradeItemDeleteNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeItemDeleteNoti packet)
		{ 
			return false;
		};
		public delegate bool TradeItemRegistResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeItemRegistRes packet);  
		public TradeItemRegistResDelegate TradeItemRegistRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeItemRegistRes packet)
		{ 
			return false;
		};
		public delegate bool TradeItemCancelResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeItemCancelRes packet);  
		public TradeItemCancelResDelegate TradeItemCancelRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeItemCancelRes packet)
		{ 
			return false;
		};
		public delegate bool TradeItemBuyResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeItemBuyRes packet);  
		public TradeItemBuyResDelegate TradeItemBuyRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeItemBuyRes packet)
		{ 
			return false;
		};
		public delegate bool TradeItemWithdrawResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeItemWithdrawRes packet);  
		public TradeItemWithdrawResDelegate TradeItemWithdrawRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeItemWithdrawRes packet)
		{ 
			return false;
		};
		public delegate bool TradeItemFinishResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeItemFinishRes packet);  
		public TradeItemFinishResDelegate TradeItemFinishRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeItemFinishRes packet)
		{ 
			return false;
		};
		public delegate bool TradeItemHistoryResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeItemHistoryRes packet);  
		public TradeItemHistoryResDelegate TradeItemHistoryRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeItemHistoryRes packet)
		{ 
			return false;
		};
		public delegate bool TradeItemSearchCategoryResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeItemSearchCategoryRes packet);  
		public TradeItemSearchCategoryResDelegate TradeItemSearchCategoryRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeItemSearchCategoryRes packet)
		{ 
			return false;
		};
		public delegate bool TradeItemSearchItemIndexResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeItemSearchItemIndexRes packet);  
		public TradeItemSearchItemIndexResDelegate TradeItemSearchItemIndexRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeItemSearchItemIndexRes packet)
		{ 
			return false;
		};
		public delegate bool TradeItemSearchListNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeItemSearchListNoti packet);  
		public TradeItemSearchListNotiDelegate TradeItemSearchListNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeItemSearchListNoti packet)
		{ 
			return false;
		};
		public delegate bool TradeItemBookmarkAddResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeItemBookmarkAddRes packet);  
		public TradeItemBookmarkAddResDelegate TradeItemBookmarkAddRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeItemBookmarkAddRes packet)
		{ 
			return false;
		};
		public delegate bool TradeItemBookmarkDeleteResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeItemBookmarkDeleteRes packet);  
		public TradeItemBookmarkDeleteResDelegate TradeItemBookmarkDeleteRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeItemBookmarkDeleteRes packet)
		{ 
			return false;
		};
		public delegate bool TradeItemBookmarkListNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeItemBookmarkListNoti packet);  
		public TradeItemBookmarkListNotiDelegate TradeItemBookmarkListNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.TradeItemBookmarkListNoti packet)
		{ 
			return false;
		};
		public delegate bool WeaponAppearanceCollectListV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WeaponAppearanceCollectListV2Noti packet);  
		public WeaponAppearanceCollectListV2NotiDelegate WeaponAppearanceCollectListV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WeaponAppearanceCollectListV2Noti packet)
		{ 
			return false;
		};
		public delegate bool WeaponAppearanceCollectListV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WeaponAppearanceCollectListV2Res packet);  
		public WeaponAppearanceCollectListV2ResDelegate WeaponAppearanceCollectListV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WeaponAppearanceCollectListV2Res packet)
		{ 
			return false;
		};
		public delegate bool WeaponAppearanceEquipV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WeaponAppearanceEquipV2Noti packet);  
		public WeaponAppearanceEquipV2NotiDelegate WeaponAppearanceEquipV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WeaponAppearanceEquipV2Noti packet)
		{ 
			return false;
		};
		public delegate bool WeaponAppearanceEquipV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WeaponAppearanceEquipV2Res packet);  
		public WeaponAppearanceEquipV2ResDelegate WeaponAppearanceEquipV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WeaponAppearanceEquipV2Res packet)
		{ 
			return false;
		};
		public delegate bool WeaponAppearanceExtractFromItemV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WeaponAppearanceExtractFromItemV2Res packet);  
		public WeaponAppearanceExtractFromItemV2ResDelegate WeaponAppearanceExtractFromItemV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WeaponAppearanceExtractFromItemV2Res packet)
		{ 
			return false;
		};
		public delegate bool WeaponAppearanceGachaV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WeaponAppearanceGachaV2Res packet);  
		public WeaponAppearanceGachaV2ResDelegate WeaponAppearanceGachaV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WeaponAppearanceGachaV2Res packet)
		{ 
			return false;
		};
		public delegate bool WeaponAppearanceHiddenV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WeaponAppearanceHiddenV2Noti packet);  
		public WeaponAppearanceHiddenV2NotiDelegate WeaponAppearanceHiddenV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WeaponAppearanceHiddenV2Noti packet)
		{ 
			return false;
		};
		public delegate bool WeaponAppearanceHiddenV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WeaponAppearanceHiddenV2Res packet);  
		public WeaponAppearanceHiddenV2ResDelegate WeaponAppearanceHiddenV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WeaponAppearanceHiddenV2Res packet)
		{ 
			return false;
		};
		public delegate bool WeaponAppearanceListV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WeaponAppearanceListV2Noti packet);  
		public WeaponAppearanceListV2NotiDelegate WeaponAppearanceListV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WeaponAppearanceListV2Noti packet)
		{ 
			return false;
		};
		public delegate bool WeaponAppearanceListV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WeaponAppearanceListV2Res packet);  
		public WeaponAppearanceListV2ResDelegate WeaponAppearanceListV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WeaponAppearanceListV2Res packet)
		{ 
			return false;
		};
		public delegate bool WeaponAppearanceUnequipV2NotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WeaponAppearanceUnequipV2Noti packet);  
		public WeaponAppearanceUnequipV2NotiDelegate WeaponAppearanceUnequipV2Noti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WeaponAppearanceUnequipV2Noti packet)
		{ 
			return false;
		};
		public delegate bool WeaponAppearanceUnequipV2ResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WeaponAppearanceUnequipV2Res packet);  
		public WeaponAppearanceUnequipV2ResDelegate WeaponAppearanceUnequipV2Res = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.WeaponAppearanceUnequipV2Res packet)
		{ 
			return false;
		};
		public delegate bool AccountCreateNameResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.AccountCreateNameRes packet);  
		public AccountCreateNameResDelegate AccountCreateNameRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.AccountCreateNameRes packet)
		{ 
			return false;
		};
		public delegate bool ZoneStatusResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ZoneStatusRes packet);  
		public ZoneStatusResDelegate ZoneStatusRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ZoneStatusRes packet)
		{ 
			return false;
		};
		public delegate bool ZoneStatusNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ZoneStatusNoti packet);  
		public ZoneStatusNotiDelegate ZoneStatusNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.ZoneStatusNoti packet)
		{ 
			return false;
		};
		public delegate bool BloodFogEnterResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BloodFogEnterRes packet);  
		public BloodFogEnterResDelegate BloodFogEnterRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BloodFogEnterRes packet)
		{ 
			return false;
		};
		public delegate bool BloodFogLeaveResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BloodFogLeaveRes packet);  
		public BloodFogLeaveResDelegate BloodFogLeaveRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BloodFogLeaveRes packet)
		{ 
			return false;
		};
		public delegate bool BloodFogUseBuffResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BloodFogUseBuffRes packet);  
		public BloodFogUseBuffResDelegate BloodFogUseBuffRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BloodFogUseBuffRes packet)
		{ 
			return false;
		};
		public delegate bool BloodFogChangeWaveNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BloodFogChangeWaveNoti packet);  
		public BloodFogChangeWaveNotiDelegate BloodFogChangeWaveNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BloodFogChangeWaveNoti packet)
		{ 
			return false;
		};
		public delegate bool BloodFogEventNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BloodFogEventNoti packet);  
		public BloodFogEventNotiDelegate BloodFogEventNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BloodFogEventNoti packet)
		{ 
			return false;
		};
		public delegate bool BloodFogKickoutNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BloodFogKickoutNoti packet);  
		public BloodFogKickoutNotiDelegate BloodFogKickoutNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BloodFogKickoutNoti packet)
		{ 
			return false;
		};
		public delegate bool BloodFogPlayerDeathNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BloodFogPlayerDeathNoti packet);  
		public BloodFogPlayerDeathNotiDelegate BloodFogPlayerDeathNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BloodFogPlayerDeathNoti packet)
		{ 
			return false;
		};
		public delegate bool BloodFogPlayerPointUpdateNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BloodFogPlayerPointUpdateNoti packet);  
		public BloodFogPlayerPointUpdateNotiDelegate BloodFogPlayerPointUpdateNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BloodFogPlayerPointUpdateNoti packet)
		{ 
			return false;
		};
		public delegate bool BloodFogPlayerRankUpdateNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BloodFogPlayerRankUpdateNoti packet);  
		public BloodFogPlayerRankUpdateNotiDelegate BloodFogPlayerRankUpdateNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BloodFogPlayerRankUpdateNoti packet)
		{ 
			return false;
		};
		public delegate bool BloodFogResultNotiDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BloodFogResultNoti packet);  
		public BloodFogResultNotiDelegate BloodFogResultNoti = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.BloodFogResultNoti packet)
		{ 
			return false;
		};
		public delegate bool S2CRttResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.S2CRttRes packet);  
		public S2CRttResDelegate S2CRttRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.S2CRttRes packet)
		{ 
			return false;
		};
		public delegate bool S2CRttReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.S2CRttReq packet);  
		public S2CRttReqDelegate S2CRttReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, G2C.S2CRttReq packet)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.PlayerSelectRes:
            ProcessReceivedMessage_PlayerSelectRes(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerEnterStageFirstRes:
            ProcessReceivedMessage_PlayerEnterStageFirstRes(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerEnterStageSecondRes:
            ProcessReceivedMessage_PlayerEnterStageSecondRes(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerEnterStageThirdRes:
            ProcessReceivedMessage_PlayerEnterStageThirdRes(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerEnterStageFourthRes:
            ProcessReceivedMessage_PlayerEnterStageFourthRes(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerEnterStageFifthRes:
            ProcessReceivedMessage_PlayerEnterStageFifthRes(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerGameEnterRes:
            ProcessReceivedMessage_PlayerGameEnterRes(__msg, pa, hostTag, remote);
            break;
        case Common.AuthenticateBotCredentialRes:
            ProcessReceivedMessage_AuthenticateBotCredentialRes(__msg, pa, hostTag, remote);
            break;
        case Common.ActorAddBuffV2Noti:
            ProcessReceivedMessage_ActorAddBuffV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.ActorChangedLevelToMeV2Noti:
            ProcessReceivedMessage_ActorChangedLevelToMeV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.ActorChangedLevelV2Noti:
            ProcessReceivedMessage_ActorChangedLevelV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.ActorChangeStateV2Noti:
            ProcessReceivedMessage_ActorChangeStateV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.ActorCostumeNoti:
            ProcessReceivedMessage_ActorCostumeNoti(__msg, pa, hostTag, remote);
            break;
        case Common.ActorDeathV2Noti:
            ProcessReceivedMessage_ActorDeathV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.ActorDisAppearV2Noti:
            ProcessReceivedMessage_ActorDisAppearV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.ActorGuildV2Noti:
            ProcessReceivedMessage_ActorGuildV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.ActorHpMpUpdateV2Noti:
            ProcessReceivedMessage_ActorHpMpUpdateV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.ActorHpUpdateV2Noti:
            ProcessReceivedMessage_ActorHpUpdateV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.ActorMoveV2Noti:
            ProcessReceivedMessage_ActorMoveV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.ActorMpUpdateV2Noti:
            ProcessReceivedMessage_ActorMpUpdateV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.ActorPetV2Noti:
            ProcessReceivedMessage_ActorPetV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.ActorRemoveBuffV2Noti:
            ProcessReceivedMessage_ActorRemoveBuffV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.ActorRideV2Noti:
            ProcessReceivedMessage_ActorRideV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.ActorsDisAppearV2Noti:
            ProcessReceivedMessage_ActorsDisAppearV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.MonsterActorAppearV2Noti:
            ProcessReceivedMessage_MonsterActorAppearV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.MonsterActorsAppearV2Noti:
            ProcessReceivedMessage_MonsterActorsAppearV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.MonsterActorTargetNoti:
            ProcessReceivedMessage_MonsterActorTargetNoti(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerActorAppearV2Noti:
            ProcessReceivedMessage_PlayerActorAppearV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerActorsAppearV2Noti:
            ProcessReceivedMessage_PlayerActorsAppearV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerActorZoneStateNoti:
            ProcessReceivedMessage_PlayerActorZoneStateNoti(__msg, pa, hostTag, remote);
            break;
        case Common.ActorStatSyncNoti:
            ProcessReceivedMessage_ActorStatSyncNoti(__msg, pa, hostTag, remote);
            break;
        case Common.PropActorAppearNoti:
            ProcessReceivedMessage_PropActorAppearNoti(__msg, pa, hostTag, remote);
            break;
        case Common.ActorPendingDisAppearNoti:
            ProcessReceivedMessage_ActorPendingDisAppearNoti(__msg, pa, hostTag, remote);
            break;
        case Common.PropActorsAppearNoti:
            ProcessReceivedMessage_PropActorsAppearNoti(__msg, pa, hostTag, remote);
            break;
        case Common.DesignateBindStoneRes:
            ProcessReceivedMessage_DesignateBindStoneRes(__msg, pa, hostTag, remote);
            break;
        case Common.PortalByBindStoneRes:
            ProcessReceivedMessage_PortalByBindStoneRes(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerBlackRosterGetPreferenceRes:
            ProcessReceivedMessage_PlayerBlackRosterGetPreferenceRes(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerBlackRosterObservingNoti:
            ProcessReceivedMessage_PlayerBlackRosterObservingNoti(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerBlackRosterObservingRes:
            ProcessReceivedMessage_PlayerBlackRosterObservingRes(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerBlackRosterProvocationNoti:
            ProcessReceivedMessage_PlayerBlackRosterProvocationNoti(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerBlackRosterProvocationRes:
            ProcessReceivedMessage_PlayerBlackRosterProvocationRes(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerBlackRosterRankRes:
            ProcessReceivedMessage_PlayerBlackRosterRankRes(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerBlackRosterRevengeRes:
            ProcessReceivedMessage_PlayerBlackRosterRevengeRes(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerBlackRosterSetPreferenceRes:
            ProcessReceivedMessage_PlayerBlackRosterSetPreferenceRes(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerBlackRostersRes:
            ProcessReceivedMessage_PlayerBlackRostersRes(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerBlackRosterLastWeekRankRes:
            ProcessReceivedMessage_PlayerBlackRosterLastWeekRankRes(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerBlackRosterMessageNoti:
            ProcessReceivedMessage_PlayerBlackRosterMessageNoti(__msg, pa, hostTag, remote);
            break;
        case Common.CheatGetMainQuestV2Noti:
            ProcessReceivedMessage_CheatGetMainQuestV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.CheatMessageV2Res:
            ProcessReceivedMessage_CheatMessageV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.CheatQuestResetV2Noti:
            ProcessReceivedMessage_CheatQuestResetV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.AccountBlockPlayerAddRes:
            ProcessReceivedMessage_AccountBlockPlayerAddRes(__msg, pa, hostTag, remote);
            break;
        case Common.AccountBlockPlayerDeleteRes:
            ProcessReceivedMessage_AccountBlockPlayerDeleteRes(__msg, pa, hostTag, remote);
            break;
        case Common.AccountBlockPlayerReasonEditRes:
            ProcessReceivedMessage_AccountBlockPlayerReasonEditRes(__msg, pa, hostTag, remote);
            break;
        case Common.AccountBlockPlayersRes:
            ProcessReceivedMessage_AccountBlockPlayersRes(__msg, pa, hostTag, remote);
            break;
        case Common.ChatMessageV2Noti:
            ProcessReceivedMessage_ChatMessageV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.ChatMessageV2Res:
            ProcessReceivedMessage_ChatMessageV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerSearchV2Res:
            ProcessReceivedMessage_PlayerSearchV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.LinkItemInfoRes:
            ProcessReceivedMessage_LinkItemInfoRes(__msg, pa, hostTag, remote);
            break;
        case Common.CostumeCardBuildRes:
            ProcessReceivedMessage_CostumeCardBuildRes(__msg, pa, hostTag, remote);
            break;
        case Common.CostumeCardGachaRes:
            ProcessReceivedMessage_CostumeCardGachaRes(__msg, pa, hostTag, remote);
            break;
        case Common.CostumeCardInfoRes:
            ProcessReceivedMessage_CostumeCardInfoRes(__msg, pa, hostTag, remote);
            break;
        case Common.CostumeCardMixRes:
            ProcessReceivedMessage_CostumeCardMixRes(__msg, pa, hostTag, remote);
            break;
        case Common.CostumeCollectNoti:
            ProcessReceivedMessage_CostumeCollectNoti(__msg, pa, hostTag, remote);
            break;
        case Common.CostumeCollectRes:
            ProcessReceivedMessage_CostumeCollectRes(__msg, pa, hostTag, remote);
            break;
        case Common.CostumeEquipBodyRes:
            ProcessReceivedMessage_CostumeEquipBodyRes(__msg, pa, hostTag, remote);
            break;
        case Common.CostumeEquipBodyShowRes:
            ProcessReceivedMessage_CostumeEquipBodyShowRes(__msg, pa, hostTag, remote);
            break;
        case Common.CostumeEquipHeadRes:
            ProcessReceivedMessage_CostumeEquipHeadRes(__msg, pa, hostTag, remote);
            break;
        case Common.CostumeEquipHeadShowRes:
            ProcessReceivedMessage_CostumeEquipHeadShowRes(__msg, pa, hostTag, remote);
            break;
        case Common.CostumeInfoRes:
            ProcessReceivedMessage_CostumeInfoRes(__msg, pa, hostTag, remote);
            break;
        case Common.CostumeConfirmAcceptRes:
            ProcessReceivedMessage_CostumeConfirmAcceptRes(__msg, pa, hostTag, remote);
            break;
        case Common.CostumeConfirmChangeRes:
            ProcessReceivedMessage_CostumeConfirmChangeRes(__msg, pa, hostTag, remote);
            break;
        case Common.CostumeConfirmInfoRes:
            ProcessReceivedMessage_CostumeConfirmInfoRes(__msg, pa, hostTag, remote);
            break;
        case Common.PortalEffectNoti:
            ProcessReceivedMessage_PortalEffectNoti(__msg, pa, hostTag, remote);
            break;
        case Common.PortalEffectRes:
            ProcessReceivedMessage_PortalEffectRes(__msg, pa, hostTag, remote);
            break;
        case Common.AttainmentDailyRewardV2Res:
            ProcessReceivedMessage_AttainmentDailyRewardV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.AttainmentNormalRewardV2Res:
            ProcessReceivedMessage_AttainmentNormalRewardV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.AttainmentProgressV2Noti:
            ProcessReceivedMessage_AttainmentProgressV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.AttainmentsNoti:
            ProcessReceivedMessage_AttainmentsNoti(__msg, pa, hostTag, remote);
            break;
        case Common.AttendanceRewardV2Res:
            ProcessReceivedMessage_AttendanceRewardV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.BossScheduleNoti:
            ProcessReceivedMessage_BossScheduleNoti(__msg, pa, hostTag, remote);
            break;
        case Common.BossScheduleRes:
            ProcessReceivedMessage_BossScheduleRes(__msg, pa, hostTag, remote);
            break;
        case Common.EventAttendanceListV2Noti:
            ProcessReceivedMessage_EventAttendanceListV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.EventExchangeRewardV2Res:
            ProcessReceivedMessage_EventExchangeRewardV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.GuildAdminBuffActiveRes:
            ProcessReceivedMessage_GuildAdminBuffActiveRes(__msg, pa, hostTag, remote);
            break;
        case Common.GuildAdminBuffBuyRes:
            ProcessReceivedMessage_GuildAdminBuffBuyRes(__msg, pa, hostTag, remote);
            break;
        case Common.GuildAdminInfoRes:
            ProcessReceivedMessage_GuildAdminInfoRes(__msg, pa, hostTag, remote);
            break;
        case Common.GuildAdminMasterChangeNoti:
            ProcessReceivedMessage_GuildAdminMasterChangeNoti(__msg, pa, hostTag, remote);
            break;
        case Common.GuildAdminMasterChangeRes:
            ProcessReceivedMessage_GuildAdminMasterChangeRes(__msg, pa, hostTag, remote);
            break;
        case Common.GuildAdminMemberBanishNoti:
            ProcessReceivedMessage_GuildAdminMemberBanishNoti(__msg, pa, hostTag, remote);
            break;
        case Common.GuildAdminMemberBanishRes:
            ProcessReceivedMessage_GuildAdminMemberBanishRes(__msg, pa, hostTag, remote);
            break;
        case Common.GuildAdminMemberUpdateNoti:
            ProcessReceivedMessage_GuildAdminMemberUpdateNoti(__msg, pa, hostTag, remote);
            break;
        case Common.GuildAdminMemberUpdateRes:
            ProcessReceivedMessage_GuildAdminMemberUpdateRes(__msg, pa, hostTag, remote);
            break;
        case Common.GuildAdminUpdateBaseNoti:
            ProcessReceivedMessage_GuildAdminUpdateBaseNoti(__msg, pa, hostTag, remote);
            break;
        case Common.GuildAdminUpdateBaseRes:
            ProcessReceivedMessage_GuildAdminUpdateBaseRes(__msg, pa, hostTag, remote);
            break;
        case Common.GuildAdminUpdateIntroNoti:
            ProcessReceivedMessage_GuildAdminUpdateIntroNoti(__msg, pa, hostTag, remote);
            break;
        case Common.GuildAdminUpdateIntroRes:
            ProcessReceivedMessage_GuildAdminUpdateIntroRes(__msg, pa, hostTag, remote);
            break;
        case Common.GuildAdminUpdateNoticeNoti:
            ProcessReceivedMessage_GuildAdminUpdateNoticeNoti(__msg, pa, hostTag, remote);
            break;
        case Common.GuildAdminUpdateNoticeRes:
            ProcessReceivedMessage_GuildAdminUpdateNoticeRes(__msg, pa, hostTag, remote);
            break;
        case Common.GuildAdminUpdateTendencyNoti:
            ProcessReceivedMessage_GuildAdminUpdateTendencyNoti(__msg, pa, hostTag, remote);
            break;
        case Common.GuildAdminUpdateTendencyRes:
            ProcessReceivedMessage_GuildAdminUpdateTendencyRes(__msg, pa, hostTag, remote);
            break;
        case Common.GuildAdminUpdateTypeNoti:
            ProcessReceivedMessage_GuildAdminUpdateTypeNoti(__msg, pa, hostTag, remote);
            break;
        case Common.GuildAdminUpdateTypeRes:
            ProcessReceivedMessage_GuildAdminUpdateTypeRes(__msg, pa, hostTag, remote);
            break;
        case Common.GuildAttendRes:
            ProcessReceivedMessage_GuildAttendRes(__msg, pa, hostTag, remote);
            break;
        case Common.GuildBaseNoti:
            ProcessReceivedMessage_GuildBaseNoti(__msg, pa, hostTag, remote);
            break;
        case Common.GuildBuffInfoRes:
            ProcessReceivedMessage_GuildBuffInfoRes(__msg, pa, hostTag, remote);
            break;
        case Common.GuildBuffNoti:
            ProcessReceivedMessage_GuildBuffNoti(__msg, pa, hostTag, remote);
            break;
        case Common.GuildCreateRes:
            ProcessReceivedMessage_GuildCreateRes(__msg, pa, hostTag, remote);
            break;
        case Common.GuildDeleteRes:
            ProcessReceivedMessage_GuildDeleteRes(__msg, pa, hostTag, remote);
            break;
        case Common.GuildDonateRes:
            ProcessReceivedMessage_GuildDonateRes(__msg, pa, hostTag, remote);
            break;
        case Common.GuildDonationByCronV2Res:
            ProcessReceivedMessage_GuildDonationByCronV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.GuildFindRes:
            ProcessReceivedMessage_GuildFindRes(__msg, pa, hostTag, remote);
            break;
        case Common.GuildHistoryNoti:
            ProcessReceivedMessage_GuildHistoryNoti(__msg, pa, hostTag, remote);
            break;
        case Common.GuildHistoryRes:
            ProcessReceivedMessage_GuildHistoryRes(__msg, pa, hostTag, remote);
            break;
        case Common.GuildInfoCallRes:
            ProcessReceivedMessage_GuildInfoCallRes(__msg, pa, hostTag, remote);
            break;
        case Common.GuildInfoRes:
            ProcessReceivedMessage_GuildInfoRes(__msg, pa, hostTag, remote);
            break;
        case Common.GuildJoinRequestConfirmNoti:
            ProcessReceivedMessage_GuildJoinRequestConfirmNoti(__msg, pa, hostTag, remote);
            break;
        case Common.GuildJoinRequestConfirmRes:
            ProcessReceivedMessage_GuildJoinRequestConfirmRes(__msg, pa, hostTag, remote);
            break;
        case Common.GuildJoinRequestListRes:
            ProcessReceivedMessage_GuildJoinRequestListRes(__msg, pa, hostTag, remote);
            break;
        case Common.GuildLeaveNoti:
            ProcessReceivedMessage_GuildLeaveNoti(__msg, pa, hostTag, remote);
            break;
        case Common.GuildLeaveRes:
            ProcessReceivedMessage_GuildLeaveRes(__msg, pa, hostTag, remote);
            break;
        case Common.GuildLiveInviteConfirmNoti:
            ProcessReceivedMessage_GuildLiveInviteConfirmNoti(__msg, pa, hostTag, remote);
            break;
        case Common.GuildLiveInviteConfirmRes:
            ProcessReceivedMessage_GuildLiveInviteConfirmRes(__msg, pa, hostTag, remote);
            break;
        case Common.GuildLiveInviteNoti:
            ProcessReceivedMessage_GuildLiveInviteNoti(__msg, pa, hostTag, remote);
            break;
        case Common.GuildLiveInviteRes:
            ProcessReceivedMessage_GuildLiveInviteRes(__msg, pa, hostTag, remote);
            break;
        case Common.GuildMemberInfoRes:
            ProcessReceivedMessage_GuildMemberInfoRes(__msg, pa, hostTag, remote);
            break;
        case Common.GuildMemberNoti:
            ProcessReceivedMessage_GuildMemberNoti(__msg, pa, hostTag, remote);
            break;
        case Common.GuildMemberStateV2Noti:
            ProcessReceivedMessage_GuildMemberStateV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.GuildMemberUpdateNoti:
            ProcessReceivedMessage_GuildMemberUpdateNoti(__msg, pa, hostTag, remote);
            break;
        case Common.GuildPointNoti:
            ProcessReceivedMessage_GuildPointNoti(__msg, pa, hostTag, remote);
            break;
        case Common.GuildSignRequestCancelRes:
            ProcessReceivedMessage_GuildSignRequestCancelRes(__msg, pa, hostTag, remote);
            break;
        case Common.GuildSignRequestListRes:
            ProcessReceivedMessage_GuildSignRequestListRes(__msg, pa, hostTag, remote);
            break;
        case Common.GuildSignRequestRes:
            ProcessReceivedMessage_GuildSignRequestRes(__msg, pa, hostTag, remote);
            break;
        case Common.GuildUpdateCrestNoti:
            ProcessReceivedMessage_GuildUpdateCrestNoti(__msg, pa, hostTag, remote);
            break;
        case Common.GuildUpdateCurrencyV2Noti:
            ProcessReceivedMessage_GuildUpdateCurrencyV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.GuildVoteInfoRes:
            ProcessReceivedMessage_GuildVoteInfoRes(__msg, pa, hostTag, remote);
            break;
        case Common.GuildVoteMasterImpeachRes:
            ProcessReceivedMessage_GuildVoteMasterImpeachRes(__msg, pa, hostTag, remote);
            break;
        case Common.GuildVoteNoti:
            ProcessReceivedMessage_GuildVoteNoti(__msg, pa, hostTag, remote);
            break;
        case Common.GuildVoteRes:
            ProcessReceivedMessage_GuildVoteRes(__msg, pa, hostTag, remote);
            break;
        case Common.GuildWarehouseChangeSizeV2Res:
            ProcessReceivedMessage_GuildWarehouseChangeSizeV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.GuildWarehouseInfoV2Res:
            ProcessReceivedMessage_GuildWarehouseInfoV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.GuildWarehouseItemMoveV2Res:
            ProcessReceivedMessage_GuildWarehouseItemMoveV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.GuildWarehouseWalletMoveV2Res:
            ProcessReceivedMessage_GuildWarehouseWalletMoveV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.GuildRubyNoti:
            ProcessReceivedMessage_GuildRubyNoti(__msg, pa, hostTag, remote);
            break;
        case Common.GuildCronNoti:
            ProcessReceivedMessage_GuildCronNoti(__msg, pa, hostTag, remote);
            break;
        case Common.GuildTerritoryInfoRes:
            ProcessReceivedMessage_GuildTerritoryInfoRes(__msg, pa, hostTag, remote);
            break;
        case Common.GuildTerritorySetRes:
            ProcessReceivedMessage_GuildTerritorySetRes(__msg, pa, hostTag, remote);
            break;
        case Common.WorldTerritoryOverviewRes:
            ProcessReceivedMessage_WorldTerritoryOverviewRes(__msg, pa, hostTag, remote);
            break;
        case Common.WorldBossLastAttackNoti:
            ProcessReceivedMessage_WorldBossLastAttackNoti(__msg, pa, hostTag, remote);
            break;
        case Common.DungeonClearHistoryV2Noti:
            ProcessReceivedMessage_DungeonClearHistoryV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.DungeonClearV2Noti:
            ProcessReceivedMessage_DungeonClearV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.DungeonCronUpdateV2Noti:
            ProcessReceivedMessage_DungeonCronUpdateV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.DungeonEnterV2Res:
            ProcessReceivedMessage_DungeonEnterV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.DungeonExpUpdateV2Noti:
            ProcessReceivedMessage_DungeonExpUpdateV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.DungeonGiveUpV2Res:
            ProcessReceivedMessage_DungeonGiveUpV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.DungeonLeaveV2Res:
            ProcessReceivedMessage_DungeonLeaveV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.DungeonLoadingCompleteAllV2Noti:
            ProcessReceivedMessage_DungeonLoadingCompleteAllV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.DungeonLoadingCompleteV2Res:
            ProcessReceivedMessage_DungeonLoadingCompleteV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.ExpDungeonClearNoti:
            ProcessReceivedMessage_ExpDungeonClearNoti(__msg, pa, hostTag, remote);
            break;
        case Common.EquipDungeonClearNoti:
            ProcessReceivedMessage_EquipDungeonClearNoti(__msg, pa, hostTag, remote);
            break;
        case Common.MineralDungeonClearNoti:
            ProcessReceivedMessage_MineralDungeonClearNoti(__msg, pa, hostTag, remote);
            break;
        case Common.PartyDungeonClearNoti:
            ProcessReceivedMessage_PartyDungeonClearNoti(__msg, pa, hostTag, remote);
            break;
        case Common.InteractStartRes:
            ProcessReceivedMessage_InteractStartRes(__msg, pa, hostTag, remote);
            break;
        case Common.InteractEndRes:
            ProcessReceivedMessage_InteractEndRes(__msg, pa, hostTag, remote);
            break;
        case Common.InteractCancelRes:
            ProcessReceivedMessage_InteractCancelRes(__msg, pa, hostTag, remote);
            break;
        case Common.InteractNoti:
            ProcessReceivedMessage_InteractNoti(__msg, pa, hostTag, remote);
            break;
        case Common.EquipmentVisibleV2Res:
            ProcessReceivedMessage_EquipmentVisibleV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.InventoryChangeSizeV2Res:
            ProcessReceivedMessage_InventoryChangeSizeV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.ItemAddOptionV2Res:
            ProcessReceivedMessage_ItemAddOptionV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.ItemAddV2Noti:
            ProcessReceivedMessage_ItemAddV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.ItemChangeOptionV2Res:
            ProcessReceivedMessage_ItemChangeOptionV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.ItemCollectionBookmarksRegisterV2Res:
            ProcessReceivedMessage_ItemCollectionBookmarksRegisterV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.ItemCollectionBookmarksUnregisterV2Res:
            ProcessReceivedMessage_ItemCollectionBookmarksUnregisterV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.ItemCollectionListV2Noti:
            ProcessReceivedMessage_ItemCollectionListV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.ItemCollectionRegisterV2Res:
            ProcessReceivedMessage_ItemCollectionRegisterV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.ItemCombineV2Res:
            ProcessReceivedMessage_ItemCombineV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.ItemDeleteV2Noti:
            ProcessReceivedMessage_ItemDeleteV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.ItemDeleteV2Res:
            ProcessReceivedMessage_ItemDeleteV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.ItemDisassembleV2Res:
            ProcessReceivedMessage_ItemDisassembleV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.ItemEnchantV2Res:
            ProcessReceivedMessage_ItemEnchantV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.ItemEquipV2Noti:
            ProcessReceivedMessage_ItemEquipV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.ItemEquipV2Res:
            ProcessReceivedMessage_ItemEquipV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.ItemIntensionV2Res:
            ProcessReceivedMessage_ItemIntensionV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.ItemMixOptionV2Res:
            ProcessReceivedMessage_ItemMixOptionV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.ItemPackageUseV2Res:
            ProcessReceivedMessage_ItemPackageUseV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.ItemProductionV2Res:
            ProcessReceivedMessage_ItemProductionV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.ItemSelectUseV2Res:
            ProcessReceivedMessage_ItemSelectUseV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.ItemUpdateV2Noti:
            ProcessReceivedMessage_ItemUpdateV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.ItemUpgradeV2Res:
            ProcessReceivedMessage_ItemUpgradeV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.ItemUseV2Res:
            ProcessReceivedMessage_ItemUseV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.PkLootingAddV2Noti:
            ProcessReceivedMessage_PkLootingAddV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.PkLootingItemV2Res:
            ProcessReceivedMessage_PkLootingItemV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.PkLootingListV2Res:
            ProcessReceivedMessage_PkLootingListV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.PkLootingV2Noti:
            ProcessReceivedMessage_PkLootingV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerInventoryExtendInfoNoti:
            ProcessReceivedMessage_PlayerInventoryExtendInfoNoti(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerInventoryInfoV2Noti:
            ProcessReceivedMessage_PlayerInventoryInfoV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.WarehouseChangeSizeV2Res:
            ProcessReceivedMessage_WarehouseChangeSizeV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.WarehouseInfoV2Res:
            ProcessReceivedMessage_WarehouseInfoV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.WarehouseItemMoveV2Res:
            ProcessReceivedMessage_WarehouseItemMoveV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.ItemIntentionSucceedNoti:
            ProcessReceivedMessage_ItemIntentionSucceedNoti(__msg, pa, hostTag, remote);
            break;
        case Common.ItemSetLockRes:
            ProcessReceivedMessage_ItemSetLockRes(__msg, pa, hostTag, remote);
            break;
        case Common.ItemMarketPriceRes:
            ProcessReceivedMessage_ItemMarketPriceRes(__msg, pa, hostTag, remote);
            break;
        case Common.ItemInheritRes:
            ProcessReceivedMessage_ItemInheritRes(__msg, pa, hostTag, remote);
            break;
        case Common.MailListV2Res:
            ProcessReceivedMessage_MailListV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.MailReadAllV2Res:
            ProcessReceivedMessage_MailReadAllV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.MailReadV2Res:
            ProcessReceivedMessage_MailReadV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.MatchingApplyRes:
            ProcessReceivedMessage_MatchingApplyRes(__msg, pa, hostTag, remote);
            break;
        case Common.MatchingCancelRes:
            ProcessReceivedMessage_MatchingCancelRes(__msg, pa, hostTag, remote);
            break;
        case Common.MatchingCompleteNoti:
            ProcessReceivedMessage_MatchingCompleteNoti(__msg, pa, hostTag, remote);
            break;
        case Common.MatchingIncompleteNoti:
            ProcessReceivedMessage_MatchingIncompleteNoti(__msg, pa, hostTag, remote);
            break;
        case Common.MatchingMatchedNoti:
            ProcessReceivedMessage_MatchingMatchedNoti(__msg, pa, hostTag, remote);
            break;
        case Common.MatchingRejectReplyNoti:
            ProcessReceivedMessage_MatchingRejectReplyNoti(__msg, pa, hostTag, remote);
            break;
        case Common.MatchingReplyNoti:
            ProcessReceivedMessage_MatchingReplyNoti(__msg, pa, hostTag, remote);
            break;
        case Common.MatchingReplyRes:
            ProcessReceivedMessage_MatchingReplyRes(__msg, pa, hostTag, remote);
            break;
        case Common.AuthenticatePlayerCredentialRes:
            ProcessReceivedMessage_AuthenticatePlayerCredentialRes(__msg, pa, hostTag, remote);
            break;
        case Common.BindStonesNoti:
            ProcessReceivedMessage_BindStonesNoti(__msg, pa, hostTag, remote);
            break;
        case Common.BroadCastContextNoti:
            ProcessReceivedMessage_BroadCastContextNoti(__msg, pa, hostTag, remote);
            break;
        case Common.BroadCastContextRes:
            ProcessReceivedMessage_BroadCastContextRes(__msg, pa, hostTag, remote);
            break;
        case Common.CutSceneEndV2Res:
            ProcessReceivedMessage_CutSceneEndV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.CutSceneStartV2Res:
            ProcessReceivedMessage_CutSceneStartV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.CutSceneStateV2Noti:
            ProcessReceivedMessage_CutSceneStateV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.DebugPlayerStateV2Noti:
            ProcessReceivedMessage_DebugPlayerStateV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.LogOutRes:
            ProcessReceivedMessage_LogOutRes(__msg, pa, hostTag, remote);
            break;
        case Common.PortalV2Res:
            ProcessReceivedMessage_PortalV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.ReturnToLobbyRes:
            ProcessReceivedMessage_ReturnToLobbyRes(__msg, pa, hostTag, remote);
            break;
        case Common.ServerTimeV2Res:
            ProcessReceivedMessage_ServerTimeV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.SystemMessageV2Noti:
            ProcessReceivedMessage_SystemMessageV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.TemporalFluxZoneEnterNoti:
            ProcessReceivedMessage_TemporalFluxZoneEnterNoti(__msg, pa, hostTag, remote);
            break;
        case Common.TemporalFluxZoneExitNoti:
            ProcessReceivedMessage_TemporalFluxZoneExitNoti(__msg, pa, hostTag, remote);
            break;
        case Common.TestPacketV2Noti:
            ProcessReceivedMessage_TestPacketV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.TestPacketV2Res:
            ProcessReceivedMessage_TestPacketV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.TicketInfoV2Noti:
            ProcessReceivedMessage_TicketInfoV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.TriggerActivateMapMoveV2Noti:
            ProcessReceivedMessage_TriggerActivateMapMoveV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.TriggerActivateV2Res:
            ProcessReceivedMessage_TriggerActivateV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.UnionV2Res:
            ProcessReceivedMessage_UnionV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.ZoneLoadingCompletedRes:
            ProcessReceivedMessage_ZoneLoadingCompletedRes(__msg, pa, hostTag, remote);
            break;
        case Common.BossDamagedInfoNoti:
            ProcessReceivedMessage_BossDamagedInfoNoti(__msg, pa, hostTag, remote);
            break;
        case Common.BossFirstDamagedNoti:
            ProcessReceivedMessage_BossFirstDamagedNoti(__msg, pa, hostTag, remote);
            break;
        case Common.BossKilledNoti:
            ProcessReceivedMessage_BossKilledNoti(__msg, pa, hostTag, remote);
            break;
        case Common.BossKilledRewardNoti:
            ProcessReceivedMessage_BossKilledRewardNoti(__msg, pa, hostTag, remote);
            break;
        case Common.GainMessageNoti:
            ProcessReceivedMessage_GainMessageNoti(__msg, pa, hostTag, remote);
            break;
        case Common.TicketUpdateNoti:
            ProcessReceivedMessage_TicketUpdateNoti(__msg, pa, hostTag, remote);
            break;
        case Common.BossDamagedInfoRes:
            ProcessReceivedMessage_BossDamagedInfoRes(__msg, pa, hostTag, remote);
            break;
        case Common.WorldBossDamagedInfoNoti:
            ProcessReceivedMessage_WorldBossDamagedInfoNoti(__msg, pa, hostTag, remote);
            break;
        case Common.BossTakenDamageOnPlayerKillNoti:
            ProcessReceivedMessage_BossTakenDamageOnPlayerKillNoti(__msg, pa, hostTag, remote);
            break;
        case Common.PartyChangeLootingNoti:
            ProcessReceivedMessage_PartyChangeLootingNoti(__msg, pa, hostTag, remote);
            break;
        case Common.PartyChangeLootingRes:
            ProcessReceivedMessage_PartyChangeLootingRes(__msg, pa, hostTag, remote);
            break;
        case Common.PartyCreateRes:
            ProcessReceivedMessage_PartyCreateRes(__msg, pa, hostTag, remote);
            break;
        case Common.PartyDisbandNoti:
            ProcessReceivedMessage_PartyDisbandNoti(__msg, pa, hostTag, remote);
            break;
        case Common.PartyDisbandRes:
            ProcessReceivedMessage_PartyDisbandRes(__msg, pa, hostTag, remote);
            break;
        case Common.PartyDungeonEntranceInquiryRes:
            ProcessReceivedMessage_PartyDungeonEntranceInquiryRes(__msg, pa, hostTag, remote);
            break;
        case Common.PartyEnterDungeonCanceledNoti:
            ProcessReceivedMessage_PartyEnterDungeonCanceledNoti(__msg, pa, hostTag, remote);
            break;
        case Common.PartyEnterDungeonNoti:
            ProcessReceivedMessage_PartyEnterDungeonNoti(__msg, pa, hostTag, remote);
            break;
        case Common.PartyEnterDungeonReplyNoti:
            ProcessReceivedMessage_PartyEnterDungeonReplyNoti(__msg, pa, hostTag, remote);
            break;
        case Common.PartyEnterDungeonReplyRes:
            ProcessReceivedMessage_PartyEnterDungeonReplyRes(__msg, pa, hostTag, remote);
            break;
        case Common.PartyEnterDungeonRes:
            ProcessReceivedMessage_PartyEnterDungeonRes(__msg, pa, hostTag, remote);
            break;
        case Common.PartyEnterNoti:
            ProcessReceivedMessage_PartyEnterNoti(__msg, pa, hostTag, remote);
            break;
        case Common.PartyInfoNoti:
            ProcessReceivedMessage_PartyInfoNoti(__msg, pa, hostTag, remote);
            break;
        case Common.PartyInfoRes:
            ProcessReceivedMessage_PartyInfoRes(__msg, pa, hostTag, remote);
            break;
        case Common.PartyInviteNoti:
            ProcessReceivedMessage_PartyInviteNoti(__msg, pa, hostTag, remote);
            break;
        case Common.PartyInviteReplyNoti:
            ProcessReceivedMessage_PartyInviteReplyNoti(__msg, pa, hostTag, remote);
            break;
        case Common.PartyInviteReplyRes:
            ProcessReceivedMessage_PartyInviteReplyRes(__msg, pa, hostTag, remote);
            break;
        case Common.PartyInviteRes:
            ProcessReceivedMessage_PartyInviteRes(__msg, pa, hostTag, remote);
            break;
        case Common.PartyKickedNoti:
            ProcessReceivedMessage_PartyKickedNoti(__msg, pa, hostTag, remote);
            break;
        case Common.PartyLeaderChangeNoti:
            ProcessReceivedMessage_PartyLeaderChangeNoti(__msg, pa, hostTag, remote);
            break;
        case Common.PartyLeaderChangeRes:
            ProcessReceivedMessage_PartyLeaderChangeRes(__msg, pa, hostTag, remote);
            break;
        case Common.PartyLeaveNoti:
            ProcessReceivedMessage_PartyLeaveNoti(__msg, pa, hostTag, remote);
            break;
        case Common.PartyLeaveRes:
            ProcessReceivedMessage_PartyLeaveRes(__msg, pa, hostTag, remote);
            break;
        case Common.PartyMemberKickNoti:
            ProcessReceivedMessage_PartyMemberKickNoti(__msg, pa, hostTag, remote);
            break;
        case Common.PartyMemberKickRes:
            ProcessReceivedMessage_PartyMemberKickRes(__msg, pa, hostTag, remote);
            break;
        case Common.PartyMemberUpdateNoti:
            ProcessReceivedMessage_PartyMemberUpdateNoti(__msg, pa, hostTag, remote);
            break;
        case Common.PartySuggestionPlayersRes:
            ProcessReceivedMessage_PartySuggestionPlayersRes(__msg, pa, hostTag, remote);
            break;
        case Common.PartyEnterDungeonCanceledRes:
            ProcessReceivedMessage_PartyEnterDungeonCanceledRes(__msg, pa, hostTag, remote);
            break;
        case Common.PetCollectInfoV2Res:
            ProcessReceivedMessage_PetCollectInfoV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.PetEquipOffV2Noti:
            ProcessReceivedMessage_PetEquipOffV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.PetEquipOffV2Res:
            ProcessReceivedMessage_PetEquipOffV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.PetEquipV2Noti:
            ProcessReceivedMessage_PetEquipV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.PetEquipV2Res:
            ProcessReceivedMessage_PetEquipV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.PetFeedUseV2Res:
            ProcessReceivedMessage_PetFeedUseV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.PetGachaV2Res:
            ProcessReceivedMessage_PetGachaV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.PetInfoV2Res:
            ProcessReceivedMessage_PetInfoV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.PetMixV2Res:
            ProcessReceivedMessage_PetMixV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.PetUpgradeV2Res:
            ProcessReceivedMessage_PetUpgradeV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.PetInActiveBuffRes:
            ProcessReceivedMessage_PetInActiveBuffRes(__msg, pa, hostTag, remote);
            break;
        case Common.PhaseFieldEndV2Res:
            ProcessReceivedMessage_PhaseFieldEndV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.PhaseFieldStartV2Res:
            ProcessReceivedMessage_PhaseFieldStartV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerCrimeV2Noti:
            ProcessReceivedMessage_PlayerCrimeV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerDeleteRes:
            ProcessReceivedMessage_PlayerDeleteRes(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerEventV2Noti:
            ProcessReceivedMessage_PlayerEventV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerExpChangeV2Noti:
            ProcessReceivedMessage_PlayerExpChangeV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerGetMacroRes:
            ProcessReceivedMessage_PlayerGetMacroRes(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerLootingV2Noti:
            ProcessReceivedMessage_PlayerLootingV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerMapMoveV2Res:
            ProcessReceivedMessage_PlayerMapMoveV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerMoveV2Noti:
            ProcessReceivedMessage_PlayerMoveV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerMoveV2Res:
            ProcessReceivedMessage_PlayerMoveV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerTendencyNoti:
            ProcessReceivedMessage_PlayerTendencyNoti(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerPvpValueNoti:
            ProcessReceivedMessage_PlayerPvpValueNoti(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerResurrectionV2Noti:
            ProcessReceivedMessage_PlayerResurrectionV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerResurrectionV2Res:
            ProcessReceivedMessage_PlayerResurrectionV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerSetMacroRes:
            ProcessReceivedMessage_PlayerSetMacroRes(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerStatChangeV2Noti:
            ProcessReceivedMessage_PlayerStatChangeV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerStatPointChangeV2Noti:
            ProcessReceivedMessage_PlayerStatPointChangeV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerStatPointChangeV2Res:
            ProcessReceivedMessage_PlayerStatPointChangeV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerStatPointInitV2Res:
            ProcessReceivedMessage_PlayerStatPointInitV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerStatV2Res:
            ProcessReceivedMessage_PlayerStatV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerWalletUpdateV2Noti:
            ProcessReceivedMessage_PlayerWalletUpdateV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerWalletV2Noti:
            ProcessReceivedMessage_PlayerWalletV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerWantedV2Noti:
            ProcessReceivedMessage_PlayerWantedV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerDeathInfoRes:
            ProcessReceivedMessage_PlayerDeathInfoRes(__msg, pa, hostTag, remote);
            break;
        case Common.RecoverPlayerExpRes:
            ProcessReceivedMessage_RecoverPlayerExpRes(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerCombatCapabilityNoti:
            ProcessReceivedMessage_PlayerCombatCapabilityNoti(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerClassUpV2Res:
            ProcessReceivedMessage_PlayerClassUpV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.QuickslotSetRes:
            ProcessReceivedMessage_QuickslotSetRes(__msg, pa, hostTag, remote);
            break;
        case Common.QuickslotListNoti:
            ProcessReceivedMessage_QuickslotListNoti(__msg, pa, hostTag, remote);
            break;
        case Common.MembershipAddNoti:
            ProcessReceivedMessage_MembershipAddNoti(__msg, pa, hostTag, remote);
            break;
        case Common.MembershipUpdateNoti:
            ProcessReceivedMessage_MembershipUpdateNoti(__msg, pa, hostTag, remote);
            break;
        case Common.MembershipListNoti:
            ProcessReceivedMessage_MembershipListNoti(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerExpRecoveryPopupRes:
            ProcessReceivedMessage_PlayerExpRecoveryPopupRes(__msg, pa, hostTag, remote);
            break;
        case Common.RTTPlayerMoveV2Res:
            ProcessReceivedMessage_RTTPlayerMoveV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.CheatGetQuestV2Noti:
            ProcessReceivedMessage_CheatGetQuestV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.DailyQuestOpenV2Noti:
            ProcessReceivedMessage_DailyQuestOpenV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerQuestProgressV2Noti:
            ProcessReceivedMessage_PlayerQuestProgressV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.QuestAbandonV2Res:
            ProcessReceivedMessage_QuestAbandonV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.QuestAcceptV2Res:
            ProcessReceivedMessage_QuestAcceptV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.QuestCompleteV2Res:
            ProcessReceivedMessage_QuestCompleteV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.QuestConditionCompleteV2Res:
            ProcessReceivedMessage_QuestConditionCompleteV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.QuestListV2Res:
            ProcessReceivedMessage_QuestListV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.QuestPortalV2Res:
            ProcessReceivedMessage_QuestPortalV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.QuestRegisterV2Res:
            ProcessReceivedMessage_QuestRegisterV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.QuestRerollV2Res:
            ProcessReceivedMessage_QuestRerollV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.QuestResetCheatV2Noti:
            ProcessReceivedMessage_QuestResetCheatV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.QuestRewardV2Res:
            ProcessReceivedMessage_QuestRewardV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.QuestTalkCompleteV2Res:
            ProcessReceivedMessage_QuestTalkCompleteV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.ResetDailyQuestV2Noti:
            ProcessReceivedMessage_ResetDailyQuestV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.TutorialSkipV2Res:
            ProcessReceivedMessage_TutorialSkipV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.GuildRelationRes:
            ProcessReceivedMessage_GuildRelationRes(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerRelationRes:
            ProcessReceivedMessage_PlayerRelationRes(__msg, pa, hostTag, remote);
            break;
        case Common.RelationsNoti:
            ProcessReceivedMessage_RelationsNoti(__msg, pa, hostTag, remote);
            break;
        case Common.RideAttachDeleteV2Res:
            ProcessReceivedMessage_RideAttachDeleteV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.RideAttachDisassembleV2Res:
            ProcessReceivedMessage_RideAttachDisassembleV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.RideAttachEquipOffV2Noti:
            ProcessReceivedMessage_RideAttachEquipOffV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.RideAttachEquipOffV2Res:
            ProcessReceivedMessage_RideAttachEquipOffV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.RideAttachEquipV2Noti:
            ProcessReceivedMessage_RideAttachEquipV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.RideAttachEquipV2Res:
            ProcessReceivedMessage_RideAttachEquipV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.RideAttachGachaV2Res:
            ProcessReceivedMessage_RideAttachGachaV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.RideAttachInvenExtendV2Res:
            ProcessReceivedMessage_RideAttachInvenExtendV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.RideCollectInfosNoti:
            ProcessReceivedMessage_RideCollectInfosNoti(__msg, pa, hostTag, remote);
            break;
        case Common.RideEquipOffV2Res:
            ProcessReceivedMessage_RideEquipOffV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.RideEquipV2Res:
            ProcessReceivedMessage_RideEquipV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.RideGachaV2Res:
            ProcessReceivedMessage_RideGachaV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.RideInfosNoti:
            ProcessReceivedMessage_RideInfosNoti(__msg, pa, hostTag, remote);
            break;
        case Common.RideMixV2Res:
            ProcessReceivedMessage_RideMixV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.RideSitOffV2Noti:
            ProcessReceivedMessage_RideSitOffV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.RideSitOffV2Res:
            ProcessReceivedMessage_RideSitOffV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.RideSitV2Noti:
            ProcessReceivedMessage_RideSitV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.RideSitV2Res:
            ProcessReceivedMessage_RideSitV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.BuyCashShopItemV2Res:
            ProcessReceivedMessage_BuyCashShopItemV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.BuyGameShopItemV2Res:
            ProcessReceivedMessage_BuyGameShopItemV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.GameShopSellItemV2Res:
            ProcessReceivedMessage_GameShopSellItemV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.ShopBuyCountListNoti:
            ProcessReceivedMessage_ShopBuyCountListNoti(__msg, pa, hostTag, remote);
            break;
        case Common.ChangedSiegeWarMatchInfoV2Noti:
            ProcessReceivedMessage_ChangedSiegeWarMatchInfoV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.ChangeSiegeModeV2Res:
            ProcessReceivedMessage_ChangeSiegeModeV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.ChangeSiegeWarInfoV2Noti:
            ProcessReceivedMessage_ChangeSiegeWarInfoV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.ChangeSiegeWarObjectInfoV2Noti:
            ProcessReceivedMessage_ChangeSiegeWarObjectInfoV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.ChoiceSiegeWarFactionV2Res:
            ProcessReceivedMessage_ChoiceSiegeWarFactionV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.CreatedDungeonSiegeWarV2Noti:
            ProcessReceivedMessage_CreatedDungeonSiegeWarV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.DungeonSiegeWarClearV2Noti:
            ProcessReceivedMessage_DungeonSiegeWarClearV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.GetSiegeWarInfoV2Res:
            ProcessReceivedMessage_GetSiegeWarInfoV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.GetSiegeWarMatchInfoV2Res:
            ProcessReceivedMessage_GetSiegeWarMatchInfoV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.ShowLocalizationV2Noti:
            ProcessReceivedMessage_ShowLocalizationV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.ActorChangeBattleModeV2Noti:
            ProcessReceivedMessage_ActorChangeBattleModeV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.BuffListInfoV2Res:
            ProcessReceivedMessage_BuffListInfoV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.SkillChangeAutoUseV2Res:
            ProcessReceivedMessage_SkillChangeAutoUseV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.SkillChangePresetV2Res:
            ProcessReceivedMessage_SkillChangePresetV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.SkillDotEffectV2Noti:
            ProcessReceivedMessage_SkillDotEffectV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.SkillEquipV2Res:
            ProcessReceivedMessage_SkillEquipV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.SkillHitEffectV2Noti:
            ProcessReceivedMessage_SkillHitEffectV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.SkillHitV2Noti:
            ProcessReceivedMessage_SkillHitV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.SkillHitV2Res:
            ProcessReceivedMessage_SkillHitV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.SkillLearnV2Res:
            ProcessReceivedMessage_SkillLearnV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.SkillLevelUpV2Res:
            ProcessReceivedMessage_SkillLevelUpV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.SkillListInfoV2Res:
            ProcessReceivedMessage_SkillListInfoV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.SkillPreActionEndV2Noti:
            ProcessReceivedMessage_SkillPreActionEndV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.SkillPresetInfosNoti:
            ProcessReceivedMessage_SkillPresetInfosNoti(__msg, pa, hostTag, remote);
            break;
        case Common.SkillUnEquipV2Res:
            ProcessReceivedMessage_SkillUnEquipV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.SkillUpgradeV2Res:
            ProcessReceivedMessage_SkillUpgradeV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.SkillUseV2Noti:
            ProcessReceivedMessage_SkillUseV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.SkillUseV2Res:
            ProcessReceivedMessage_SkillUseV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.SkillDotHealEffectV2Noti:
            ProcessReceivedMessage_SkillDotHealEffectV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.RTTSkillUseV2Res:
            ProcessReceivedMessage_RTTSkillUseV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.RTTSkillHitV2Res:
            ProcessReceivedMessage_RTTSkillHitV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.TitleAddV2Noti:
            ProcessReceivedMessage_TitleAddV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.TitleChangeV2Noti:
            ProcessReceivedMessage_TitleChangeV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.TitleChangeV2Res:
            ProcessReceivedMessage_TitleChangeV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.TitleConditionUpdateV2Noti:
            ProcessReceivedMessage_TitleConditionUpdateV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.TitleListV2Res:
            ProcessReceivedMessage_TitleListV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.TradeCronAverageBalanceRes:
            ProcessReceivedMessage_TradeCronAverageBalanceRes(__msg, pa, hostTag, remote);
            break;
        case Common.TradeCronBalanceRes:
            ProcessReceivedMessage_TradeCronBalanceRes(__msg, pa, hostTag, remote);
            break;
        case Common.TradeCronBuyRes:
            ProcessReceivedMessage_TradeCronBuyRes(__msg, pa, hostTag, remote);
            break;
        case Common.TradeCronInfoRes:
            ProcessReceivedMessage_TradeCronInfoRes(__msg, pa, hostTag, remote);
            break;
        case Common.TradeCronListRes:
            ProcessReceivedMessage_TradeCronListRes(__msg, pa, hostTag, remote);
            break;
        case Common.TradeCronPreviousDayBalanceRes:
            ProcessReceivedMessage_TradeCronPreviousDayBalanceRes(__msg, pa, hostTag, remote);
            break;
        case Common.TradeCronSellRes:
            ProcessReceivedMessage_TradeCronSellRes(__msg, pa, hostTag, remote);
            break;
        case Common.TradeCronWeeklyBalanceRes:
            ProcessReceivedMessage_TradeCronWeeklyBalanceRes(__msg, pa, hostTag, remote);
            break;
        case Common.TradePersonalListNoti:
            ProcessReceivedMessage_TradePersonalListNoti(__msg, pa, hostTag, remote);
            break;
        case Common.TradePersonalRequestRes:
            ProcessReceivedMessage_TradePersonalRequestRes(__msg, pa, hostTag, remote);
            break;
        case Common.TradePersonalUpdateNoti:
            ProcessReceivedMessage_TradePersonalUpdateNoti(__msg, pa, hostTag, remote);
            break;
        case Common.TradePersonalAddNoti:
            ProcessReceivedMessage_TradePersonalAddNoti(__msg, pa, hostTag, remote);
            break;
        case Common.TradePersonalDeleteNoti:
            ProcessReceivedMessage_TradePersonalDeleteNoti(__msg, pa, hostTag, remote);
            break;
        case Common.TradePersonalAcceptRes:
            ProcessReceivedMessage_TradePersonalAcceptRes(__msg, pa, hostTag, remote);
            break;
        case Common.TradePersonalRefuseRes:
            ProcessReceivedMessage_TradePersonalRefuseRes(__msg, pa, hostTag, remote);
            break;
        case Common.TradePersonalCancelRes:
            ProcessReceivedMessage_TradePersonalCancelRes(__msg, pa, hostTag, remote);
            break;
        case Common.TradePersonalWithdrawRes:
            ProcessReceivedMessage_TradePersonalWithdrawRes(__msg, pa, hostTag, remote);
            break;
        case Common.TradePersonalFinishRes:
            ProcessReceivedMessage_TradePersonalFinishRes(__msg, pa, hostTag, remote);
            break;
        case Common.TradePersonalHistoryRes:
            ProcessReceivedMessage_TradePersonalHistoryRes(__msg, pa, hostTag, remote);
            break;
        case Common.TradeCronMyListRes:
            ProcessReceivedMessage_TradeCronMyListRes(__msg, pa, hostTag, remote);
            break;
        case Common.TradeCronSettleRes:
            ProcessReceivedMessage_TradeCronSettleRes(__msg, pa, hostTag, remote);
            break;
        case Common.TradeCronTradesRes:
            ProcessReceivedMessage_TradeCronTradesRes(__msg, pa, hostTag, remote);
            break;
        case Common.TradeCronTimeToNextChangeBalanceRes:
            ProcessReceivedMessage_TradeCronTimeToNextChangeBalanceRes(__msg, pa, hostTag, remote);
            break;
        case Common.TradeCronCancelRes:
            ProcessReceivedMessage_TradeCronCancelRes(__msg, pa, hostTag, remote);
            break;
        case Common.TradeCronReclaimExpiredRes:
            ProcessReceivedMessage_TradeCronReclaimExpiredRes(__msg, pa, hostTag, remote);
            break;
        case Common.TradeCronRemainingCanceledPenaltyTimeRes:
            ProcessReceivedMessage_TradeCronRemainingCanceledPenaltyTimeRes(__msg, pa, hostTag, remote);
            break;
        case Common.TradeItemSellListNoti:
            ProcessReceivedMessage_TradeItemSellListNoti(__msg, pa, hostTag, remote);
            break;
        case Common.TradeItemUpdateNoti:
            ProcessReceivedMessage_TradeItemUpdateNoti(__msg, pa, hostTag, remote);
            break;
        case Common.TradeItemDeleteNoti:
            ProcessReceivedMessage_TradeItemDeleteNoti(__msg, pa, hostTag, remote);
            break;
        case Common.TradeItemRegistRes:
            ProcessReceivedMessage_TradeItemRegistRes(__msg, pa, hostTag, remote);
            break;
        case Common.TradeItemCancelRes:
            ProcessReceivedMessage_TradeItemCancelRes(__msg, pa, hostTag, remote);
            break;
        case Common.TradeItemBuyRes:
            ProcessReceivedMessage_TradeItemBuyRes(__msg, pa, hostTag, remote);
            break;
        case Common.TradeItemWithdrawRes:
            ProcessReceivedMessage_TradeItemWithdrawRes(__msg, pa, hostTag, remote);
            break;
        case Common.TradeItemFinishRes:
            ProcessReceivedMessage_TradeItemFinishRes(__msg, pa, hostTag, remote);
            break;
        case Common.TradeItemHistoryRes:
            ProcessReceivedMessage_TradeItemHistoryRes(__msg, pa, hostTag, remote);
            break;
        case Common.TradeItemSearchCategoryRes:
            ProcessReceivedMessage_TradeItemSearchCategoryRes(__msg, pa, hostTag, remote);
            break;
        case Common.TradeItemSearchItemIndexRes:
            ProcessReceivedMessage_TradeItemSearchItemIndexRes(__msg, pa, hostTag, remote);
            break;
        case Common.TradeItemSearchListNoti:
            ProcessReceivedMessage_TradeItemSearchListNoti(__msg, pa, hostTag, remote);
            break;
        case Common.TradeItemBookmarkAddRes:
            ProcessReceivedMessage_TradeItemBookmarkAddRes(__msg, pa, hostTag, remote);
            break;
        case Common.TradeItemBookmarkDeleteRes:
            ProcessReceivedMessage_TradeItemBookmarkDeleteRes(__msg, pa, hostTag, remote);
            break;
        case Common.TradeItemBookmarkListNoti:
            ProcessReceivedMessage_TradeItemBookmarkListNoti(__msg, pa, hostTag, remote);
            break;
        case Common.WeaponAppearanceCollectListV2Noti:
            ProcessReceivedMessage_WeaponAppearanceCollectListV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.WeaponAppearanceCollectListV2Res:
            ProcessReceivedMessage_WeaponAppearanceCollectListV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.WeaponAppearanceEquipV2Noti:
            ProcessReceivedMessage_WeaponAppearanceEquipV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.WeaponAppearanceEquipV2Res:
            ProcessReceivedMessage_WeaponAppearanceEquipV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.WeaponAppearanceExtractFromItemV2Res:
            ProcessReceivedMessage_WeaponAppearanceExtractFromItemV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.WeaponAppearanceGachaV2Res:
            ProcessReceivedMessage_WeaponAppearanceGachaV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.WeaponAppearanceHiddenV2Noti:
            ProcessReceivedMessage_WeaponAppearanceHiddenV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.WeaponAppearanceHiddenV2Res:
            ProcessReceivedMessage_WeaponAppearanceHiddenV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.WeaponAppearanceListV2Noti:
            ProcessReceivedMessage_WeaponAppearanceListV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.WeaponAppearanceListV2Res:
            ProcessReceivedMessage_WeaponAppearanceListV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.WeaponAppearanceUnequipV2Noti:
            ProcessReceivedMessage_WeaponAppearanceUnequipV2Noti(__msg, pa, hostTag, remote);
            break;
        case Common.WeaponAppearanceUnequipV2Res:
            ProcessReceivedMessage_WeaponAppearanceUnequipV2Res(__msg, pa, hostTag, remote);
            break;
        case Common.AccountCreateNameRes:
            ProcessReceivedMessage_AccountCreateNameRes(__msg, pa, hostTag, remote);
            break;
        case Common.ZoneStatusRes:
            ProcessReceivedMessage_ZoneStatusRes(__msg, pa, hostTag, remote);
            break;
        case Common.ZoneStatusNoti:
            ProcessReceivedMessage_ZoneStatusNoti(__msg, pa, hostTag, remote);
            break;
        case Common.BloodFogEnterRes:
            ProcessReceivedMessage_BloodFogEnterRes(__msg, pa, hostTag, remote);
            break;
        case Common.BloodFogLeaveRes:
            ProcessReceivedMessage_BloodFogLeaveRes(__msg, pa, hostTag, remote);
            break;
        case Common.BloodFogUseBuffRes:
            ProcessReceivedMessage_BloodFogUseBuffRes(__msg, pa, hostTag, remote);
            break;
        case Common.BloodFogChangeWaveNoti:
            ProcessReceivedMessage_BloodFogChangeWaveNoti(__msg, pa, hostTag, remote);
            break;
        case Common.BloodFogEventNoti:
            ProcessReceivedMessage_BloodFogEventNoti(__msg, pa, hostTag, remote);
            break;
        case Common.BloodFogKickoutNoti:
            ProcessReceivedMessage_BloodFogKickoutNoti(__msg, pa, hostTag, remote);
            break;
        case Common.BloodFogPlayerDeathNoti:
            ProcessReceivedMessage_BloodFogPlayerDeathNoti(__msg, pa, hostTag, remote);
            break;
        case Common.BloodFogPlayerPointUpdateNoti:
            ProcessReceivedMessage_BloodFogPlayerPointUpdateNoti(__msg, pa, hostTag, remote);
            break;
        case Common.BloodFogPlayerRankUpdateNoti:
            ProcessReceivedMessage_BloodFogPlayerRankUpdateNoti(__msg, pa, hostTag, remote);
            break;
        case Common.BloodFogResultNoti:
            ProcessReceivedMessage_BloodFogResultNoti(__msg, pa, hostTag, remote);
            break;
        case Common.S2CRttRes:
            ProcessReceivedMessage_S2CRttRes(__msg, pa, hostTag, remote);
            break;
        case Common.S2CRttReq:
            ProcessReceivedMessage_S2CRttReq(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_PlayerSelectRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerSelectRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerSelectRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerSelectRes, RmiName_PlayerSelectRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerSelectRes;
        summary.rmiName = RmiName_PlayerSelectRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerSelectRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerSelectRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerSelectRes;
        summary.rmiName = RmiName_PlayerSelectRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerEnterStageFirstRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerEnterStageFirstRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerEnterStageFirstRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerEnterStageFirstRes, RmiName_PlayerEnterStageFirstRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerEnterStageFirstRes;
        summary.rmiName = RmiName_PlayerEnterStageFirstRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerEnterStageFirstRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerEnterStageFirstRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerEnterStageFirstRes;
        summary.rmiName = RmiName_PlayerEnterStageFirstRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerEnterStageSecondRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerEnterStageSecondRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerEnterStageSecondRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerEnterStageSecondRes, RmiName_PlayerEnterStageSecondRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerEnterStageSecondRes;
        summary.rmiName = RmiName_PlayerEnterStageSecondRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerEnterStageSecondRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerEnterStageSecondRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerEnterStageSecondRes;
        summary.rmiName = RmiName_PlayerEnterStageSecondRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerEnterStageThirdRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerEnterStageThirdRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerEnterStageThirdRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerEnterStageThirdRes, RmiName_PlayerEnterStageThirdRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerEnterStageThirdRes;
        summary.rmiName = RmiName_PlayerEnterStageThirdRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerEnterStageThirdRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerEnterStageThirdRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerEnterStageThirdRes;
        summary.rmiName = RmiName_PlayerEnterStageThirdRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerEnterStageFourthRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerEnterStageFourthRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerEnterStageFourthRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerEnterStageFourthRes, RmiName_PlayerEnterStageFourthRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerEnterStageFourthRes;
        summary.rmiName = RmiName_PlayerEnterStageFourthRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerEnterStageFourthRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerEnterStageFourthRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerEnterStageFourthRes;
        summary.rmiName = RmiName_PlayerEnterStageFourthRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerEnterStageFifthRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerEnterStageFifthRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerEnterStageFifthRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerEnterStageFifthRes, RmiName_PlayerEnterStageFifthRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerEnterStageFifthRes;
        summary.rmiName = RmiName_PlayerEnterStageFifthRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerEnterStageFifthRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerEnterStageFifthRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerEnterStageFifthRes;
        summary.rmiName = RmiName_PlayerEnterStageFifthRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerGameEnterRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerGameEnterRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerGameEnterRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerGameEnterRes, RmiName_PlayerGameEnterRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerGameEnterRes;
        summary.rmiName = RmiName_PlayerGameEnterRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerGameEnterRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerGameEnterRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerGameEnterRes;
        summary.rmiName = RmiName_PlayerGameEnterRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AuthenticateBotCredentialRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.AuthenticateBotCredentialRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_AuthenticateBotCredentialRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.AuthenticateBotCredentialRes, RmiName_AuthenticateBotCredentialRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AuthenticateBotCredentialRes;
        summary.rmiName = RmiName_AuthenticateBotCredentialRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AuthenticateBotCredentialRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AuthenticateBotCredentialRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AuthenticateBotCredentialRes;
        summary.rmiName = RmiName_AuthenticateBotCredentialRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ActorAddBuffV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ActorAddBuffV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ActorAddBuffV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ActorAddBuffV2Noti, RmiName_ActorAddBuffV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ActorAddBuffV2Noti;
        summary.rmiName = RmiName_ActorAddBuffV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ActorAddBuffV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ActorAddBuffV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ActorAddBuffV2Noti;
        summary.rmiName = RmiName_ActorAddBuffV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ActorChangedLevelToMeV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ActorChangedLevelToMeV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ActorChangedLevelToMeV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ActorChangedLevelToMeV2Noti, RmiName_ActorChangedLevelToMeV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ActorChangedLevelToMeV2Noti;
        summary.rmiName = RmiName_ActorChangedLevelToMeV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ActorChangedLevelToMeV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ActorChangedLevelToMeV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ActorChangedLevelToMeV2Noti;
        summary.rmiName = RmiName_ActorChangedLevelToMeV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ActorChangedLevelV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ActorChangedLevelV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ActorChangedLevelV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ActorChangedLevelV2Noti, RmiName_ActorChangedLevelV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ActorChangedLevelV2Noti;
        summary.rmiName = RmiName_ActorChangedLevelV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ActorChangedLevelV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ActorChangedLevelV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ActorChangedLevelV2Noti;
        summary.rmiName = RmiName_ActorChangedLevelV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ActorChangeStateV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ActorChangeStateV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ActorChangeStateV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ActorChangeStateV2Noti, RmiName_ActorChangeStateV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ActorChangeStateV2Noti;
        summary.rmiName = RmiName_ActorChangeStateV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ActorChangeStateV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ActorChangeStateV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ActorChangeStateV2Noti;
        summary.rmiName = RmiName_ActorChangeStateV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ActorCostumeNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ActorCostumeNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ActorCostumeNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ActorCostumeNoti, RmiName_ActorCostumeNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ActorCostumeNoti;
        summary.rmiName = RmiName_ActorCostumeNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ActorCostumeNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ActorCostumeNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ActorCostumeNoti;
        summary.rmiName = RmiName_ActorCostumeNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ActorDeathV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ActorDeathV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ActorDeathV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ActorDeathV2Noti, RmiName_ActorDeathV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ActorDeathV2Noti;
        summary.rmiName = RmiName_ActorDeathV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ActorDeathV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ActorDeathV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ActorDeathV2Noti;
        summary.rmiName = RmiName_ActorDeathV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ActorDisAppearV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ActorDisAppearV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ActorDisAppearV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ActorDisAppearV2Noti, RmiName_ActorDisAppearV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ActorDisAppearV2Noti;
        summary.rmiName = RmiName_ActorDisAppearV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ActorDisAppearV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ActorDisAppearV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ActorDisAppearV2Noti;
        summary.rmiName = RmiName_ActorDisAppearV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ActorGuildV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ActorGuildV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ActorGuildV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ActorGuildV2Noti, RmiName_ActorGuildV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ActorGuildV2Noti;
        summary.rmiName = RmiName_ActorGuildV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ActorGuildV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ActorGuildV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ActorGuildV2Noti;
        summary.rmiName = RmiName_ActorGuildV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ActorHpMpUpdateV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ActorHpMpUpdateV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ActorHpMpUpdateV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ActorHpMpUpdateV2Noti, RmiName_ActorHpMpUpdateV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ActorHpMpUpdateV2Noti;
        summary.rmiName = RmiName_ActorHpMpUpdateV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ActorHpMpUpdateV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ActorHpMpUpdateV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ActorHpMpUpdateV2Noti;
        summary.rmiName = RmiName_ActorHpMpUpdateV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ActorHpUpdateV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ActorHpUpdateV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ActorHpUpdateV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ActorHpUpdateV2Noti, RmiName_ActorHpUpdateV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ActorHpUpdateV2Noti;
        summary.rmiName = RmiName_ActorHpUpdateV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ActorHpUpdateV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ActorHpUpdateV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ActorHpUpdateV2Noti;
        summary.rmiName = RmiName_ActorHpUpdateV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ActorMoveV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ActorMoveV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ActorMoveV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ActorMoveV2Noti, RmiName_ActorMoveV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ActorMoveV2Noti;
        summary.rmiName = RmiName_ActorMoveV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ActorMoveV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ActorMoveV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ActorMoveV2Noti;
        summary.rmiName = RmiName_ActorMoveV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ActorMpUpdateV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ActorMpUpdateV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ActorMpUpdateV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ActorMpUpdateV2Noti, RmiName_ActorMpUpdateV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ActorMpUpdateV2Noti;
        summary.rmiName = RmiName_ActorMpUpdateV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ActorMpUpdateV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ActorMpUpdateV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ActorMpUpdateV2Noti;
        summary.rmiName = RmiName_ActorMpUpdateV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ActorPetV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ActorPetV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ActorPetV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ActorPetV2Noti, RmiName_ActorPetV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ActorPetV2Noti;
        summary.rmiName = RmiName_ActorPetV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ActorPetV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ActorPetV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ActorPetV2Noti;
        summary.rmiName = RmiName_ActorPetV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ActorRemoveBuffV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ActorRemoveBuffV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ActorRemoveBuffV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ActorRemoveBuffV2Noti, RmiName_ActorRemoveBuffV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ActorRemoveBuffV2Noti;
        summary.rmiName = RmiName_ActorRemoveBuffV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ActorRemoveBuffV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ActorRemoveBuffV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ActorRemoveBuffV2Noti;
        summary.rmiName = RmiName_ActorRemoveBuffV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ActorRideV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ActorRideV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ActorRideV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ActorRideV2Noti, RmiName_ActorRideV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ActorRideV2Noti;
        summary.rmiName = RmiName_ActorRideV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ActorRideV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ActorRideV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ActorRideV2Noti;
        summary.rmiName = RmiName_ActorRideV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ActorsDisAppearV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ActorsDisAppearV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ActorsDisAppearV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ActorsDisAppearV2Noti, RmiName_ActorsDisAppearV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ActorsDisAppearV2Noti;
        summary.rmiName = RmiName_ActorsDisAppearV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ActorsDisAppearV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ActorsDisAppearV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ActorsDisAppearV2Noti;
        summary.rmiName = RmiName_ActorsDisAppearV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MonsterActorAppearV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.MonsterActorAppearV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_MonsterActorAppearV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.MonsterActorAppearV2Noti, RmiName_MonsterActorAppearV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MonsterActorAppearV2Noti;
        summary.rmiName = RmiName_MonsterActorAppearV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MonsterActorAppearV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MonsterActorAppearV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MonsterActorAppearV2Noti;
        summary.rmiName = RmiName_MonsterActorAppearV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MonsterActorsAppearV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.MonsterActorsAppearV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_MonsterActorsAppearV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.MonsterActorsAppearV2Noti, RmiName_MonsterActorsAppearV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MonsterActorsAppearV2Noti;
        summary.rmiName = RmiName_MonsterActorsAppearV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MonsterActorsAppearV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MonsterActorsAppearV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MonsterActorsAppearV2Noti;
        summary.rmiName = RmiName_MonsterActorsAppearV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MonsterActorTargetNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.MonsterActorTargetNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_MonsterActorTargetNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.MonsterActorTargetNoti, RmiName_MonsterActorTargetNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MonsterActorTargetNoti;
        summary.rmiName = RmiName_MonsterActorTargetNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MonsterActorTargetNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MonsterActorTargetNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MonsterActorTargetNoti;
        summary.rmiName = RmiName_MonsterActorTargetNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerActorAppearV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerActorAppearV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerActorAppearV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerActorAppearV2Noti, RmiName_PlayerActorAppearV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerActorAppearV2Noti;
        summary.rmiName = RmiName_PlayerActorAppearV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerActorAppearV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerActorAppearV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerActorAppearV2Noti;
        summary.rmiName = RmiName_PlayerActorAppearV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerActorsAppearV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerActorsAppearV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerActorsAppearV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerActorsAppearV2Noti, RmiName_PlayerActorsAppearV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerActorsAppearV2Noti;
        summary.rmiName = RmiName_PlayerActorsAppearV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerActorsAppearV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerActorsAppearV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerActorsAppearV2Noti;
        summary.rmiName = RmiName_PlayerActorsAppearV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerActorZoneStateNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerActorZoneStateNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerActorZoneStateNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerActorZoneStateNoti, RmiName_PlayerActorZoneStateNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerActorZoneStateNoti;
        summary.rmiName = RmiName_PlayerActorZoneStateNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerActorZoneStateNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerActorZoneStateNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerActorZoneStateNoti;
        summary.rmiName = RmiName_PlayerActorZoneStateNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ActorStatSyncNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ActorStatSyncNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ActorStatSyncNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ActorStatSyncNoti, RmiName_ActorStatSyncNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ActorStatSyncNoti;
        summary.rmiName = RmiName_ActorStatSyncNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ActorStatSyncNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ActorStatSyncNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ActorStatSyncNoti;
        summary.rmiName = RmiName_ActorStatSyncNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PropActorAppearNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PropActorAppearNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PropActorAppearNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PropActorAppearNoti, RmiName_PropActorAppearNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PropActorAppearNoti;
        summary.rmiName = RmiName_PropActorAppearNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PropActorAppearNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PropActorAppearNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PropActorAppearNoti;
        summary.rmiName = RmiName_PropActorAppearNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ActorPendingDisAppearNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ActorPendingDisAppearNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ActorPendingDisAppearNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ActorPendingDisAppearNoti, RmiName_ActorPendingDisAppearNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ActorPendingDisAppearNoti;
        summary.rmiName = RmiName_ActorPendingDisAppearNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ActorPendingDisAppearNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ActorPendingDisAppearNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ActorPendingDisAppearNoti;
        summary.rmiName = RmiName_ActorPendingDisAppearNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PropActorsAppearNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PropActorsAppearNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PropActorsAppearNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PropActorsAppearNoti, RmiName_PropActorsAppearNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PropActorsAppearNoti;
        summary.rmiName = RmiName_PropActorsAppearNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PropActorsAppearNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PropActorsAppearNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PropActorsAppearNoti;
        summary.rmiName = RmiName_PropActorsAppearNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_DesignateBindStoneRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.DesignateBindStoneRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_DesignateBindStoneRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.DesignateBindStoneRes, RmiName_DesignateBindStoneRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.DesignateBindStoneRes;
        summary.rmiName = RmiName_DesignateBindStoneRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =DesignateBindStoneRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_DesignateBindStoneRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.DesignateBindStoneRes;
        summary.rmiName = RmiName_DesignateBindStoneRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PortalByBindStoneRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PortalByBindStoneRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PortalByBindStoneRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PortalByBindStoneRes, RmiName_PortalByBindStoneRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PortalByBindStoneRes;
        summary.rmiName = RmiName_PortalByBindStoneRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PortalByBindStoneRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PortalByBindStoneRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PortalByBindStoneRes;
        summary.rmiName = RmiName_PortalByBindStoneRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerBlackRosterGetPreferenceRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerBlackRosterGetPreferenceRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerBlackRosterGetPreferenceRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerBlackRosterGetPreferenceRes, RmiName_PlayerBlackRosterGetPreferenceRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterGetPreferenceRes;
        summary.rmiName = RmiName_PlayerBlackRosterGetPreferenceRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerBlackRosterGetPreferenceRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerBlackRosterGetPreferenceRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterGetPreferenceRes;
        summary.rmiName = RmiName_PlayerBlackRosterGetPreferenceRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerBlackRosterObservingNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerBlackRosterObservingNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerBlackRosterObservingNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerBlackRosterObservingNoti, RmiName_PlayerBlackRosterObservingNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterObservingNoti;
        summary.rmiName = RmiName_PlayerBlackRosterObservingNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerBlackRosterObservingNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerBlackRosterObservingNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterObservingNoti;
        summary.rmiName = RmiName_PlayerBlackRosterObservingNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerBlackRosterObservingRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerBlackRosterObservingRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerBlackRosterObservingRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerBlackRosterObservingRes, RmiName_PlayerBlackRosterObservingRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterObservingRes;
        summary.rmiName = RmiName_PlayerBlackRosterObservingRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerBlackRosterObservingRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerBlackRosterObservingRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterObservingRes;
        summary.rmiName = RmiName_PlayerBlackRosterObservingRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerBlackRosterProvocationNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerBlackRosterProvocationNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerBlackRosterProvocationNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerBlackRosterProvocationNoti, RmiName_PlayerBlackRosterProvocationNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterProvocationNoti;
        summary.rmiName = RmiName_PlayerBlackRosterProvocationNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerBlackRosterProvocationNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerBlackRosterProvocationNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterProvocationNoti;
        summary.rmiName = RmiName_PlayerBlackRosterProvocationNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerBlackRosterProvocationRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerBlackRosterProvocationRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerBlackRosterProvocationRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerBlackRosterProvocationRes, RmiName_PlayerBlackRosterProvocationRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterProvocationRes;
        summary.rmiName = RmiName_PlayerBlackRosterProvocationRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerBlackRosterProvocationRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerBlackRosterProvocationRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterProvocationRes;
        summary.rmiName = RmiName_PlayerBlackRosterProvocationRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerBlackRosterRankRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerBlackRosterRankRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerBlackRosterRankRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerBlackRosterRankRes, RmiName_PlayerBlackRosterRankRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterRankRes;
        summary.rmiName = RmiName_PlayerBlackRosterRankRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerBlackRosterRankRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerBlackRosterRankRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterRankRes;
        summary.rmiName = RmiName_PlayerBlackRosterRankRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerBlackRosterRevengeRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerBlackRosterRevengeRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerBlackRosterRevengeRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerBlackRosterRevengeRes, RmiName_PlayerBlackRosterRevengeRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterRevengeRes;
        summary.rmiName = RmiName_PlayerBlackRosterRevengeRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerBlackRosterRevengeRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerBlackRosterRevengeRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterRevengeRes;
        summary.rmiName = RmiName_PlayerBlackRosterRevengeRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerBlackRosterSetPreferenceRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerBlackRosterSetPreferenceRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerBlackRosterSetPreferenceRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerBlackRosterSetPreferenceRes, RmiName_PlayerBlackRosterSetPreferenceRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterSetPreferenceRes;
        summary.rmiName = RmiName_PlayerBlackRosterSetPreferenceRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerBlackRosterSetPreferenceRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerBlackRosterSetPreferenceRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterSetPreferenceRes;
        summary.rmiName = RmiName_PlayerBlackRosterSetPreferenceRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerBlackRostersRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerBlackRostersRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerBlackRostersRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerBlackRostersRes, RmiName_PlayerBlackRostersRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerBlackRostersRes;
        summary.rmiName = RmiName_PlayerBlackRostersRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerBlackRostersRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerBlackRostersRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerBlackRostersRes;
        summary.rmiName = RmiName_PlayerBlackRostersRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerBlackRosterLastWeekRankRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerBlackRosterLastWeekRankRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerBlackRosterLastWeekRankRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerBlackRosterLastWeekRankRes, RmiName_PlayerBlackRosterLastWeekRankRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterLastWeekRankRes;
        summary.rmiName = RmiName_PlayerBlackRosterLastWeekRankRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerBlackRosterLastWeekRankRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerBlackRosterLastWeekRankRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterLastWeekRankRes;
        summary.rmiName = RmiName_PlayerBlackRosterLastWeekRankRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerBlackRosterMessageNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerBlackRosterMessageNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerBlackRosterMessageNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerBlackRosterMessageNoti, RmiName_PlayerBlackRosterMessageNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterMessageNoti;
        summary.rmiName = RmiName_PlayerBlackRosterMessageNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerBlackRosterMessageNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerBlackRosterMessageNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterMessageNoti;
        summary.rmiName = RmiName_PlayerBlackRosterMessageNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CheatGetMainQuestV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.CheatGetMainQuestV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CheatGetMainQuestV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CheatGetMainQuestV2Noti, RmiName_CheatGetMainQuestV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CheatGetMainQuestV2Noti;
        summary.rmiName = RmiName_CheatGetMainQuestV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CheatGetMainQuestV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CheatGetMainQuestV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CheatGetMainQuestV2Noti;
        summary.rmiName = RmiName_CheatGetMainQuestV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CheatMessageV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.CheatMessageV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CheatMessageV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CheatMessageV2Res, RmiName_CheatMessageV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CheatMessageV2Res;
        summary.rmiName = RmiName_CheatMessageV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CheatMessageV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CheatMessageV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CheatMessageV2Res;
        summary.rmiName = RmiName_CheatMessageV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CheatQuestResetV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.CheatQuestResetV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CheatQuestResetV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CheatQuestResetV2Noti, RmiName_CheatQuestResetV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CheatQuestResetV2Noti;
        summary.rmiName = RmiName_CheatQuestResetV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CheatQuestResetV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CheatQuestResetV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CheatQuestResetV2Noti;
        summary.rmiName = RmiName_CheatQuestResetV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AccountBlockPlayerAddRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.AccountBlockPlayerAddRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_AccountBlockPlayerAddRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.AccountBlockPlayerAddRes, RmiName_AccountBlockPlayerAddRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AccountBlockPlayerAddRes;
        summary.rmiName = RmiName_AccountBlockPlayerAddRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AccountBlockPlayerAddRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AccountBlockPlayerAddRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AccountBlockPlayerAddRes;
        summary.rmiName = RmiName_AccountBlockPlayerAddRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AccountBlockPlayerDeleteRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.AccountBlockPlayerDeleteRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_AccountBlockPlayerDeleteRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.AccountBlockPlayerDeleteRes, RmiName_AccountBlockPlayerDeleteRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AccountBlockPlayerDeleteRes;
        summary.rmiName = RmiName_AccountBlockPlayerDeleteRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AccountBlockPlayerDeleteRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AccountBlockPlayerDeleteRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AccountBlockPlayerDeleteRes;
        summary.rmiName = RmiName_AccountBlockPlayerDeleteRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AccountBlockPlayerReasonEditRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.AccountBlockPlayerReasonEditRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_AccountBlockPlayerReasonEditRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.AccountBlockPlayerReasonEditRes, RmiName_AccountBlockPlayerReasonEditRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AccountBlockPlayerReasonEditRes;
        summary.rmiName = RmiName_AccountBlockPlayerReasonEditRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AccountBlockPlayerReasonEditRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AccountBlockPlayerReasonEditRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AccountBlockPlayerReasonEditRes;
        summary.rmiName = RmiName_AccountBlockPlayerReasonEditRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AccountBlockPlayersRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.AccountBlockPlayersRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_AccountBlockPlayersRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.AccountBlockPlayersRes, RmiName_AccountBlockPlayersRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AccountBlockPlayersRes;
        summary.rmiName = RmiName_AccountBlockPlayersRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AccountBlockPlayersRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AccountBlockPlayersRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AccountBlockPlayersRes;
        summary.rmiName = RmiName_AccountBlockPlayersRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ChatMessageV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ChatMessageV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ChatMessageV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ChatMessageV2Noti, RmiName_ChatMessageV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ChatMessageV2Noti;
        summary.rmiName = RmiName_ChatMessageV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ChatMessageV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ChatMessageV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ChatMessageV2Noti;
        summary.rmiName = RmiName_ChatMessageV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ChatMessageV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ChatMessageV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ChatMessageV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ChatMessageV2Res, RmiName_ChatMessageV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ChatMessageV2Res;
        summary.rmiName = RmiName_ChatMessageV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ChatMessageV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ChatMessageV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ChatMessageV2Res;
        summary.rmiName = RmiName_ChatMessageV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerSearchV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerSearchV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerSearchV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerSearchV2Res, RmiName_PlayerSearchV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerSearchV2Res;
        summary.rmiName = RmiName_PlayerSearchV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerSearchV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerSearchV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerSearchV2Res;
        summary.rmiName = RmiName_PlayerSearchV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_LinkItemInfoRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.LinkItemInfoRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_LinkItemInfoRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.LinkItemInfoRes, RmiName_LinkItemInfoRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.LinkItemInfoRes;
        summary.rmiName = RmiName_LinkItemInfoRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =LinkItemInfoRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_LinkItemInfoRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.LinkItemInfoRes;
        summary.rmiName = RmiName_LinkItemInfoRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CostumeCardBuildRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.CostumeCardBuildRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CostumeCardBuildRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CostumeCardBuildRes, RmiName_CostumeCardBuildRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CostumeCardBuildRes;
        summary.rmiName = RmiName_CostumeCardBuildRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CostumeCardBuildRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CostumeCardBuildRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CostumeCardBuildRes;
        summary.rmiName = RmiName_CostumeCardBuildRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CostumeCardGachaRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.CostumeCardGachaRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CostumeCardGachaRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CostumeCardGachaRes, RmiName_CostumeCardGachaRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CostumeCardGachaRes;
        summary.rmiName = RmiName_CostumeCardGachaRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CostumeCardGachaRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CostumeCardGachaRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CostumeCardGachaRes;
        summary.rmiName = RmiName_CostumeCardGachaRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CostumeCardInfoRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.CostumeCardInfoRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CostumeCardInfoRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CostumeCardInfoRes, RmiName_CostumeCardInfoRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CostumeCardInfoRes;
        summary.rmiName = RmiName_CostumeCardInfoRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CostumeCardInfoRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CostumeCardInfoRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CostumeCardInfoRes;
        summary.rmiName = RmiName_CostumeCardInfoRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CostumeCardMixRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.CostumeCardMixRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CostumeCardMixRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CostumeCardMixRes, RmiName_CostumeCardMixRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CostumeCardMixRes;
        summary.rmiName = RmiName_CostumeCardMixRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CostumeCardMixRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CostumeCardMixRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CostumeCardMixRes;
        summary.rmiName = RmiName_CostumeCardMixRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CostumeCollectNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.CostumeCollectNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CostumeCollectNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CostumeCollectNoti, RmiName_CostumeCollectNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CostumeCollectNoti;
        summary.rmiName = RmiName_CostumeCollectNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CostumeCollectNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CostumeCollectNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CostumeCollectNoti;
        summary.rmiName = RmiName_CostumeCollectNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CostumeCollectRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.CostumeCollectRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CostumeCollectRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CostumeCollectRes, RmiName_CostumeCollectRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CostumeCollectRes;
        summary.rmiName = RmiName_CostumeCollectRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CostumeCollectRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CostumeCollectRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CostumeCollectRes;
        summary.rmiName = RmiName_CostumeCollectRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CostumeEquipBodyRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.CostumeEquipBodyRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CostumeEquipBodyRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CostumeEquipBodyRes, RmiName_CostumeEquipBodyRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CostumeEquipBodyRes;
        summary.rmiName = RmiName_CostumeEquipBodyRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CostumeEquipBodyRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CostumeEquipBodyRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CostumeEquipBodyRes;
        summary.rmiName = RmiName_CostumeEquipBodyRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CostumeEquipBodyShowRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.CostumeEquipBodyShowRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CostumeEquipBodyShowRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CostumeEquipBodyShowRes, RmiName_CostumeEquipBodyShowRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CostumeEquipBodyShowRes;
        summary.rmiName = RmiName_CostumeEquipBodyShowRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CostumeEquipBodyShowRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CostumeEquipBodyShowRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CostumeEquipBodyShowRes;
        summary.rmiName = RmiName_CostumeEquipBodyShowRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CostumeEquipHeadRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.CostumeEquipHeadRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CostumeEquipHeadRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CostumeEquipHeadRes, RmiName_CostumeEquipHeadRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CostumeEquipHeadRes;
        summary.rmiName = RmiName_CostumeEquipHeadRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CostumeEquipHeadRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CostumeEquipHeadRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CostumeEquipHeadRes;
        summary.rmiName = RmiName_CostumeEquipHeadRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CostumeEquipHeadShowRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.CostumeEquipHeadShowRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CostumeEquipHeadShowRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CostumeEquipHeadShowRes, RmiName_CostumeEquipHeadShowRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CostumeEquipHeadShowRes;
        summary.rmiName = RmiName_CostumeEquipHeadShowRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CostumeEquipHeadShowRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CostumeEquipHeadShowRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CostumeEquipHeadShowRes;
        summary.rmiName = RmiName_CostumeEquipHeadShowRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CostumeInfoRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.CostumeInfoRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CostumeInfoRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CostumeInfoRes, RmiName_CostumeInfoRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CostumeInfoRes;
        summary.rmiName = RmiName_CostumeInfoRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CostumeInfoRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CostumeInfoRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CostumeInfoRes;
        summary.rmiName = RmiName_CostumeInfoRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CostumeConfirmAcceptRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.CostumeConfirmAcceptRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CostumeConfirmAcceptRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CostumeConfirmAcceptRes, RmiName_CostumeConfirmAcceptRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CostumeConfirmAcceptRes;
        summary.rmiName = RmiName_CostumeConfirmAcceptRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CostumeConfirmAcceptRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CostumeConfirmAcceptRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CostumeConfirmAcceptRes;
        summary.rmiName = RmiName_CostumeConfirmAcceptRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CostumeConfirmChangeRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.CostumeConfirmChangeRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CostumeConfirmChangeRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CostumeConfirmChangeRes, RmiName_CostumeConfirmChangeRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CostumeConfirmChangeRes;
        summary.rmiName = RmiName_CostumeConfirmChangeRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CostumeConfirmChangeRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CostumeConfirmChangeRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CostumeConfirmChangeRes;
        summary.rmiName = RmiName_CostumeConfirmChangeRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CostumeConfirmInfoRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.CostumeConfirmInfoRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CostumeConfirmInfoRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CostumeConfirmInfoRes, RmiName_CostumeConfirmInfoRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CostumeConfirmInfoRes;
        summary.rmiName = RmiName_CostumeConfirmInfoRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CostumeConfirmInfoRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CostumeConfirmInfoRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CostumeConfirmInfoRes;
        summary.rmiName = RmiName_CostumeConfirmInfoRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PortalEffectNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PortalEffectNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PortalEffectNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PortalEffectNoti, RmiName_PortalEffectNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PortalEffectNoti;
        summary.rmiName = RmiName_PortalEffectNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PortalEffectNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PortalEffectNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PortalEffectNoti;
        summary.rmiName = RmiName_PortalEffectNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PortalEffectRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PortalEffectRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PortalEffectRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PortalEffectRes, RmiName_PortalEffectRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PortalEffectRes;
        summary.rmiName = RmiName_PortalEffectRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PortalEffectRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PortalEffectRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PortalEffectRes;
        summary.rmiName = RmiName_PortalEffectRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AttainmentDailyRewardV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.AttainmentDailyRewardV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_AttainmentDailyRewardV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.AttainmentDailyRewardV2Res, RmiName_AttainmentDailyRewardV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AttainmentDailyRewardV2Res;
        summary.rmiName = RmiName_AttainmentDailyRewardV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AttainmentDailyRewardV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AttainmentDailyRewardV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AttainmentDailyRewardV2Res;
        summary.rmiName = RmiName_AttainmentDailyRewardV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AttainmentNormalRewardV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.AttainmentNormalRewardV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_AttainmentNormalRewardV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.AttainmentNormalRewardV2Res, RmiName_AttainmentNormalRewardV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AttainmentNormalRewardV2Res;
        summary.rmiName = RmiName_AttainmentNormalRewardV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AttainmentNormalRewardV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AttainmentNormalRewardV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AttainmentNormalRewardV2Res;
        summary.rmiName = RmiName_AttainmentNormalRewardV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AttainmentProgressV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.AttainmentProgressV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_AttainmentProgressV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.AttainmentProgressV2Noti, RmiName_AttainmentProgressV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AttainmentProgressV2Noti;
        summary.rmiName = RmiName_AttainmentProgressV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AttainmentProgressV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AttainmentProgressV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AttainmentProgressV2Noti;
        summary.rmiName = RmiName_AttainmentProgressV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AttainmentsNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.AttainmentsNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_AttainmentsNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.AttainmentsNoti, RmiName_AttainmentsNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AttainmentsNoti;
        summary.rmiName = RmiName_AttainmentsNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AttainmentsNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AttainmentsNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AttainmentsNoti;
        summary.rmiName = RmiName_AttainmentsNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AttendanceRewardV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.AttendanceRewardV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_AttendanceRewardV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.AttendanceRewardV2Res, RmiName_AttendanceRewardV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AttendanceRewardV2Res;
        summary.rmiName = RmiName_AttendanceRewardV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AttendanceRewardV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AttendanceRewardV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AttendanceRewardV2Res;
        summary.rmiName = RmiName_AttendanceRewardV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BossScheduleNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.BossScheduleNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_BossScheduleNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.BossScheduleNoti, RmiName_BossScheduleNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BossScheduleNoti;
        summary.rmiName = RmiName_BossScheduleNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BossScheduleNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BossScheduleNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BossScheduleNoti;
        summary.rmiName = RmiName_BossScheduleNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BossScheduleRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.BossScheduleRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_BossScheduleRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.BossScheduleRes, RmiName_BossScheduleRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BossScheduleRes;
        summary.rmiName = RmiName_BossScheduleRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BossScheduleRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BossScheduleRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BossScheduleRes;
        summary.rmiName = RmiName_BossScheduleRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_EventAttendanceListV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.EventAttendanceListV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_EventAttendanceListV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.EventAttendanceListV2Noti, RmiName_EventAttendanceListV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.EventAttendanceListV2Noti;
        summary.rmiName = RmiName_EventAttendanceListV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =EventAttendanceListV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_EventAttendanceListV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.EventAttendanceListV2Noti;
        summary.rmiName = RmiName_EventAttendanceListV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_EventExchangeRewardV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.EventExchangeRewardV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_EventExchangeRewardV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.EventExchangeRewardV2Res, RmiName_EventExchangeRewardV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.EventExchangeRewardV2Res;
        summary.rmiName = RmiName_EventExchangeRewardV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =EventExchangeRewardV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_EventExchangeRewardV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.EventExchangeRewardV2Res;
        summary.rmiName = RmiName_EventExchangeRewardV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildAdminBuffActiveRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildAdminBuffActiveRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildAdminBuffActiveRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildAdminBuffActiveRes, RmiName_GuildAdminBuffActiveRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildAdminBuffActiveRes;
        summary.rmiName = RmiName_GuildAdminBuffActiveRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildAdminBuffActiveRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildAdminBuffActiveRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildAdminBuffActiveRes;
        summary.rmiName = RmiName_GuildAdminBuffActiveRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildAdminBuffBuyRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildAdminBuffBuyRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildAdminBuffBuyRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildAdminBuffBuyRes, RmiName_GuildAdminBuffBuyRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildAdminBuffBuyRes;
        summary.rmiName = RmiName_GuildAdminBuffBuyRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildAdminBuffBuyRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildAdminBuffBuyRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildAdminBuffBuyRes;
        summary.rmiName = RmiName_GuildAdminBuffBuyRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildAdminInfoRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildAdminInfoRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildAdminInfoRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildAdminInfoRes, RmiName_GuildAdminInfoRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildAdminInfoRes;
        summary.rmiName = RmiName_GuildAdminInfoRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildAdminInfoRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildAdminInfoRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildAdminInfoRes;
        summary.rmiName = RmiName_GuildAdminInfoRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildAdminMasterChangeNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildAdminMasterChangeNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildAdminMasterChangeNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildAdminMasterChangeNoti, RmiName_GuildAdminMasterChangeNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildAdminMasterChangeNoti;
        summary.rmiName = RmiName_GuildAdminMasterChangeNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildAdminMasterChangeNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildAdminMasterChangeNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildAdminMasterChangeNoti;
        summary.rmiName = RmiName_GuildAdminMasterChangeNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildAdminMasterChangeRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildAdminMasterChangeRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildAdminMasterChangeRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildAdminMasterChangeRes, RmiName_GuildAdminMasterChangeRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildAdminMasterChangeRes;
        summary.rmiName = RmiName_GuildAdminMasterChangeRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildAdminMasterChangeRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildAdminMasterChangeRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildAdminMasterChangeRes;
        summary.rmiName = RmiName_GuildAdminMasterChangeRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildAdminMemberBanishNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildAdminMemberBanishNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildAdminMemberBanishNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildAdminMemberBanishNoti, RmiName_GuildAdminMemberBanishNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildAdminMemberBanishNoti;
        summary.rmiName = RmiName_GuildAdminMemberBanishNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildAdminMemberBanishNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildAdminMemberBanishNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildAdminMemberBanishNoti;
        summary.rmiName = RmiName_GuildAdminMemberBanishNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildAdminMemberBanishRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildAdminMemberBanishRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildAdminMemberBanishRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildAdminMemberBanishRes, RmiName_GuildAdminMemberBanishRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildAdminMemberBanishRes;
        summary.rmiName = RmiName_GuildAdminMemberBanishRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildAdminMemberBanishRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildAdminMemberBanishRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildAdminMemberBanishRes;
        summary.rmiName = RmiName_GuildAdminMemberBanishRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildAdminMemberUpdateNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildAdminMemberUpdateNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildAdminMemberUpdateNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildAdminMemberUpdateNoti, RmiName_GuildAdminMemberUpdateNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildAdminMemberUpdateNoti;
        summary.rmiName = RmiName_GuildAdminMemberUpdateNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildAdminMemberUpdateNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildAdminMemberUpdateNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildAdminMemberUpdateNoti;
        summary.rmiName = RmiName_GuildAdminMemberUpdateNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildAdminMemberUpdateRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildAdminMemberUpdateRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildAdminMemberUpdateRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildAdminMemberUpdateRes, RmiName_GuildAdminMemberUpdateRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildAdminMemberUpdateRes;
        summary.rmiName = RmiName_GuildAdminMemberUpdateRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildAdminMemberUpdateRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildAdminMemberUpdateRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildAdminMemberUpdateRes;
        summary.rmiName = RmiName_GuildAdminMemberUpdateRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildAdminUpdateBaseNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildAdminUpdateBaseNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildAdminUpdateBaseNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildAdminUpdateBaseNoti, RmiName_GuildAdminUpdateBaseNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildAdminUpdateBaseNoti;
        summary.rmiName = RmiName_GuildAdminUpdateBaseNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildAdminUpdateBaseNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildAdminUpdateBaseNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildAdminUpdateBaseNoti;
        summary.rmiName = RmiName_GuildAdminUpdateBaseNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildAdminUpdateBaseRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildAdminUpdateBaseRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildAdminUpdateBaseRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildAdminUpdateBaseRes, RmiName_GuildAdminUpdateBaseRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildAdminUpdateBaseRes;
        summary.rmiName = RmiName_GuildAdminUpdateBaseRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildAdminUpdateBaseRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildAdminUpdateBaseRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildAdminUpdateBaseRes;
        summary.rmiName = RmiName_GuildAdminUpdateBaseRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildAdminUpdateIntroNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildAdminUpdateIntroNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildAdminUpdateIntroNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildAdminUpdateIntroNoti, RmiName_GuildAdminUpdateIntroNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildAdminUpdateIntroNoti;
        summary.rmiName = RmiName_GuildAdminUpdateIntroNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildAdminUpdateIntroNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildAdminUpdateIntroNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildAdminUpdateIntroNoti;
        summary.rmiName = RmiName_GuildAdminUpdateIntroNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildAdminUpdateIntroRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildAdminUpdateIntroRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildAdminUpdateIntroRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildAdminUpdateIntroRes, RmiName_GuildAdminUpdateIntroRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildAdminUpdateIntroRes;
        summary.rmiName = RmiName_GuildAdminUpdateIntroRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildAdminUpdateIntroRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildAdminUpdateIntroRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildAdminUpdateIntroRes;
        summary.rmiName = RmiName_GuildAdminUpdateIntroRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildAdminUpdateNoticeNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildAdminUpdateNoticeNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildAdminUpdateNoticeNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildAdminUpdateNoticeNoti, RmiName_GuildAdminUpdateNoticeNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildAdminUpdateNoticeNoti;
        summary.rmiName = RmiName_GuildAdminUpdateNoticeNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildAdminUpdateNoticeNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildAdminUpdateNoticeNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildAdminUpdateNoticeNoti;
        summary.rmiName = RmiName_GuildAdminUpdateNoticeNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildAdminUpdateNoticeRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildAdminUpdateNoticeRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildAdminUpdateNoticeRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildAdminUpdateNoticeRes, RmiName_GuildAdminUpdateNoticeRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildAdminUpdateNoticeRes;
        summary.rmiName = RmiName_GuildAdminUpdateNoticeRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildAdminUpdateNoticeRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildAdminUpdateNoticeRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildAdminUpdateNoticeRes;
        summary.rmiName = RmiName_GuildAdminUpdateNoticeRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildAdminUpdateTendencyNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildAdminUpdateTendencyNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildAdminUpdateTendencyNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildAdminUpdateTendencyNoti, RmiName_GuildAdminUpdateTendencyNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildAdminUpdateTendencyNoti;
        summary.rmiName = RmiName_GuildAdminUpdateTendencyNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildAdminUpdateTendencyNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildAdminUpdateTendencyNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildAdminUpdateTendencyNoti;
        summary.rmiName = RmiName_GuildAdminUpdateTendencyNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildAdminUpdateTendencyRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildAdminUpdateTendencyRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildAdminUpdateTendencyRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildAdminUpdateTendencyRes, RmiName_GuildAdminUpdateTendencyRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildAdminUpdateTendencyRes;
        summary.rmiName = RmiName_GuildAdminUpdateTendencyRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildAdminUpdateTendencyRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildAdminUpdateTendencyRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildAdminUpdateTendencyRes;
        summary.rmiName = RmiName_GuildAdminUpdateTendencyRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildAdminUpdateTypeNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildAdminUpdateTypeNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildAdminUpdateTypeNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildAdminUpdateTypeNoti, RmiName_GuildAdminUpdateTypeNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildAdminUpdateTypeNoti;
        summary.rmiName = RmiName_GuildAdminUpdateTypeNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildAdminUpdateTypeNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildAdminUpdateTypeNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildAdminUpdateTypeNoti;
        summary.rmiName = RmiName_GuildAdminUpdateTypeNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildAdminUpdateTypeRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildAdminUpdateTypeRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildAdminUpdateTypeRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildAdminUpdateTypeRes, RmiName_GuildAdminUpdateTypeRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildAdminUpdateTypeRes;
        summary.rmiName = RmiName_GuildAdminUpdateTypeRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildAdminUpdateTypeRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildAdminUpdateTypeRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildAdminUpdateTypeRes;
        summary.rmiName = RmiName_GuildAdminUpdateTypeRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildAttendRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildAttendRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildAttendRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildAttendRes, RmiName_GuildAttendRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildAttendRes;
        summary.rmiName = RmiName_GuildAttendRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildAttendRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildAttendRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildAttendRes;
        summary.rmiName = RmiName_GuildAttendRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildBaseNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildBaseNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildBaseNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildBaseNoti, RmiName_GuildBaseNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildBaseNoti;
        summary.rmiName = RmiName_GuildBaseNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildBaseNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildBaseNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildBaseNoti;
        summary.rmiName = RmiName_GuildBaseNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildBuffInfoRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildBuffInfoRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildBuffInfoRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildBuffInfoRes, RmiName_GuildBuffInfoRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildBuffInfoRes;
        summary.rmiName = RmiName_GuildBuffInfoRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildBuffInfoRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildBuffInfoRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildBuffInfoRes;
        summary.rmiName = RmiName_GuildBuffInfoRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildBuffNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildBuffNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildBuffNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildBuffNoti, RmiName_GuildBuffNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildBuffNoti;
        summary.rmiName = RmiName_GuildBuffNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildBuffNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildBuffNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildBuffNoti;
        summary.rmiName = RmiName_GuildBuffNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildCreateRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildCreateRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildCreateRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildCreateRes, RmiName_GuildCreateRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildCreateRes;
        summary.rmiName = RmiName_GuildCreateRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildCreateRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildCreateRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildCreateRes;
        summary.rmiName = RmiName_GuildCreateRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildDeleteRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildDeleteRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildDeleteRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildDeleteRes, RmiName_GuildDeleteRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildDeleteRes;
        summary.rmiName = RmiName_GuildDeleteRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildDeleteRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildDeleteRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildDeleteRes;
        summary.rmiName = RmiName_GuildDeleteRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildDonateRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildDonateRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildDonateRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildDonateRes, RmiName_GuildDonateRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildDonateRes;
        summary.rmiName = RmiName_GuildDonateRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildDonateRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildDonateRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildDonateRes;
        summary.rmiName = RmiName_GuildDonateRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildDonationByCronV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildDonationByCronV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildDonationByCronV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildDonationByCronV2Res, RmiName_GuildDonationByCronV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildDonationByCronV2Res;
        summary.rmiName = RmiName_GuildDonationByCronV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildDonationByCronV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildDonationByCronV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildDonationByCronV2Res;
        summary.rmiName = RmiName_GuildDonationByCronV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildFindRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildFindRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildFindRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildFindRes, RmiName_GuildFindRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildFindRes;
        summary.rmiName = RmiName_GuildFindRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildFindRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildFindRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildFindRes;
        summary.rmiName = RmiName_GuildFindRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildHistoryNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildHistoryNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildHistoryNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildHistoryNoti, RmiName_GuildHistoryNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildHistoryNoti;
        summary.rmiName = RmiName_GuildHistoryNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildHistoryNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildHistoryNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildHistoryNoti;
        summary.rmiName = RmiName_GuildHistoryNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildHistoryRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildHistoryRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildHistoryRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildHistoryRes, RmiName_GuildHistoryRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildHistoryRes;
        summary.rmiName = RmiName_GuildHistoryRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildHistoryRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildHistoryRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildHistoryRes;
        summary.rmiName = RmiName_GuildHistoryRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildInfoCallRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildInfoCallRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildInfoCallRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildInfoCallRes, RmiName_GuildInfoCallRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildInfoCallRes;
        summary.rmiName = RmiName_GuildInfoCallRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildInfoCallRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildInfoCallRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildInfoCallRes;
        summary.rmiName = RmiName_GuildInfoCallRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildInfoRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildInfoRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildInfoRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildInfoRes, RmiName_GuildInfoRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildInfoRes;
        summary.rmiName = RmiName_GuildInfoRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildInfoRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildInfoRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildInfoRes;
        summary.rmiName = RmiName_GuildInfoRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildJoinRequestConfirmNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildJoinRequestConfirmNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildJoinRequestConfirmNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildJoinRequestConfirmNoti, RmiName_GuildJoinRequestConfirmNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildJoinRequestConfirmNoti;
        summary.rmiName = RmiName_GuildJoinRequestConfirmNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildJoinRequestConfirmNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildJoinRequestConfirmNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildJoinRequestConfirmNoti;
        summary.rmiName = RmiName_GuildJoinRequestConfirmNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildJoinRequestConfirmRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildJoinRequestConfirmRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildJoinRequestConfirmRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildJoinRequestConfirmRes, RmiName_GuildJoinRequestConfirmRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildJoinRequestConfirmRes;
        summary.rmiName = RmiName_GuildJoinRequestConfirmRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildJoinRequestConfirmRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildJoinRequestConfirmRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildJoinRequestConfirmRes;
        summary.rmiName = RmiName_GuildJoinRequestConfirmRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildJoinRequestListRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildJoinRequestListRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildJoinRequestListRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildJoinRequestListRes, RmiName_GuildJoinRequestListRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildJoinRequestListRes;
        summary.rmiName = RmiName_GuildJoinRequestListRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildJoinRequestListRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildJoinRequestListRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildJoinRequestListRes;
        summary.rmiName = RmiName_GuildJoinRequestListRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildLeaveNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildLeaveNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildLeaveNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildLeaveNoti, RmiName_GuildLeaveNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildLeaveNoti;
        summary.rmiName = RmiName_GuildLeaveNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildLeaveNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildLeaveNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildLeaveNoti;
        summary.rmiName = RmiName_GuildLeaveNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildLeaveRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildLeaveRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildLeaveRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildLeaveRes, RmiName_GuildLeaveRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildLeaveRes;
        summary.rmiName = RmiName_GuildLeaveRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildLeaveRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildLeaveRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildLeaveRes;
        summary.rmiName = RmiName_GuildLeaveRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildLiveInviteConfirmNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildLiveInviteConfirmNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildLiveInviteConfirmNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildLiveInviteConfirmNoti, RmiName_GuildLiveInviteConfirmNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildLiveInviteConfirmNoti;
        summary.rmiName = RmiName_GuildLiveInviteConfirmNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildLiveInviteConfirmNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildLiveInviteConfirmNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildLiveInviteConfirmNoti;
        summary.rmiName = RmiName_GuildLiveInviteConfirmNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildLiveInviteConfirmRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildLiveInviteConfirmRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildLiveInviteConfirmRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildLiveInviteConfirmRes, RmiName_GuildLiveInviteConfirmRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildLiveInviteConfirmRes;
        summary.rmiName = RmiName_GuildLiveInviteConfirmRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildLiveInviteConfirmRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildLiveInviteConfirmRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildLiveInviteConfirmRes;
        summary.rmiName = RmiName_GuildLiveInviteConfirmRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildLiveInviteNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildLiveInviteNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildLiveInviteNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildLiveInviteNoti, RmiName_GuildLiveInviteNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildLiveInviteNoti;
        summary.rmiName = RmiName_GuildLiveInviteNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildLiveInviteNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildLiveInviteNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildLiveInviteNoti;
        summary.rmiName = RmiName_GuildLiveInviteNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildLiveInviteRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildLiveInviteRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildLiveInviteRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildLiveInviteRes, RmiName_GuildLiveInviteRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildLiveInviteRes;
        summary.rmiName = RmiName_GuildLiveInviteRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildLiveInviteRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildLiveInviteRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildLiveInviteRes;
        summary.rmiName = RmiName_GuildLiveInviteRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildMemberInfoRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildMemberInfoRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildMemberInfoRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildMemberInfoRes, RmiName_GuildMemberInfoRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildMemberInfoRes;
        summary.rmiName = RmiName_GuildMemberInfoRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildMemberInfoRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildMemberInfoRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildMemberInfoRes;
        summary.rmiName = RmiName_GuildMemberInfoRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildMemberNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildMemberNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildMemberNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildMemberNoti, RmiName_GuildMemberNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildMemberNoti;
        summary.rmiName = RmiName_GuildMemberNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildMemberNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildMemberNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildMemberNoti;
        summary.rmiName = RmiName_GuildMemberNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildMemberStateV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildMemberStateV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildMemberStateV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildMemberStateV2Noti, RmiName_GuildMemberStateV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildMemberStateV2Noti;
        summary.rmiName = RmiName_GuildMemberStateV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildMemberStateV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildMemberStateV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildMemberStateV2Noti;
        summary.rmiName = RmiName_GuildMemberStateV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildMemberUpdateNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildMemberUpdateNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildMemberUpdateNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildMemberUpdateNoti, RmiName_GuildMemberUpdateNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildMemberUpdateNoti;
        summary.rmiName = RmiName_GuildMemberUpdateNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildMemberUpdateNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildMemberUpdateNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildMemberUpdateNoti;
        summary.rmiName = RmiName_GuildMemberUpdateNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildPointNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildPointNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildPointNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildPointNoti, RmiName_GuildPointNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildPointNoti;
        summary.rmiName = RmiName_GuildPointNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildPointNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildPointNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildPointNoti;
        summary.rmiName = RmiName_GuildPointNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildSignRequestCancelRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildSignRequestCancelRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildSignRequestCancelRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildSignRequestCancelRes, RmiName_GuildSignRequestCancelRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildSignRequestCancelRes;
        summary.rmiName = RmiName_GuildSignRequestCancelRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildSignRequestCancelRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildSignRequestCancelRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildSignRequestCancelRes;
        summary.rmiName = RmiName_GuildSignRequestCancelRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildSignRequestListRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildSignRequestListRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildSignRequestListRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildSignRequestListRes, RmiName_GuildSignRequestListRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildSignRequestListRes;
        summary.rmiName = RmiName_GuildSignRequestListRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildSignRequestListRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildSignRequestListRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildSignRequestListRes;
        summary.rmiName = RmiName_GuildSignRequestListRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildSignRequestRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildSignRequestRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildSignRequestRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildSignRequestRes, RmiName_GuildSignRequestRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildSignRequestRes;
        summary.rmiName = RmiName_GuildSignRequestRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildSignRequestRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildSignRequestRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildSignRequestRes;
        summary.rmiName = RmiName_GuildSignRequestRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildUpdateCrestNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildUpdateCrestNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildUpdateCrestNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildUpdateCrestNoti, RmiName_GuildUpdateCrestNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildUpdateCrestNoti;
        summary.rmiName = RmiName_GuildUpdateCrestNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildUpdateCrestNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildUpdateCrestNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildUpdateCrestNoti;
        summary.rmiName = RmiName_GuildUpdateCrestNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildUpdateCurrencyV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildUpdateCurrencyV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildUpdateCurrencyV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildUpdateCurrencyV2Noti, RmiName_GuildUpdateCurrencyV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildUpdateCurrencyV2Noti;
        summary.rmiName = RmiName_GuildUpdateCurrencyV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildUpdateCurrencyV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildUpdateCurrencyV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildUpdateCurrencyV2Noti;
        summary.rmiName = RmiName_GuildUpdateCurrencyV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildVoteInfoRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildVoteInfoRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildVoteInfoRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildVoteInfoRes, RmiName_GuildVoteInfoRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildVoteInfoRes;
        summary.rmiName = RmiName_GuildVoteInfoRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildVoteInfoRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildVoteInfoRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildVoteInfoRes;
        summary.rmiName = RmiName_GuildVoteInfoRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildVoteMasterImpeachRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildVoteMasterImpeachRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildVoteMasterImpeachRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildVoteMasterImpeachRes, RmiName_GuildVoteMasterImpeachRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildVoteMasterImpeachRes;
        summary.rmiName = RmiName_GuildVoteMasterImpeachRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildVoteMasterImpeachRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildVoteMasterImpeachRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildVoteMasterImpeachRes;
        summary.rmiName = RmiName_GuildVoteMasterImpeachRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildVoteNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildVoteNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildVoteNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildVoteNoti, RmiName_GuildVoteNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildVoteNoti;
        summary.rmiName = RmiName_GuildVoteNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildVoteNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildVoteNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildVoteNoti;
        summary.rmiName = RmiName_GuildVoteNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildVoteRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildVoteRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildVoteRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildVoteRes, RmiName_GuildVoteRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildVoteRes;
        summary.rmiName = RmiName_GuildVoteRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildVoteRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildVoteRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildVoteRes;
        summary.rmiName = RmiName_GuildVoteRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildWarehouseChangeSizeV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildWarehouseChangeSizeV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildWarehouseChangeSizeV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildWarehouseChangeSizeV2Res, RmiName_GuildWarehouseChangeSizeV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildWarehouseChangeSizeV2Res;
        summary.rmiName = RmiName_GuildWarehouseChangeSizeV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildWarehouseChangeSizeV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildWarehouseChangeSizeV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildWarehouseChangeSizeV2Res;
        summary.rmiName = RmiName_GuildWarehouseChangeSizeV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildWarehouseInfoV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildWarehouseInfoV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildWarehouseInfoV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildWarehouseInfoV2Res, RmiName_GuildWarehouseInfoV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildWarehouseInfoV2Res;
        summary.rmiName = RmiName_GuildWarehouseInfoV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildWarehouseInfoV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildWarehouseInfoV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildWarehouseInfoV2Res;
        summary.rmiName = RmiName_GuildWarehouseInfoV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildWarehouseItemMoveV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildWarehouseItemMoveV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildWarehouseItemMoveV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildWarehouseItemMoveV2Res, RmiName_GuildWarehouseItemMoveV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildWarehouseItemMoveV2Res;
        summary.rmiName = RmiName_GuildWarehouseItemMoveV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildWarehouseItemMoveV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildWarehouseItemMoveV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildWarehouseItemMoveV2Res;
        summary.rmiName = RmiName_GuildWarehouseItemMoveV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildWarehouseWalletMoveV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildWarehouseWalletMoveV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildWarehouseWalletMoveV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildWarehouseWalletMoveV2Res, RmiName_GuildWarehouseWalletMoveV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildWarehouseWalletMoveV2Res;
        summary.rmiName = RmiName_GuildWarehouseWalletMoveV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildWarehouseWalletMoveV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildWarehouseWalletMoveV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildWarehouseWalletMoveV2Res;
        summary.rmiName = RmiName_GuildWarehouseWalletMoveV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildRubyNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildRubyNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildRubyNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildRubyNoti, RmiName_GuildRubyNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildRubyNoti;
        summary.rmiName = RmiName_GuildRubyNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildRubyNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildRubyNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildRubyNoti;
        summary.rmiName = RmiName_GuildRubyNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildCronNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildCronNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildCronNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildCronNoti, RmiName_GuildCronNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildCronNoti;
        summary.rmiName = RmiName_GuildCronNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildCronNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildCronNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildCronNoti;
        summary.rmiName = RmiName_GuildCronNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildTerritoryInfoRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildTerritoryInfoRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildTerritoryInfoRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildTerritoryInfoRes, RmiName_GuildTerritoryInfoRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildTerritoryInfoRes;
        summary.rmiName = RmiName_GuildTerritoryInfoRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildTerritoryInfoRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildTerritoryInfoRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildTerritoryInfoRes;
        summary.rmiName = RmiName_GuildTerritoryInfoRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildTerritorySetRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildTerritorySetRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildTerritorySetRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildTerritorySetRes, RmiName_GuildTerritorySetRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildTerritorySetRes;
        summary.rmiName = RmiName_GuildTerritorySetRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildTerritorySetRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildTerritorySetRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildTerritorySetRes;
        summary.rmiName = RmiName_GuildTerritorySetRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_WorldTerritoryOverviewRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.WorldTerritoryOverviewRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_WorldTerritoryOverviewRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.WorldTerritoryOverviewRes, RmiName_WorldTerritoryOverviewRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.WorldTerritoryOverviewRes;
        summary.rmiName = RmiName_WorldTerritoryOverviewRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =WorldTerritoryOverviewRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_WorldTerritoryOverviewRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.WorldTerritoryOverviewRes;
        summary.rmiName = RmiName_WorldTerritoryOverviewRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_WorldBossLastAttackNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.WorldBossLastAttackNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_WorldBossLastAttackNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.WorldBossLastAttackNoti, RmiName_WorldBossLastAttackNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.WorldBossLastAttackNoti;
        summary.rmiName = RmiName_WorldBossLastAttackNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =WorldBossLastAttackNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_WorldBossLastAttackNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.WorldBossLastAttackNoti;
        summary.rmiName = RmiName_WorldBossLastAttackNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_DungeonClearHistoryV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.DungeonClearHistoryV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_DungeonClearHistoryV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.DungeonClearHistoryV2Noti, RmiName_DungeonClearHistoryV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.DungeonClearHistoryV2Noti;
        summary.rmiName = RmiName_DungeonClearHistoryV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =DungeonClearHistoryV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_DungeonClearHistoryV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.DungeonClearHistoryV2Noti;
        summary.rmiName = RmiName_DungeonClearHistoryV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_DungeonClearV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.DungeonClearV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_DungeonClearV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.DungeonClearV2Noti, RmiName_DungeonClearV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.DungeonClearV2Noti;
        summary.rmiName = RmiName_DungeonClearV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =DungeonClearV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_DungeonClearV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.DungeonClearV2Noti;
        summary.rmiName = RmiName_DungeonClearV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_DungeonCronUpdateV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.DungeonCronUpdateV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_DungeonCronUpdateV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.DungeonCronUpdateV2Noti, RmiName_DungeonCronUpdateV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.DungeonCronUpdateV2Noti;
        summary.rmiName = RmiName_DungeonCronUpdateV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =DungeonCronUpdateV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_DungeonCronUpdateV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.DungeonCronUpdateV2Noti;
        summary.rmiName = RmiName_DungeonCronUpdateV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_DungeonEnterV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.DungeonEnterV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_DungeonEnterV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.DungeonEnterV2Res, RmiName_DungeonEnterV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.DungeonEnterV2Res;
        summary.rmiName = RmiName_DungeonEnterV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =DungeonEnterV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_DungeonEnterV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.DungeonEnterV2Res;
        summary.rmiName = RmiName_DungeonEnterV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_DungeonExpUpdateV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.DungeonExpUpdateV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_DungeonExpUpdateV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.DungeonExpUpdateV2Noti, RmiName_DungeonExpUpdateV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.DungeonExpUpdateV2Noti;
        summary.rmiName = RmiName_DungeonExpUpdateV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =DungeonExpUpdateV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_DungeonExpUpdateV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.DungeonExpUpdateV2Noti;
        summary.rmiName = RmiName_DungeonExpUpdateV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_DungeonGiveUpV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.DungeonGiveUpV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_DungeonGiveUpV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.DungeonGiveUpV2Res, RmiName_DungeonGiveUpV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.DungeonGiveUpV2Res;
        summary.rmiName = RmiName_DungeonGiveUpV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =DungeonGiveUpV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_DungeonGiveUpV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.DungeonGiveUpV2Res;
        summary.rmiName = RmiName_DungeonGiveUpV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_DungeonLeaveV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.DungeonLeaveV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_DungeonLeaveV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.DungeonLeaveV2Res, RmiName_DungeonLeaveV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.DungeonLeaveV2Res;
        summary.rmiName = RmiName_DungeonLeaveV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =DungeonLeaveV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_DungeonLeaveV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.DungeonLeaveV2Res;
        summary.rmiName = RmiName_DungeonLeaveV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_DungeonLoadingCompleteAllV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.DungeonLoadingCompleteAllV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_DungeonLoadingCompleteAllV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.DungeonLoadingCompleteAllV2Noti, RmiName_DungeonLoadingCompleteAllV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.DungeonLoadingCompleteAllV2Noti;
        summary.rmiName = RmiName_DungeonLoadingCompleteAllV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =DungeonLoadingCompleteAllV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_DungeonLoadingCompleteAllV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.DungeonLoadingCompleteAllV2Noti;
        summary.rmiName = RmiName_DungeonLoadingCompleteAllV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_DungeonLoadingCompleteV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.DungeonLoadingCompleteV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_DungeonLoadingCompleteV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.DungeonLoadingCompleteV2Res, RmiName_DungeonLoadingCompleteV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.DungeonLoadingCompleteV2Res;
        summary.rmiName = RmiName_DungeonLoadingCompleteV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =DungeonLoadingCompleteV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_DungeonLoadingCompleteV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.DungeonLoadingCompleteV2Res;
        summary.rmiName = RmiName_DungeonLoadingCompleteV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ExpDungeonClearNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ExpDungeonClearNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ExpDungeonClearNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ExpDungeonClearNoti, RmiName_ExpDungeonClearNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ExpDungeonClearNoti;
        summary.rmiName = RmiName_ExpDungeonClearNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ExpDungeonClearNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ExpDungeonClearNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ExpDungeonClearNoti;
        summary.rmiName = RmiName_ExpDungeonClearNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_EquipDungeonClearNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.EquipDungeonClearNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_EquipDungeonClearNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.EquipDungeonClearNoti, RmiName_EquipDungeonClearNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.EquipDungeonClearNoti;
        summary.rmiName = RmiName_EquipDungeonClearNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =EquipDungeonClearNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_EquipDungeonClearNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.EquipDungeonClearNoti;
        summary.rmiName = RmiName_EquipDungeonClearNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MineralDungeonClearNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.MineralDungeonClearNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_MineralDungeonClearNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.MineralDungeonClearNoti, RmiName_MineralDungeonClearNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MineralDungeonClearNoti;
        summary.rmiName = RmiName_MineralDungeonClearNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MineralDungeonClearNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MineralDungeonClearNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MineralDungeonClearNoti;
        summary.rmiName = RmiName_MineralDungeonClearNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyDungeonClearNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PartyDungeonClearNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyDungeonClearNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyDungeonClearNoti, RmiName_PartyDungeonClearNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyDungeonClearNoti;
        summary.rmiName = RmiName_PartyDungeonClearNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyDungeonClearNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyDungeonClearNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyDungeonClearNoti;
        summary.rmiName = RmiName_PartyDungeonClearNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_InteractStartRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.InteractStartRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_InteractStartRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.InteractStartRes, RmiName_InteractStartRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.InteractStartRes;
        summary.rmiName = RmiName_InteractStartRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =InteractStartRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_InteractStartRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.InteractStartRes;
        summary.rmiName = RmiName_InteractStartRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_InteractEndRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.InteractEndRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_InteractEndRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.InteractEndRes, RmiName_InteractEndRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.InteractEndRes;
        summary.rmiName = RmiName_InteractEndRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =InteractEndRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_InteractEndRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.InteractEndRes;
        summary.rmiName = RmiName_InteractEndRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_InteractCancelRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.InteractCancelRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_InteractCancelRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.InteractCancelRes, RmiName_InteractCancelRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.InteractCancelRes;
        summary.rmiName = RmiName_InteractCancelRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =InteractCancelRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_InteractCancelRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.InteractCancelRes;
        summary.rmiName = RmiName_InteractCancelRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_InteractNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.InteractNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_InteractNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.InteractNoti, RmiName_InteractNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.InteractNoti;
        summary.rmiName = RmiName_InteractNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =InteractNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_InteractNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.InteractNoti;
        summary.rmiName = RmiName_InteractNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_EquipmentVisibleV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.EquipmentVisibleV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_EquipmentVisibleV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.EquipmentVisibleV2Res, RmiName_EquipmentVisibleV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.EquipmentVisibleV2Res;
        summary.rmiName = RmiName_EquipmentVisibleV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =EquipmentVisibleV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_EquipmentVisibleV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.EquipmentVisibleV2Res;
        summary.rmiName = RmiName_EquipmentVisibleV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_InventoryChangeSizeV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.InventoryChangeSizeV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_InventoryChangeSizeV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.InventoryChangeSizeV2Res, RmiName_InventoryChangeSizeV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.InventoryChangeSizeV2Res;
        summary.rmiName = RmiName_InventoryChangeSizeV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =InventoryChangeSizeV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_InventoryChangeSizeV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.InventoryChangeSizeV2Res;
        summary.rmiName = RmiName_InventoryChangeSizeV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemAddOptionV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ItemAddOptionV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemAddOptionV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemAddOptionV2Res, RmiName_ItemAddOptionV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemAddOptionV2Res;
        summary.rmiName = RmiName_ItemAddOptionV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemAddOptionV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemAddOptionV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemAddOptionV2Res;
        summary.rmiName = RmiName_ItemAddOptionV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemAddV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ItemAddV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemAddV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemAddV2Noti, RmiName_ItemAddV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemAddV2Noti;
        summary.rmiName = RmiName_ItemAddV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemAddV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemAddV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemAddV2Noti;
        summary.rmiName = RmiName_ItemAddV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemChangeOptionV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ItemChangeOptionV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemChangeOptionV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemChangeOptionV2Res, RmiName_ItemChangeOptionV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemChangeOptionV2Res;
        summary.rmiName = RmiName_ItemChangeOptionV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemChangeOptionV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemChangeOptionV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemChangeOptionV2Res;
        summary.rmiName = RmiName_ItemChangeOptionV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemCollectionBookmarksRegisterV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ItemCollectionBookmarksRegisterV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemCollectionBookmarksRegisterV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemCollectionBookmarksRegisterV2Res, RmiName_ItemCollectionBookmarksRegisterV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemCollectionBookmarksRegisterV2Res;
        summary.rmiName = RmiName_ItemCollectionBookmarksRegisterV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemCollectionBookmarksRegisterV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemCollectionBookmarksRegisterV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemCollectionBookmarksRegisterV2Res;
        summary.rmiName = RmiName_ItemCollectionBookmarksRegisterV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemCollectionBookmarksUnregisterV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ItemCollectionBookmarksUnregisterV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemCollectionBookmarksUnregisterV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemCollectionBookmarksUnregisterV2Res, RmiName_ItemCollectionBookmarksUnregisterV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemCollectionBookmarksUnregisterV2Res;
        summary.rmiName = RmiName_ItemCollectionBookmarksUnregisterV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemCollectionBookmarksUnregisterV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemCollectionBookmarksUnregisterV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemCollectionBookmarksUnregisterV2Res;
        summary.rmiName = RmiName_ItemCollectionBookmarksUnregisterV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemCollectionListV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ItemCollectionListV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemCollectionListV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemCollectionListV2Noti, RmiName_ItemCollectionListV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemCollectionListV2Noti;
        summary.rmiName = RmiName_ItemCollectionListV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemCollectionListV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemCollectionListV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemCollectionListV2Noti;
        summary.rmiName = RmiName_ItemCollectionListV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemCollectionRegisterV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ItemCollectionRegisterV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemCollectionRegisterV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemCollectionRegisterV2Res, RmiName_ItemCollectionRegisterV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemCollectionRegisterV2Res;
        summary.rmiName = RmiName_ItemCollectionRegisterV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemCollectionRegisterV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemCollectionRegisterV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemCollectionRegisterV2Res;
        summary.rmiName = RmiName_ItemCollectionRegisterV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemCombineV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ItemCombineV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemCombineV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemCombineV2Res, RmiName_ItemCombineV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemCombineV2Res;
        summary.rmiName = RmiName_ItemCombineV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemCombineV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemCombineV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemCombineV2Res;
        summary.rmiName = RmiName_ItemCombineV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemDeleteV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ItemDeleteV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemDeleteV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemDeleteV2Noti, RmiName_ItemDeleteV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemDeleteV2Noti;
        summary.rmiName = RmiName_ItemDeleteV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemDeleteV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemDeleteV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemDeleteV2Noti;
        summary.rmiName = RmiName_ItemDeleteV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemDeleteV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ItemDeleteV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemDeleteV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemDeleteV2Res, RmiName_ItemDeleteV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemDeleteV2Res;
        summary.rmiName = RmiName_ItemDeleteV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemDeleteV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemDeleteV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemDeleteV2Res;
        summary.rmiName = RmiName_ItemDeleteV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemDisassembleV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ItemDisassembleV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemDisassembleV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemDisassembleV2Res, RmiName_ItemDisassembleV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemDisassembleV2Res;
        summary.rmiName = RmiName_ItemDisassembleV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemDisassembleV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemDisassembleV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemDisassembleV2Res;
        summary.rmiName = RmiName_ItemDisassembleV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemEnchantV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ItemEnchantV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemEnchantV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemEnchantV2Res, RmiName_ItemEnchantV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemEnchantV2Res;
        summary.rmiName = RmiName_ItemEnchantV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemEnchantV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemEnchantV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemEnchantV2Res;
        summary.rmiName = RmiName_ItemEnchantV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemEquipV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ItemEquipV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemEquipV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemEquipV2Noti, RmiName_ItemEquipV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemEquipV2Noti;
        summary.rmiName = RmiName_ItemEquipV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemEquipV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemEquipV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemEquipV2Noti;
        summary.rmiName = RmiName_ItemEquipV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemEquipV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ItemEquipV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemEquipV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemEquipV2Res, RmiName_ItemEquipV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemEquipV2Res;
        summary.rmiName = RmiName_ItemEquipV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemEquipV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemEquipV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemEquipV2Res;
        summary.rmiName = RmiName_ItemEquipV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemIntensionV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ItemIntensionV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemIntensionV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemIntensionV2Res, RmiName_ItemIntensionV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemIntensionV2Res;
        summary.rmiName = RmiName_ItemIntensionV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemIntensionV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemIntensionV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemIntensionV2Res;
        summary.rmiName = RmiName_ItemIntensionV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemMixOptionV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ItemMixOptionV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemMixOptionV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemMixOptionV2Res, RmiName_ItemMixOptionV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemMixOptionV2Res;
        summary.rmiName = RmiName_ItemMixOptionV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemMixOptionV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemMixOptionV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemMixOptionV2Res;
        summary.rmiName = RmiName_ItemMixOptionV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemPackageUseV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ItemPackageUseV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemPackageUseV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemPackageUseV2Res, RmiName_ItemPackageUseV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemPackageUseV2Res;
        summary.rmiName = RmiName_ItemPackageUseV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemPackageUseV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemPackageUseV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemPackageUseV2Res;
        summary.rmiName = RmiName_ItemPackageUseV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemProductionV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ItemProductionV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemProductionV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemProductionV2Res, RmiName_ItemProductionV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemProductionV2Res;
        summary.rmiName = RmiName_ItemProductionV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemProductionV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemProductionV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemProductionV2Res;
        summary.rmiName = RmiName_ItemProductionV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemSelectUseV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ItemSelectUseV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemSelectUseV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemSelectUseV2Res, RmiName_ItemSelectUseV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemSelectUseV2Res;
        summary.rmiName = RmiName_ItemSelectUseV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemSelectUseV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemSelectUseV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemSelectUseV2Res;
        summary.rmiName = RmiName_ItemSelectUseV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemUpdateV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ItemUpdateV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemUpdateV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemUpdateV2Noti, RmiName_ItemUpdateV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemUpdateV2Noti;
        summary.rmiName = RmiName_ItemUpdateV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemUpdateV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemUpdateV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemUpdateV2Noti;
        summary.rmiName = RmiName_ItemUpdateV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemUpgradeV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ItemUpgradeV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemUpgradeV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemUpgradeV2Res, RmiName_ItemUpgradeV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemUpgradeV2Res;
        summary.rmiName = RmiName_ItemUpgradeV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemUpgradeV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemUpgradeV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemUpgradeV2Res;
        summary.rmiName = RmiName_ItemUpgradeV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemUseV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ItemUseV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemUseV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemUseV2Res, RmiName_ItemUseV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemUseV2Res;
        summary.rmiName = RmiName_ItemUseV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemUseV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemUseV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemUseV2Res;
        summary.rmiName = RmiName_ItemUseV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PkLootingAddV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PkLootingAddV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PkLootingAddV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PkLootingAddV2Noti, RmiName_PkLootingAddV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PkLootingAddV2Noti;
        summary.rmiName = RmiName_PkLootingAddV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PkLootingAddV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PkLootingAddV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PkLootingAddV2Noti;
        summary.rmiName = RmiName_PkLootingAddV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PkLootingItemV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PkLootingItemV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PkLootingItemV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PkLootingItemV2Res, RmiName_PkLootingItemV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PkLootingItemV2Res;
        summary.rmiName = RmiName_PkLootingItemV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PkLootingItemV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PkLootingItemV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PkLootingItemV2Res;
        summary.rmiName = RmiName_PkLootingItemV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PkLootingListV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PkLootingListV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PkLootingListV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PkLootingListV2Res, RmiName_PkLootingListV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PkLootingListV2Res;
        summary.rmiName = RmiName_PkLootingListV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PkLootingListV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PkLootingListV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PkLootingListV2Res;
        summary.rmiName = RmiName_PkLootingListV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PkLootingV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PkLootingV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PkLootingV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PkLootingV2Noti, RmiName_PkLootingV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PkLootingV2Noti;
        summary.rmiName = RmiName_PkLootingV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PkLootingV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PkLootingV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PkLootingV2Noti;
        summary.rmiName = RmiName_PkLootingV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerInventoryExtendInfoNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerInventoryExtendInfoNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerInventoryExtendInfoNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerInventoryExtendInfoNoti, RmiName_PlayerInventoryExtendInfoNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerInventoryExtendInfoNoti;
        summary.rmiName = RmiName_PlayerInventoryExtendInfoNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerInventoryExtendInfoNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerInventoryExtendInfoNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerInventoryExtendInfoNoti;
        summary.rmiName = RmiName_PlayerInventoryExtendInfoNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerInventoryInfoV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerInventoryInfoV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerInventoryInfoV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerInventoryInfoV2Noti, RmiName_PlayerInventoryInfoV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerInventoryInfoV2Noti;
        summary.rmiName = RmiName_PlayerInventoryInfoV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerInventoryInfoV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerInventoryInfoV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerInventoryInfoV2Noti;
        summary.rmiName = RmiName_PlayerInventoryInfoV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_WarehouseChangeSizeV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.WarehouseChangeSizeV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_WarehouseChangeSizeV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.WarehouseChangeSizeV2Res, RmiName_WarehouseChangeSizeV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.WarehouseChangeSizeV2Res;
        summary.rmiName = RmiName_WarehouseChangeSizeV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =WarehouseChangeSizeV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_WarehouseChangeSizeV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.WarehouseChangeSizeV2Res;
        summary.rmiName = RmiName_WarehouseChangeSizeV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_WarehouseInfoV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.WarehouseInfoV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_WarehouseInfoV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.WarehouseInfoV2Res, RmiName_WarehouseInfoV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.WarehouseInfoV2Res;
        summary.rmiName = RmiName_WarehouseInfoV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =WarehouseInfoV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_WarehouseInfoV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.WarehouseInfoV2Res;
        summary.rmiName = RmiName_WarehouseInfoV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_WarehouseItemMoveV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.WarehouseItemMoveV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_WarehouseItemMoveV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.WarehouseItemMoveV2Res, RmiName_WarehouseItemMoveV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.WarehouseItemMoveV2Res;
        summary.rmiName = RmiName_WarehouseItemMoveV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =WarehouseItemMoveV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_WarehouseItemMoveV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.WarehouseItemMoveV2Res;
        summary.rmiName = RmiName_WarehouseItemMoveV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemIntentionSucceedNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ItemIntentionSucceedNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemIntentionSucceedNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemIntentionSucceedNoti, RmiName_ItemIntentionSucceedNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemIntentionSucceedNoti;
        summary.rmiName = RmiName_ItemIntentionSucceedNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemIntentionSucceedNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemIntentionSucceedNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemIntentionSucceedNoti;
        summary.rmiName = RmiName_ItemIntentionSucceedNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemSetLockRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ItemSetLockRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemSetLockRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemSetLockRes, RmiName_ItemSetLockRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemSetLockRes;
        summary.rmiName = RmiName_ItemSetLockRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemSetLockRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemSetLockRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemSetLockRes;
        summary.rmiName = RmiName_ItemSetLockRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemMarketPriceRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ItemMarketPriceRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemMarketPriceRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemMarketPriceRes, RmiName_ItemMarketPriceRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemMarketPriceRes;
        summary.rmiName = RmiName_ItemMarketPriceRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemMarketPriceRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemMarketPriceRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemMarketPriceRes;
        summary.rmiName = RmiName_ItemMarketPriceRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemInheritRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ItemInheritRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemInheritRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemInheritRes, RmiName_ItemInheritRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemInheritRes;
        summary.rmiName = RmiName_ItemInheritRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemInheritRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemInheritRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemInheritRes;
        summary.rmiName = RmiName_ItemInheritRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MailListV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.MailListV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_MailListV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.MailListV2Res, RmiName_MailListV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MailListV2Res;
        summary.rmiName = RmiName_MailListV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MailListV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MailListV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MailListV2Res;
        summary.rmiName = RmiName_MailListV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MailReadAllV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.MailReadAllV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_MailReadAllV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.MailReadAllV2Res, RmiName_MailReadAllV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MailReadAllV2Res;
        summary.rmiName = RmiName_MailReadAllV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MailReadAllV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MailReadAllV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MailReadAllV2Res;
        summary.rmiName = RmiName_MailReadAllV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MailReadV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.MailReadV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_MailReadV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.MailReadV2Res, RmiName_MailReadV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MailReadV2Res;
        summary.rmiName = RmiName_MailReadV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MailReadV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MailReadV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MailReadV2Res;
        summary.rmiName = RmiName_MailReadV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MatchingApplyRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.MatchingApplyRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_MatchingApplyRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.MatchingApplyRes, RmiName_MatchingApplyRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MatchingApplyRes;
        summary.rmiName = RmiName_MatchingApplyRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MatchingApplyRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MatchingApplyRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MatchingApplyRes;
        summary.rmiName = RmiName_MatchingApplyRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MatchingCancelRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.MatchingCancelRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_MatchingCancelRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.MatchingCancelRes, RmiName_MatchingCancelRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MatchingCancelRes;
        summary.rmiName = RmiName_MatchingCancelRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MatchingCancelRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MatchingCancelRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MatchingCancelRes;
        summary.rmiName = RmiName_MatchingCancelRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MatchingCompleteNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.MatchingCompleteNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_MatchingCompleteNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.MatchingCompleteNoti, RmiName_MatchingCompleteNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MatchingCompleteNoti;
        summary.rmiName = RmiName_MatchingCompleteNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MatchingCompleteNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MatchingCompleteNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MatchingCompleteNoti;
        summary.rmiName = RmiName_MatchingCompleteNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MatchingIncompleteNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.MatchingIncompleteNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_MatchingIncompleteNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.MatchingIncompleteNoti, RmiName_MatchingIncompleteNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MatchingIncompleteNoti;
        summary.rmiName = RmiName_MatchingIncompleteNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MatchingIncompleteNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MatchingIncompleteNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MatchingIncompleteNoti;
        summary.rmiName = RmiName_MatchingIncompleteNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MatchingMatchedNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.MatchingMatchedNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_MatchingMatchedNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.MatchingMatchedNoti, RmiName_MatchingMatchedNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MatchingMatchedNoti;
        summary.rmiName = RmiName_MatchingMatchedNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MatchingMatchedNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MatchingMatchedNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MatchingMatchedNoti;
        summary.rmiName = RmiName_MatchingMatchedNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MatchingRejectReplyNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.MatchingRejectReplyNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_MatchingRejectReplyNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.MatchingRejectReplyNoti, RmiName_MatchingRejectReplyNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MatchingRejectReplyNoti;
        summary.rmiName = RmiName_MatchingRejectReplyNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MatchingRejectReplyNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MatchingRejectReplyNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MatchingRejectReplyNoti;
        summary.rmiName = RmiName_MatchingRejectReplyNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MatchingReplyNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.MatchingReplyNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_MatchingReplyNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.MatchingReplyNoti, RmiName_MatchingReplyNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MatchingReplyNoti;
        summary.rmiName = RmiName_MatchingReplyNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MatchingReplyNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MatchingReplyNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MatchingReplyNoti;
        summary.rmiName = RmiName_MatchingReplyNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MatchingReplyRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.MatchingReplyRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_MatchingReplyRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.MatchingReplyRes, RmiName_MatchingReplyRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MatchingReplyRes;
        summary.rmiName = RmiName_MatchingReplyRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MatchingReplyRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MatchingReplyRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MatchingReplyRes;
        summary.rmiName = RmiName_MatchingReplyRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AuthenticatePlayerCredentialRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.AuthenticatePlayerCredentialRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_AuthenticatePlayerCredentialRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.AuthenticatePlayerCredentialRes, RmiName_AuthenticatePlayerCredentialRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AuthenticatePlayerCredentialRes;
        summary.rmiName = RmiName_AuthenticatePlayerCredentialRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AuthenticatePlayerCredentialRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AuthenticatePlayerCredentialRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AuthenticatePlayerCredentialRes;
        summary.rmiName = RmiName_AuthenticatePlayerCredentialRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BindStonesNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.BindStonesNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_BindStonesNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.BindStonesNoti, RmiName_BindStonesNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BindStonesNoti;
        summary.rmiName = RmiName_BindStonesNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BindStonesNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BindStonesNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BindStonesNoti;
        summary.rmiName = RmiName_BindStonesNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BroadCastContextNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.BroadCastContextNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_BroadCastContextNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.BroadCastContextNoti, RmiName_BroadCastContextNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BroadCastContextNoti;
        summary.rmiName = RmiName_BroadCastContextNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BroadCastContextNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BroadCastContextNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BroadCastContextNoti;
        summary.rmiName = RmiName_BroadCastContextNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BroadCastContextRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.BroadCastContextRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_BroadCastContextRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.BroadCastContextRes, RmiName_BroadCastContextRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BroadCastContextRes;
        summary.rmiName = RmiName_BroadCastContextRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BroadCastContextRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BroadCastContextRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BroadCastContextRes;
        summary.rmiName = RmiName_BroadCastContextRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CutSceneEndV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.CutSceneEndV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CutSceneEndV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CutSceneEndV2Res, RmiName_CutSceneEndV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CutSceneEndV2Res;
        summary.rmiName = RmiName_CutSceneEndV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CutSceneEndV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CutSceneEndV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CutSceneEndV2Res;
        summary.rmiName = RmiName_CutSceneEndV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CutSceneStartV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.CutSceneStartV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CutSceneStartV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CutSceneStartV2Res, RmiName_CutSceneStartV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CutSceneStartV2Res;
        summary.rmiName = RmiName_CutSceneStartV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CutSceneStartV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CutSceneStartV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CutSceneStartV2Res;
        summary.rmiName = RmiName_CutSceneStartV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CutSceneStateV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.CutSceneStateV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CutSceneStateV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CutSceneStateV2Noti, RmiName_CutSceneStateV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CutSceneStateV2Noti;
        summary.rmiName = RmiName_CutSceneStateV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CutSceneStateV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CutSceneStateV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CutSceneStateV2Noti;
        summary.rmiName = RmiName_CutSceneStateV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_DebugPlayerStateV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.DebugPlayerStateV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_DebugPlayerStateV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.DebugPlayerStateV2Noti, RmiName_DebugPlayerStateV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.DebugPlayerStateV2Noti;
        summary.rmiName = RmiName_DebugPlayerStateV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =DebugPlayerStateV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_DebugPlayerStateV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.DebugPlayerStateV2Noti;
        summary.rmiName = RmiName_DebugPlayerStateV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_LogOutRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.LogOutRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_LogOutRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.LogOutRes, RmiName_LogOutRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.LogOutRes;
        summary.rmiName = RmiName_LogOutRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =LogOutRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_LogOutRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.LogOutRes;
        summary.rmiName = RmiName_LogOutRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PortalV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PortalV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PortalV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PortalV2Res, RmiName_PortalV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PortalV2Res;
        summary.rmiName = RmiName_PortalV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PortalV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PortalV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PortalV2Res;
        summary.rmiName = RmiName_PortalV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReturnToLobbyRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ReturnToLobbyRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ReturnToLobbyRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ReturnToLobbyRes, RmiName_ReturnToLobbyRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReturnToLobbyRes;
        summary.rmiName = RmiName_ReturnToLobbyRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReturnToLobbyRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReturnToLobbyRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReturnToLobbyRes;
        summary.rmiName = RmiName_ReturnToLobbyRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ServerTimeV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ServerTimeV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ServerTimeV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ServerTimeV2Res, RmiName_ServerTimeV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ServerTimeV2Res;
        summary.rmiName = RmiName_ServerTimeV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ServerTimeV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ServerTimeV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ServerTimeV2Res;
        summary.rmiName = RmiName_ServerTimeV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SystemMessageV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.SystemMessageV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_SystemMessageV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.SystemMessageV2Noti, RmiName_SystemMessageV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SystemMessageV2Noti;
        summary.rmiName = RmiName_SystemMessageV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SystemMessageV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SystemMessageV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SystemMessageV2Noti;
        summary.rmiName = RmiName_SystemMessageV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TemporalFluxZoneEnterNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TemporalFluxZoneEnterNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TemporalFluxZoneEnterNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TemporalFluxZoneEnterNoti, RmiName_TemporalFluxZoneEnterNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TemporalFluxZoneEnterNoti;
        summary.rmiName = RmiName_TemporalFluxZoneEnterNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TemporalFluxZoneEnterNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TemporalFluxZoneEnterNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TemporalFluxZoneEnterNoti;
        summary.rmiName = RmiName_TemporalFluxZoneEnterNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TemporalFluxZoneExitNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TemporalFluxZoneExitNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TemporalFluxZoneExitNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TemporalFluxZoneExitNoti, RmiName_TemporalFluxZoneExitNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TemporalFluxZoneExitNoti;
        summary.rmiName = RmiName_TemporalFluxZoneExitNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TemporalFluxZoneExitNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TemporalFluxZoneExitNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TemporalFluxZoneExitNoti;
        summary.rmiName = RmiName_TemporalFluxZoneExitNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TestPacketV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TestPacketV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TestPacketV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TestPacketV2Noti, RmiName_TestPacketV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TestPacketV2Noti;
        summary.rmiName = RmiName_TestPacketV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TestPacketV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TestPacketV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TestPacketV2Noti;
        summary.rmiName = RmiName_TestPacketV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TestPacketV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TestPacketV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TestPacketV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TestPacketV2Res, RmiName_TestPacketV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TestPacketV2Res;
        summary.rmiName = RmiName_TestPacketV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TestPacketV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TestPacketV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TestPacketV2Res;
        summary.rmiName = RmiName_TestPacketV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TicketInfoV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TicketInfoV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TicketInfoV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TicketInfoV2Noti, RmiName_TicketInfoV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TicketInfoV2Noti;
        summary.rmiName = RmiName_TicketInfoV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TicketInfoV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TicketInfoV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TicketInfoV2Noti;
        summary.rmiName = RmiName_TicketInfoV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TriggerActivateMapMoveV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TriggerActivateMapMoveV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TriggerActivateMapMoveV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TriggerActivateMapMoveV2Noti, RmiName_TriggerActivateMapMoveV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TriggerActivateMapMoveV2Noti;
        summary.rmiName = RmiName_TriggerActivateMapMoveV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TriggerActivateMapMoveV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TriggerActivateMapMoveV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TriggerActivateMapMoveV2Noti;
        summary.rmiName = RmiName_TriggerActivateMapMoveV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TriggerActivateV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TriggerActivateV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TriggerActivateV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TriggerActivateV2Res, RmiName_TriggerActivateV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TriggerActivateV2Res;
        summary.rmiName = RmiName_TriggerActivateV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TriggerActivateV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TriggerActivateV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TriggerActivateV2Res;
        summary.rmiName = RmiName_TriggerActivateV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_UnionV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.UnionV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_UnionV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.UnionV2Res, RmiName_UnionV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.UnionV2Res;
        summary.rmiName = RmiName_UnionV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =UnionV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_UnionV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.UnionV2Res;
        summary.rmiName = RmiName_UnionV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ZoneLoadingCompletedRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ZoneLoadingCompletedRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ZoneLoadingCompletedRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ZoneLoadingCompletedRes, RmiName_ZoneLoadingCompletedRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ZoneLoadingCompletedRes;
        summary.rmiName = RmiName_ZoneLoadingCompletedRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ZoneLoadingCompletedRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ZoneLoadingCompletedRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ZoneLoadingCompletedRes;
        summary.rmiName = RmiName_ZoneLoadingCompletedRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BossDamagedInfoNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.BossDamagedInfoNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_BossDamagedInfoNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.BossDamagedInfoNoti, RmiName_BossDamagedInfoNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BossDamagedInfoNoti;
        summary.rmiName = RmiName_BossDamagedInfoNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BossDamagedInfoNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BossDamagedInfoNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BossDamagedInfoNoti;
        summary.rmiName = RmiName_BossDamagedInfoNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BossFirstDamagedNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.BossFirstDamagedNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_BossFirstDamagedNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.BossFirstDamagedNoti, RmiName_BossFirstDamagedNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BossFirstDamagedNoti;
        summary.rmiName = RmiName_BossFirstDamagedNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BossFirstDamagedNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BossFirstDamagedNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BossFirstDamagedNoti;
        summary.rmiName = RmiName_BossFirstDamagedNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BossKilledNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.BossKilledNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_BossKilledNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.BossKilledNoti, RmiName_BossKilledNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BossKilledNoti;
        summary.rmiName = RmiName_BossKilledNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BossKilledNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BossKilledNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BossKilledNoti;
        summary.rmiName = RmiName_BossKilledNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BossKilledRewardNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.BossKilledRewardNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_BossKilledRewardNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.BossKilledRewardNoti, RmiName_BossKilledRewardNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BossKilledRewardNoti;
        summary.rmiName = RmiName_BossKilledRewardNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BossKilledRewardNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BossKilledRewardNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BossKilledRewardNoti;
        summary.rmiName = RmiName_BossKilledRewardNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GainMessageNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GainMessageNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GainMessageNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GainMessageNoti, RmiName_GainMessageNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GainMessageNoti;
        summary.rmiName = RmiName_GainMessageNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GainMessageNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GainMessageNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GainMessageNoti;
        summary.rmiName = RmiName_GainMessageNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TicketUpdateNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TicketUpdateNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TicketUpdateNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TicketUpdateNoti, RmiName_TicketUpdateNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TicketUpdateNoti;
        summary.rmiName = RmiName_TicketUpdateNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TicketUpdateNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TicketUpdateNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TicketUpdateNoti;
        summary.rmiName = RmiName_TicketUpdateNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BossDamagedInfoRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.BossDamagedInfoRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_BossDamagedInfoRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.BossDamagedInfoRes, RmiName_BossDamagedInfoRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BossDamagedInfoRes;
        summary.rmiName = RmiName_BossDamagedInfoRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BossDamagedInfoRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BossDamagedInfoRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BossDamagedInfoRes;
        summary.rmiName = RmiName_BossDamagedInfoRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_WorldBossDamagedInfoNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.WorldBossDamagedInfoNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_WorldBossDamagedInfoNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.WorldBossDamagedInfoNoti, RmiName_WorldBossDamagedInfoNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.WorldBossDamagedInfoNoti;
        summary.rmiName = RmiName_WorldBossDamagedInfoNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =WorldBossDamagedInfoNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_WorldBossDamagedInfoNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.WorldBossDamagedInfoNoti;
        summary.rmiName = RmiName_WorldBossDamagedInfoNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BossTakenDamageOnPlayerKillNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.BossTakenDamageOnPlayerKillNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_BossTakenDamageOnPlayerKillNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.BossTakenDamageOnPlayerKillNoti, RmiName_BossTakenDamageOnPlayerKillNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BossTakenDamageOnPlayerKillNoti;
        summary.rmiName = RmiName_BossTakenDamageOnPlayerKillNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BossTakenDamageOnPlayerKillNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BossTakenDamageOnPlayerKillNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BossTakenDamageOnPlayerKillNoti;
        summary.rmiName = RmiName_BossTakenDamageOnPlayerKillNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyChangeLootingNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PartyChangeLootingNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyChangeLootingNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyChangeLootingNoti, RmiName_PartyChangeLootingNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyChangeLootingNoti;
        summary.rmiName = RmiName_PartyChangeLootingNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyChangeLootingNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyChangeLootingNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyChangeLootingNoti;
        summary.rmiName = RmiName_PartyChangeLootingNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyChangeLootingRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PartyChangeLootingRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyChangeLootingRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyChangeLootingRes, RmiName_PartyChangeLootingRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyChangeLootingRes;
        summary.rmiName = RmiName_PartyChangeLootingRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyChangeLootingRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyChangeLootingRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyChangeLootingRes;
        summary.rmiName = RmiName_PartyChangeLootingRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyCreateRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PartyCreateRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyCreateRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyCreateRes, RmiName_PartyCreateRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyCreateRes;
        summary.rmiName = RmiName_PartyCreateRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyCreateRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyCreateRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyCreateRes;
        summary.rmiName = RmiName_PartyCreateRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyDisbandNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PartyDisbandNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyDisbandNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyDisbandNoti, RmiName_PartyDisbandNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyDisbandNoti;
        summary.rmiName = RmiName_PartyDisbandNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyDisbandNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyDisbandNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyDisbandNoti;
        summary.rmiName = RmiName_PartyDisbandNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyDisbandRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PartyDisbandRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyDisbandRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyDisbandRes, RmiName_PartyDisbandRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyDisbandRes;
        summary.rmiName = RmiName_PartyDisbandRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyDisbandRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyDisbandRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyDisbandRes;
        summary.rmiName = RmiName_PartyDisbandRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyDungeonEntranceInquiryRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PartyDungeonEntranceInquiryRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyDungeonEntranceInquiryRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyDungeonEntranceInquiryRes, RmiName_PartyDungeonEntranceInquiryRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyDungeonEntranceInquiryRes;
        summary.rmiName = RmiName_PartyDungeonEntranceInquiryRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyDungeonEntranceInquiryRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyDungeonEntranceInquiryRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyDungeonEntranceInquiryRes;
        summary.rmiName = RmiName_PartyDungeonEntranceInquiryRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyEnterDungeonCanceledNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PartyEnterDungeonCanceledNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyEnterDungeonCanceledNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyEnterDungeonCanceledNoti, RmiName_PartyEnterDungeonCanceledNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyEnterDungeonCanceledNoti;
        summary.rmiName = RmiName_PartyEnterDungeonCanceledNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyEnterDungeonCanceledNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyEnterDungeonCanceledNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyEnterDungeonCanceledNoti;
        summary.rmiName = RmiName_PartyEnterDungeonCanceledNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyEnterDungeonNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PartyEnterDungeonNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyEnterDungeonNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyEnterDungeonNoti, RmiName_PartyEnterDungeonNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyEnterDungeonNoti;
        summary.rmiName = RmiName_PartyEnterDungeonNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyEnterDungeonNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyEnterDungeonNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyEnterDungeonNoti;
        summary.rmiName = RmiName_PartyEnterDungeonNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyEnterDungeonReplyNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PartyEnterDungeonReplyNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyEnterDungeonReplyNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyEnterDungeonReplyNoti, RmiName_PartyEnterDungeonReplyNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyEnterDungeonReplyNoti;
        summary.rmiName = RmiName_PartyEnterDungeonReplyNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyEnterDungeonReplyNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyEnterDungeonReplyNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyEnterDungeonReplyNoti;
        summary.rmiName = RmiName_PartyEnterDungeonReplyNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyEnterDungeonReplyRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PartyEnterDungeonReplyRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyEnterDungeonReplyRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyEnterDungeonReplyRes, RmiName_PartyEnterDungeonReplyRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyEnterDungeonReplyRes;
        summary.rmiName = RmiName_PartyEnterDungeonReplyRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyEnterDungeonReplyRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyEnterDungeonReplyRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyEnterDungeonReplyRes;
        summary.rmiName = RmiName_PartyEnterDungeonReplyRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyEnterDungeonRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PartyEnterDungeonRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyEnterDungeonRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyEnterDungeonRes, RmiName_PartyEnterDungeonRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyEnterDungeonRes;
        summary.rmiName = RmiName_PartyEnterDungeonRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyEnterDungeonRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyEnterDungeonRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyEnterDungeonRes;
        summary.rmiName = RmiName_PartyEnterDungeonRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyEnterNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PartyEnterNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyEnterNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyEnterNoti, RmiName_PartyEnterNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyEnterNoti;
        summary.rmiName = RmiName_PartyEnterNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyEnterNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyEnterNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyEnterNoti;
        summary.rmiName = RmiName_PartyEnterNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyInfoNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PartyInfoNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyInfoNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyInfoNoti, RmiName_PartyInfoNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyInfoNoti;
        summary.rmiName = RmiName_PartyInfoNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyInfoNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyInfoNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyInfoNoti;
        summary.rmiName = RmiName_PartyInfoNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyInfoRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PartyInfoRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyInfoRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyInfoRes, RmiName_PartyInfoRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyInfoRes;
        summary.rmiName = RmiName_PartyInfoRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyInfoRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyInfoRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyInfoRes;
        summary.rmiName = RmiName_PartyInfoRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyInviteNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PartyInviteNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyInviteNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyInviteNoti, RmiName_PartyInviteNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyInviteNoti;
        summary.rmiName = RmiName_PartyInviteNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyInviteNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyInviteNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyInviteNoti;
        summary.rmiName = RmiName_PartyInviteNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyInviteReplyNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PartyInviteReplyNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyInviteReplyNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyInviteReplyNoti, RmiName_PartyInviteReplyNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyInviteReplyNoti;
        summary.rmiName = RmiName_PartyInviteReplyNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyInviteReplyNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyInviteReplyNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyInviteReplyNoti;
        summary.rmiName = RmiName_PartyInviteReplyNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyInviteReplyRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PartyInviteReplyRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyInviteReplyRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyInviteReplyRes, RmiName_PartyInviteReplyRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyInviteReplyRes;
        summary.rmiName = RmiName_PartyInviteReplyRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyInviteReplyRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyInviteReplyRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyInviteReplyRes;
        summary.rmiName = RmiName_PartyInviteReplyRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyInviteRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PartyInviteRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyInviteRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyInviteRes, RmiName_PartyInviteRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyInviteRes;
        summary.rmiName = RmiName_PartyInviteRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyInviteRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyInviteRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyInviteRes;
        summary.rmiName = RmiName_PartyInviteRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyKickedNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PartyKickedNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyKickedNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyKickedNoti, RmiName_PartyKickedNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyKickedNoti;
        summary.rmiName = RmiName_PartyKickedNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyKickedNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyKickedNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyKickedNoti;
        summary.rmiName = RmiName_PartyKickedNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyLeaderChangeNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PartyLeaderChangeNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyLeaderChangeNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyLeaderChangeNoti, RmiName_PartyLeaderChangeNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyLeaderChangeNoti;
        summary.rmiName = RmiName_PartyLeaderChangeNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyLeaderChangeNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyLeaderChangeNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyLeaderChangeNoti;
        summary.rmiName = RmiName_PartyLeaderChangeNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyLeaderChangeRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PartyLeaderChangeRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyLeaderChangeRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyLeaderChangeRes, RmiName_PartyLeaderChangeRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyLeaderChangeRes;
        summary.rmiName = RmiName_PartyLeaderChangeRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyLeaderChangeRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyLeaderChangeRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyLeaderChangeRes;
        summary.rmiName = RmiName_PartyLeaderChangeRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyLeaveNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PartyLeaveNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyLeaveNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyLeaveNoti, RmiName_PartyLeaveNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyLeaveNoti;
        summary.rmiName = RmiName_PartyLeaveNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyLeaveNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyLeaveNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyLeaveNoti;
        summary.rmiName = RmiName_PartyLeaveNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyLeaveRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PartyLeaveRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyLeaveRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyLeaveRes, RmiName_PartyLeaveRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyLeaveRes;
        summary.rmiName = RmiName_PartyLeaveRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyLeaveRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyLeaveRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyLeaveRes;
        summary.rmiName = RmiName_PartyLeaveRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyMemberKickNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PartyMemberKickNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyMemberKickNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyMemberKickNoti, RmiName_PartyMemberKickNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyMemberKickNoti;
        summary.rmiName = RmiName_PartyMemberKickNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyMemberKickNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyMemberKickNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyMemberKickNoti;
        summary.rmiName = RmiName_PartyMemberKickNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyMemberKickRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PartyMemberKickRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyMemberKickRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyMemberKickRes, RmiName_PartyMemberKickRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyMemberKickRes;
        summary.rmiName = RmiName_PartyMemberKickRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyMemberKickRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyMemberKickRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyMemberKickRes;
        summary.rmiName = RmiName_PartyMemberKickRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyMemberUpdateNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PartyMemberUpdateNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyMemberUpdateNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyMemberUpdateNoti, RmiName_PartyMemberUpdateNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyMemberUpdateNoti;
        summary.rmiName = RmiName_PartyMemberUpdateNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyMemberUpdateNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyMemberUpdateNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyMemberUpdateNoti;
        summary.rmiName = RmiName_PartyMemberUpdateNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartySuggestionPlayersRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PartySuggestionPlayersRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartySuggestionPlayersRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartySuggestionPlayersRes, RmiName_PartySuggestionPlayersRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartySuggestionPlayersRes;
        summary.rmiName = RmiName_PartySuggestionPlayersRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartySuggestionPlayersRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartySuggestionPlayersRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartySuggestionPlayersRes;
        summary.rmiName = RmiName_PartySuggestionPlayersRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyEnterDungeonCanceledRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PartyEnterDungeonCanceledRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyEnterDungeonCanceledRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyEnterDungeonCanceledRes, RmiName_PartyEnterDungeonCanceledRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyEnterDungeonCanceledRes;
        summary.rmiName = RmiName_PartyEnterDungeonCanceledRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyEnterDungeonCanceledRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyEnterDungeonCanceledRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyEnterDungeonCanceledRes;
        summary.rmiName = RmiName_PartyEnterDungeonCanceledRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PetCollectInfoV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PetCollectInfoV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PetCollectInfoV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PetCollectInfoV2Res, RmiName_PetCollectInfoV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PetCollectInfoV2Res;
        summary.rmiName = RmiName_PetCollectInfoV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PetCollectInfoV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PetCollectInfoV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PetCollectInfoV2Res;
        summary.rmiName = RmiName_PetCollectInfoV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PetEquipOffV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PetEquipOffV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PetEquipOffV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PetEquipOffV2Noti, RmiName_PetEquipOffV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PetEquipOffV2Noti;
        summary.rmiName = RmiName_PetEquipOffV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PetEquipOffV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PetEquipOffV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PetEquipOffV2Noti;
        summary.rmiName = RmiName_PetEquipOffV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PetEquipOffV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PetEquipOffV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PetEquipOffV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PetEquipOffV2Res, RmiName_PetEquipOffV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PetEquipOffV2Res;
        summary.rmiName = RmiName_PetEquipOffV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PetEquipOffV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PetEquipOffV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PetEquipOffV2Res;
        summary.rmiName = RmiName_PetEquipOffV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PetEquipV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PetEquipV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PetEquipV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PetEquipV2Noti, RmiName_PetEquipV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PetEquipV2Noti;
        summary.rmiName = RmiName_PetEquipV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PetEquipV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PetEquipV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PetEquipV2Noti;
        summary.rmiName = RmiName_PetEquipV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PetEquipV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PetEquipV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PetEquipV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PetEquipV2Res, RmiName_PetEquipV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PetEquipV2Res;
        summary.rmiName = RmiName_PetEquipV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PetEquipV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PetEquipV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PetEquipV2Res;
        summary.rmiName = RmiName_PetEquipV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PetFeedUseV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PetFeedUseV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PetFeedUseV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PetFeedUseV2Res, RmiName_PetFeedUseV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PetFeedUseV2Res;
        summary.rmiName = RmiName_PetFeedUseV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PetFeedUseV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PetFeedUseV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PetFeedUseV2Res;
        summary.rmiName = RmiName_PetFeedUseV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PetGachaV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PetGachaV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PetGachaV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PetGachaV2Res, RmiName_PetGachaV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PetGachaV2Res;
        summary.rmiName = RmiName_PetGachaV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PetGachaV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PetGachaV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PetGachaV2Res;
        summary.rmiName = RmiName_PetGachaV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PetInfoV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PetInfoV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PetInfoV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PetInfoV2Res, RmiName_PetInfoV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PetInfoV2Res;
        summary.rmiName = RmiName_PetInfoV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PetInfoV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PetInfoV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PetInfoV2Res;
        summary.rmiName = RmiName_PetInfoV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PetMixV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PetMixV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PetMixV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PetMixV2Res, RmiName_PetMixV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PetMixV2Res;
        summary.rmiName = RmiName_PetMixV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PetMixV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PetMixV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PetMixV2Res;
        summary.rmiName = RmiName_PetMixV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PetUpgradeV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PetUpgradeV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PetUpgradeV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PetUpgradeV2Res, RmiName_PetUpgradeV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PetUpgradeV2Res;
        summary.rmiName = RmiName_PetUpgradeV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PetUpgradeV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PetUpgradeV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PetUpgradeV2Res;
        summary.rmiName = RmiName_PetUpgradeV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PetInActiveBuffRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PetInActiveBuffRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PetInActiveBuffRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PetInActiveBuffRes, RmiName_PetInActiveBuffRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PetInActiveBuffRes;
        summary.rmiName = RmiName_PetInActiveBuffRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PetInActiveBuffRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PetInActiveBuffRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PetInActiveBuffRes;
        summary.rmiName = RmiName_PetInActiveBuffRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PhaseFieldEndV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PhaseFieldEndV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PhaseFieldEndV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PhaseFieldEndV2Res, RmiName_PhaseFieldEndV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PhaseFieldEndV2Res;
        summary.rmiName = RmiName_PhaseFieldEndV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PhaseFieldEndV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PhaseFieldEndV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PhaseFieldEndV2Res;
        summary.rmiName = RmiName_PhaseFieldEndV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PhaseFieldStartV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PhaseFieldStartV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PhaseFieldStartV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PhaseFieldStartV2Res, RmiName_PhaseFieldStartV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PhaseFieldStartV2Res;
        summary.rmiName = RmiName_PhaseFieldStartV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PhaseFieldStartV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PhaseFieldStartV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PhaseFieldStartV2Res;
        summary.rmiName = RmiName_PhaseFieldStartV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerCrimeV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerCrimeV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerCrimeV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerCrimeV2Noti, RmiName_PlayerCrimeV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerCrimeV2Noti;
        summary.rmiName = RmiName_PlayerCrimeV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerCrimeV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerCrimeV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerCrimeV2Noti;
        summary.rmiName = RmiName_PlayerCrimeV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerDeleteRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerDeleteRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerDeleteRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerDeleteRes, RmiName_PlayerDeleteRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerDeleteRes;
        summary.rmiName = RmiName_PlayerDeleteRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerDeleteRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerDeleteRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerDeleteRes;
        summary.rmiName = RmiName_PlayerDeleteRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerEventV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerEventV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerEventV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerEventV2Noti, RmiName_PlayerEventV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerEventV2Noti;
        summary.rmiName = RmiName_PlayerEventV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerEventV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerEventV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerEventV2Noti;
        summary.rmiName = RmiName_PlayerEventV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerExpChangeV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerExpChangeV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerExpChangeV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerExpChangeV2Noti, RmiName_PlayerExpChangeV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerExpChangeV2Noti;
        summary.rmiName = RmiName_PlayerExpChangeV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerExpChangeV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerExpChangeV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerExpChangeV2Noti;
        summary.rmiName = RmiName_PlayerExpChangeV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerGetMacroRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerGetMacroRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerGetMacroRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerGetMacroRes, RmiName_PlayerGetMacroRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerGetMacroRes;
        summary.rmiName = RmiName_PlayerGetMacroRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerGetMacroRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerGetMacroRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerGetMacroRes;
        summary.rmiName = RmiName_PlayerGetMacroRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerLootingV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerLootingV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerLootingV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerLootingV2Noti, RmiName_PlayerLootingV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerLootingV2Noti;
        summary.rmiName = RmiName_PlayerLootingV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerLootingV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerLootingV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerLootingV2Noti;
        summary.rmiName = RmiName_PlayerLootingV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerMapMoveV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerMapMoveV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerMapMoveV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerMapMoveV2Res, RmiName_PlayerMapMoveV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerMapMoveV2Res;
        summary.rmiName = RmiName_PlayerMapMoveV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerMapMoveV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerMapMoveV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerMapMoveV2Res;
        summary.rmiName = RmiName_PlayerMapMoveV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerMoveV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerMoveV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerMoveV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerMoveV2Noti, RmiName_PlayerMoveV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerMoveV2Noti;
        summary.rmiName = RmiName_PlayerMoveV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerMoveV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerMoveV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerMoveV2Noti;
        summary.rmiName = RmiName_PlayerMoveV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerMoveV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerMoveV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerMoveV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerMoveV2Res, RmiName_PlayerMoveV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerMoveV2Res;
        summary.rmiName = RmiName_PlayerMoveV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerMoveV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerMoveV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerMoveV2Res;
        summary.rmiName = RmiName_PlayerMoveV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerTendencyNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerTendencyNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerTendencyNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerTendencyNoti, RmiName_PlayerTendencyNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerTendencyNoti;
        summary.rmiName = RmiName_PlayerTendencyNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerTendencyNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerTendencyNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerTendencyNoti;
        summary.rmiName = RmiName_PlayerTendencyNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerPvpValueNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerPvpValueNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerPvpValueNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerPvpValueNoti, RmiName_PlayerPvpValueNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerPvpValueNoti;
        summary.rmiName = RmiName_PlayerPvpValueNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerPvpValueNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerPvpValueNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerPvpValueNoti;
        summary.rmiName = RmiName_PlayerPvpValueNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerResurrectionV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerResurrectionV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerResurrectionV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerResurrectionV2Noti, RmiName_PlayerResurrectionV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerResurrectionV2Noti;
        summary.rmiName = RmiName_PlayerResurrectionV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerResurrectionV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerResurrectionV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerResurrectionV2Noti;
        summary.rmiName = RmiName_PlayerResurrectionV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerResurrectionV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerResurrectionV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerResurrectionV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerResurrectionV2Res, RmiName_PlayerResurrectionV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerResurrectionV2Res;
        summary.rmiName = RmiName_PlayerResurrectionV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerResurrectionV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerResurrectionV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerResurrectionV2Res;
        summary.rmiName = RmiName_PlayerResurrectionV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerSetMacroRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerSetMacroRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerSetMacroRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerSetMacroRes, RmiName_PlayerSetMacroRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerSetMacroRes;
        summary.rmiName = RmiName_PlayerSetMacroRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerSetMacroRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerSetMacroRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerSetMacroRes;
        summary.rmiName = RmiName_PlayerSetMacroRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerStatChangeV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerStatChangeV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerStatChangeV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerStatChangeV2Noti, RmiName_PlayerStatChangeV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerStatChangeV2Noti;
        summary.rmiName = RmiName_PlayerStatChangeV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerStatChangeV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerStatChangeV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerStatChangeV2Noti;
        summary.rmiName = RmiName_PlayerStatChangeV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerStatPointChangeV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerStatPointChangeV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerStatPointChangeV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerStatPointChangeV2Noti, RmiName_PlayerStatPointChangeV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerStatPointChangeV2Noti;
        summary.rmiName = RmiName_PlayerStatPointChangeV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerStatPointChangeV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerStatPointChangeV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerStatPointChangeV2Noti;
        summary.rmiName = RmiName_PlayerStatPointChangeV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerStatPointChangeV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerStatPointChangeV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerStatPointChangeV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerStatPointChangeV2Res, RmiName_PlayerStatPointChangeV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerStatPointChangeV2Res;
        summary.rmiName = RmiName_PlayerStatPointChangeV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerStatPointChangeV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerStatPointChangeV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerStatPointChangeV2Res;
        summary.rmiName = RmiName_PlayerStatPointChangeV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerStatPointInitV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerStatPointInitV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerStatPointInitV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerStatPointInitV2Res, RmiName_PlayerStatPointInitV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerStatPointInitV2Res;
        summary.rmiName = RmiName_PlayerStatPointInitV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerStatPointInitV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerStatPointInitV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerStatPointInitV2Res;
        summary.rmiName = RmiName_PlayerStatPointInitV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerStatV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerStatV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerStatV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerStatV2Res, RmiName_PlayerStatV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerStatV2Res;
        summary.rmiName = RmiName_PlayerStatV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerStatV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerStatV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerStatV2Res;
        summary.rmiName = RmiName_PlayerStatV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerWalletUpdateV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerWalletUpdateV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerWalletUpdateV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerWalletUpdateV2Noti, RmiName_PlayerWalletUpdateV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerWalletUpdateV2Noti;
        summary.rmiName = RmiName_PlayerWalletUpdateV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerWalletUpdateV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerWalletUpdateV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerWalletUpdateV2Noti;
        summary.rmiName = RmiName_PlayerWalletUpdateV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerWalletV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerWalletV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerWalletV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerWalletV2Noti, RmiName_PlayerWalletV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerWalletV2Noti;
        summary.rmiName = RmiName_PlayerWalletV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerWalletV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerWalletV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerWalletV2Noti;
        summary.rmiName = RmiName_PlayerWalletV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerWantedV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerWantedV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerWantedV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerWantedV2Noti, RmiName_PlayerWantedV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerWantedV2Noti;
        summary.rmiName = RmiName_PlayerWantedV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerWantedV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerWantedV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerWantedV2Noti;
        summary.rmiName = RmiName_PlayerWantedV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerDeathInfoRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerDeathInfoRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerDeathInfoRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerDeathInfoRes, RmiName_PlayerDeathInfoRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerDeathInfoRes;
        summary.rmiName = RmiName_PlayerDeathInfoRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerDeathInfoRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerDeathInfoRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerDeathInfoRes;
        summary.rmiName = RmiName_PlayerDeathInfoRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RecoverPlayerExpRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.RecoverPlayerExpRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RecoverPlayerExpRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RecoverPlayerExpRes, RmiName_RecoverPlayerExpRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RecoverPlayerExpRes;
        summary.rmiName = RmiName_RecoverPlayerExpRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RecoverPlayerExpRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RecoverPlayerExpRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RecoverPlayerExpRes;
        summary.rmiName = RmiName_RecoverPlayerExpRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerCombatCapabilityNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerCombatCapabilityNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerCombatCapabilityNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerCombatCapabilityNoti, RmiName_PlayerCombatCapabilityNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerCombatCapabilityNoti;
        summary.rmiName = RmiName_PlayerCombatCapabilityNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerCombatCapabilityNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerCombatCapabilityNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerCombatCapabilityNoti;
        summary.rmiName = RmiName_PlayerCombatCapabilityNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerClassUpV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerClassUpV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerClassUpV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerClassUpV2Res, RmiName_PlayerClassUpV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerClassUpV2Res;
        summary.rmiName = RmiName_PlayerClassUpV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerClassUpV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerClassUpV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerClassUpV2Res;
        summary.rmiName = RmiName_PlayerClassUpV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_QuickslotSetRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.QuickslotSetRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_QuickslotSetRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.QuickslotSetRes, RmiName_QuickslotSetRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.QuickslotSetRes;
        summary.rmiName = RmiName_QuickslotSetRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =QuickslotSetRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_QuickslotSetRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.QuickslotSetRes;
        summary.rmiName = RmiName_QuickslotSetRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_QuickslotListNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.QuickslotListNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_QuickslotListNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.QuickslotListNoti, RmiName_QuickslotListNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.QuickslotListNoti;
        summary.rmiName = RmiName_QuickslotListNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =QuickslotListNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_QuickslotListNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.QuickslotListNoti;
        summary.rmiName = RmiName_QuickslotListNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MembershipAddNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.MembershipAddNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_MembershipAddNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.MembershipAddNoti, RmiName_MembershipAddNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MembershipAddNoti;
        summary.rmiName = RmiName_MembershipAddNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MembershipAddNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MembershipAddNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MembershipAddNoti;
        summary.rmiName = RmiName_MembershipAddNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MembershipUpdateNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.MembershipUpdateNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_MembershipUpdateNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.MembershipUpdateNoti, RmiName_MembershipUpdateNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MembershipUpdateNoti;
        summary.rmiName = RmiName_MembershipUpdateNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MembershipUpdateNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MembershipUpdateNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MembershipUpdateNoti;
        summary.rmiName = RmiName_MembershipUpdateNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MembershipListNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.MembershipListNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_MembershipListNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.MembershipListNoti, RmiName_MembershipListNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MembershipListNoti;
        summary.rmiName = RmiName_MembershipListNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MembershipListNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MembershipListNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MembershipListNoti;
        summary.rmiName = RmiName_MembershipListNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerExpRecoveryPopupRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerExpRecoveryPopupRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerExpRecoveryPopupRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerExpRecoveryPopupRes, RmiName_PlayerExpRecoveryPopupRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerExpRecoveryPopupRes;
        summary.rmiName = RmiName_PlayerExpRecoveryPopupRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerExpRecoveryPopupRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerExpRecoveryPopupRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerExpRecoveryPopupRes;
        summary.rmiName = RmiName_PlayerExpRecoveryPopupRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RTTPlayerMoveV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.RTTPlayerMoveV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RTTPlayerMoveV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RTTPlayerMoveV2Res, RmiName_RTTPlayerMoveV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RTTPlayerMoveV2Res;
        summary.rmiName = RmiName_RTTPlayerMoveV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RTTPlayerMoveV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RTTPlayerMoveV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RTTPlayerMoveV2Res;
        summary.rmiName = RmiName_RTTPlayerMoveV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CheatGetQuestV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.CheatGetQuestV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CheatGetQuestV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CheatGetQuestV2Noti, RmiName_CheatGetQuestV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CheatGetQuestV2Noti;
        summary.rmiName = RmiName_CheatGetQuestV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CheatGetQuestV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CheatGetQuestV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CheatGetQuestV2Noti;
        summary.rmiName = RmiName_CheatGetQuestV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_DailyQuestOpenV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.DailyQuestOpenV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_DailyQuestOpenV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.DailyQuestOpenV2Noti, RmiName_DailyQuestOpenV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.DailyQuestOpenV2Noti;
        summary.rmiName = RmiName_DailyQuestOpenV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =DailyQuestOpenV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_DailyQuestOpenV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.DailyQuestOpenV2Noti;
        summary.rmiName = RmiName_DailyQuestOpenV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerQuestProgressV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerQuestProgressV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerQuestProgressV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerQuestProgressV2Noti, RmiName_PlayerQuestProgressV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerQuestProgressV2Noti;
        summary.rmiName = RmiName_PlayerQuestProgressV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerQuestProgressV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerQuestProgressV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerQuestProgressV2Noti;
        summary.rmiName = RmiName_PlayerQuestProgressV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_QuestAbandonV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.QuestAbandonV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_QuestAbandonV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.QuestAbandonV2Res, RmiName_QuestAbandonV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.QuestAbandonV2Res;
        summary.rmiName = RmiName_QuestAbandonV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =QuestAbandonV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_QuestAbandonV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.QuestAbandonV2Res;
        summary.rmiName = RmiName_QuestAbandonV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_QuestAcceptV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.QuestAcceptV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_QuestAcceptV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.QuestAcceptV2Res, RmiName_QuestAcceptV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.QuestAcceptV2Res;
        summary.rmiName = RmiName_QuestAcceptV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =QuestAcceptV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_QuestAcceptV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.QuestAcceptV2Res;
        summary.rmiName = RmiName_QuestAcceptV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_QuestCompleteV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.QuestCompleteV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_QuestCompleteV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.QuestCompleteV2Res, RmiName_QuestCompleteV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.QuestCompleteV2Res;
        summary.rmiName = RmiName_QuestCompleteV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =QuestCompleteV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_QuestCompleteV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.QuestCompleteV2Res;
        summary.rmiName = RmiName_QuestCompleteV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_QuestConditionCompleteV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.QuestConditionCompleteV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_QuestConditionCompleteV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.QuestConditionCompleteV2Res, RmiName_QuestConditionCompleteV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.QuestConditionCompleteV2Res;
        summary.rmiName = RmiName_QuestConditionCompleteV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =QuestConditionCompleteV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_QuestConditionCompleteV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.QuestConditionCompleteV2Res;
        summary.rmiName = RmiName_QuestConditionCompleteV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_QuestListV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.QuestListV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_QuestListV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.QuestListV2Res, RmiName_QuestListV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.QuestListV2Res;
        summary.rmiName = RmiName_QuestListV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =QuestListV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_QuestListV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.QuestListV2Res;
        summary.rmiName = RmiName_QuestListV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_QuestPortalV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.QuestPortalV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_QuestPortalV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.QuestPortalV2Res, RmiName_QuestPortalV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.QuestPortalV2Res;
        summary.rmiName = RmiName_QuestPortalV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =QuestPortalV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_QuestPortalV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.QuestPortalV2Res;
        summary.rmiName = RmiName_QuestPortalV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_QuestRegisterV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.QuestRegisterV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_QuestRegisterV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.QuestRegisterV2Res, RmiName_QuestRegisterV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.QuestRegisterV2Res;
        summary.rmiName = RmiName_QuestRegisterV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =QuestRegisterV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_QuestRegisterV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.QuestRegisterV2Res;
        summary.rmiName = RmiName_QuestRegisterV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_QuestRerollV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.QuestRerollV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_QuestRerollV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.QuestRerollV2Res, RmiName_QuestRerollV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.QuestRerollV2Res;
        summary.rmiName = RmiName_QuestRerollV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =QuestRerollV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_QuestRerollV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.QuestRerollV2Res;
        summary.rmiName = RmiName_QuestRerollV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_QuestResetCheatV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.QuestResetCheatV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_QuestResetCheatV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.QuestResetCheatV2Noti, RmiName_QuestResetCheatV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.QuestResetCheatV2Noti;
        summary.rmiName = RmiName_QuestResetCheatV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =QuestResetCheatV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_QuestResetCheatV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.QuestResetCheatV2Noti;
        summary.rmiName = RmiName_QuestResetCheatV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_QuestRewardV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.QuestRewardV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_QuestRewardV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.QuestRewardV2Res, RmiName_QuestRewardV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.QuestRewardV2Res;
        summary.rmiName = RmiName_QuestRewardV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =QuestRewardV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_QuestRewardV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.QuestRewardV2Res;
        summary.rmiName = RmiName_QuestRewardV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_QuestTalkCompleteV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.QuestTalkCompleteV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_QuestTalkCompleteV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.QuestTalkCompleteV2Res, RmiName_QuestTalkCompleteV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.QuestTalkCompleteV2Res;
        summary.rmiName = RmiName_QuestTalkCompleteV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =QuestTalkCompleteV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_QuestTalkCompleteV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.QuestTalkCompleteV2Res;
        summary.rmiName = RmiName_QuestTalkCompleteV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ResetDailyQuestV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ResetDailyQuestV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ResetDailyQuestV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ResetDailyQuestV2Noti, RmiName_ResetDailyQuestV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ResetDailyQuestV2Noti;
        summary.rmiName = RmiName_ResetDailyQuestV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ResetDailyQuestV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ResetDailyQuestV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ResetDailyQuestV2Noti;
        summary.rmiName = RmiName_ResetDailyQuestV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TutorialSkipV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TutorialSkipV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TutorialSkipV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TutorialSkipV2Res, RmiName_TutorialSkipV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TutorialSkipV2Res;
        summary.rmiName = RmiName_TutorialSkipV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TutorialSkipV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TutorialSkipV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TutorialSkipV2Res;
        summary.rmiName = RmiName_TutorialSkipV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildRelationRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GuildRelationRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildRelationRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildRelationRes, RmiName_GuildRelationRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildRelationRes;
        summary.rmiName = RmiName_GuildRelationRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildRelationRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildRelationRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildRelationRes;
        summary.rmiName = RmiName_GuildRelationRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerRelationRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.PlayerRelationRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerRelationRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerRelationRes, RmiName_PlayerRelationRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerRelationRes;
        summary.rmiName = RmiName_PlayerRelationRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerRelationRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerRelationRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerRelationRes;
        summary.rmiName = RmiName_PlayerRelationRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RelationsNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.RelationsNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RelationsNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RelationsNoti, RmiName_RelationsNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RelationsNoti;
        summary.rmiName = RmiName_RelationsNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RelationsNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RelationsNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RelationsNoti;
        summary.rmiName = RmiName_RelationsNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RideAttachDeleteV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.RideAttachDeleteV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RideAttachDeleteV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RideAttachDeleteV2Res, RmiName_RideAttachDeleteV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RideAttachDeleteV2Res;
        summary.rmiName = RmiName_RideAttachDeleteV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RideAttachDeleteV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RideAttachDeleteV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RideAttachDeleteV2Res;
        summary.rmiName = RmiName_RideAttachDeleteV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RideAttachDisassembleV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.RideAttachDisassembleV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RideAttachDisassembleV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RideAttachDisassembleV2Res, RmiName_RideAttachDisassembleV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RideAttachDisassembleV2Res;
        summary.rmiName = RmiName_RideAttachDisassembleV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RideAttachDisassembleV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RideAttachDisassembleV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RideAttachDisassembleV2Res;
        summary.rmiName = RmiName_RideAttachDisassembleV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RideAttachEquipOffV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.RideAttachEquipOffV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RideAttachEquipOffV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RideAttachEquipOffV2Noti, RmiName_RideAttachEquipOffV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RideAttachEquipOffV2Noti;
        summary.rmiName = RmiName_RideAttachEquipOffV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RideAttachEquipOffV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RideAttachEquipOffV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RideAttachEquipOffV2Noti;
        summary.rmiName = RmiName_RideAttachEquipOffV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RideAttachEquipOffV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.RideAttachEquipOffV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RideAttachEquipOffV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RideAttachEquipOffV2Res, RmiName_RideAttachEquipOffV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RideAttachEquipOffV2Res;
        summary.rmiName = RmiName_RideAttachEquipOffV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RideAttachEquipOffV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RideAttachEquipOffV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RideAttachEquipOffV2Res;
        summary.rmiName = RmiName_RideAttachEquipOffV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RideAttachEquipV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.RideAttachEquipV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RideAttachEquipV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RideAttachEquipV2Noti, RmiName_RideAttachEquipV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RideAttachEquipV2Noti;
        summary.rmiName = RmiName_RideAttachEquipV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RideAttachEquipV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RideAttachEquipV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RideAttachEquipV2Noti;
        summary.rmiName = RmiName_RideAttachEquipV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RideAttachEquipV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.RideAttachEquipV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RideAttachEquipV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RideAttachEquipV2Res, RmiName_RideAttachEquipV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RideAttachEquipV2Res;
        summary.rmiName = RmiName_RideAttachEquipV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RideAttachEquipV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RideAttachEquipV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RideAttachEquipV2Res;
        summary.rmiName = RmiName_RideAttachEquipV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RideAttachGachaV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.RideAttachGachaV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RideAttachGachaV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RideAttachGachaV2Res, RmiName_RideAttachGachaV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RideAttachGachaV2Res;
        summary.rmiName = RmiName_RideAttachGachaV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RideAttachGachaV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RideAttachGachaV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RideAttachGachaV2Res;
        summary.rmiName = RmiName_RideAttachGachaV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RideAttachInvenExtendV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.RideAttachInvenExtendV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RideAttachInvenExtendV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RideAttachInvenExtendV2Res, RmiName_RideAttachInvenExtendV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RideAttachInvenExtendV2Res;
        summary.rmiName = RmiName_RideAttachInvenExtendV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RideAttachInvenExtendV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RideAttachInvenExtendV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RideAttachInvenExtendV2Res;
        summary.rmiName = RmiName_RideAttachInvenExtendV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RideCollectInfosNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.RideCollectInfosNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RideCollectInfosNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RideCollectInfosNoti, RmiName_RideCollectInfosNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RideCollectInfosNoti;
        summary.rmiName = RmiName_RideCollectInfosNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RideCollectInfosNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RideCollectInfosNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RideCollectInfosNoti;
        summary.rmiName = RmiName_RideCollectInfosNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RideEquipOffV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.RideEquipOffV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RideEquipOffV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RideEquipOffV2Res, RmiName_RideEquipOffV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RideEquipOffV2Res;
        summary.rmiName = RmiName_RideEquipOffV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RideEquipOffV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RideEquipOffV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RideEquipOffV2Res;
        summary.rmiName = RmiName_RideEquipOffV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RideEquipV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.RideEquipV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RideEquipV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RideEquipV2Res, RmiName_RideEquipV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RideEquipV2Res;
        summary.rmiName = RmiName_RideEquipV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RideEquipV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RideEquipV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RideEquipV2Res;
        summary.rmiName = RmiName_RideEquipV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RideGachaV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.RideGachaV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RideGachaV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RideGachaV2Res, RmiName_RideGachaV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RideGachaV2Res;
        summary.rmiName = RmiName_RideGachaV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RideGachaV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RideGachaV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RideGachaV2Res;
        summary.rmiName = RmiName_RideGachaV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RideInfosNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.RideInfosNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RideInfosNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RideInfosNoti, RmiName_RideInfosNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RideInfosNoti;
        summary.rmiName = RmiName_RideInfosNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RideInfosNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RideInfosNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RideInfosNoti;
        summary.rmiName = RmiName_RideInfosNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RideMixV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.RideMixV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RideMixV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RideMixV2Res, RmiName_RideMixV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RideMixV2Res;
        summary.rmiName = RmiName_RideMixV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RideMixV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RideMixV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RideMixV2Res;
        summary.rmiName = RmiName_RideMixV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RideSitOffV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.RideSitOffV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RideSitOffV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RideSitOffV2Noti, RmiName_RideSitOffV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RideSitOffV2Noti;
        summary.rmiName = RmiName_RideSitOffV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RideSitOffV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RideSitOffV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RideSitOffV2Noti;
        summary.rmiName = RmiName_RideSitOffV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RideSitOffV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.RideSitOffV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RideSitOffV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RideSitOffV2Res, RmiName_RideSitOffV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RideSitOffV2Res;
        summary.rmiName = RmiName_RideSitOffV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RideSitOffV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RideSitOffV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RideSitOffV2Res;
        summary.rmiName = RmiName_RideSitOffV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RideSitV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.RideSitV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RideSitV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RideSitV2Noti, RmiName_RideSitV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RideSitV2Noti;
        summary.rmiName = RmiName_RideSitV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RideSitV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RideSitV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RideSitV2Noti;
        summary.rmiName = RmiName_RideSitV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RideSitV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.RideSitV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RideSitV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RideSitV2Res, RmiName_RideSitV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RideSitV2Res;
        summary.rmiName = RmiName_RideSitV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RideSitV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RideSitV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RideSitV2Res;
        summary.rmiName = RmiName_RideSitV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BuyCashShopItemV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.BuyCashShopItemV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_BuyCashShopItemV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.BuyCashShopItemV2Res, RmiName_BuyCashShopItemV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BuyCashShopItemV2Res;
        summary.rmiName = RmiName_BuyCashShopItemV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BuyCashShopItemV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BuyCashShopItemV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BuyCashShopItemV2Res;
        summary.rmiName = RmiName_BuyCashShopItemV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BuyGameShopItemV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.BuyGameShopItemV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_BuyGameShopItemV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.BuyGameShopItemV2Res, RmiName_BuyGameShopItemV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BuyGameShopItemV2Res;
        summary.rmiName = RmiName_BuyGameShopItemV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BuyGameShopItemV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BuyGameShopItemV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BuyGameShopItemV2Res;
        summary.rmiName = RmiName_BuyGameShopItemV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GameShopSellItemV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GameShopSellItemV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GameShopSellItemV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GameShopSellItemV2Res, RmiName_GameShopSellItemV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GameShopSellItemV2Res;
        summary.rmiName = RmiName_GameShopSellItemV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GameShopSellItemV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GameShopSellItemV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GameShopSellItemV2Res;
        summary.rmiName = RmiName_GameShopSellItemV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ShopBuyCountListNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ShopBuyCountListNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ShopBuyCountListNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ShopBuyCountListNoti, RmiName_ShopBuyCountListNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ShopBuyCountListNoti;
        summary.rmiName = RmiName_ShopBuyCountListNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ShopBuyCountListNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ShopBuyCountListNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ShopBuyCountListNoti;
        summary.rmiName = RmiName_ShopBuyCountListNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ChangedSiegeWarMatchInfoV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ChangedSiegeWarMatchInfoV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ChangedSiegeWarMatchInfoV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ChangedSiegeWarMatchInfoV2Noti, RmiName_ChangedSiegeWarMatchInfoV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ChangedSiegeWarMatchInfoV2Noti;
        summary.rmiName = RmiName_ChangedSiegeWarMatchInfoV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ChangedSiegeWarMatchInfoV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ChangedSiegeWarMatchInfoV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ChangedSiegeWarMatchInfoV2Noti;
        summary.rmiName = RmiName_ChangedSiegeWarMatchInfoV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ChangeSiegeModeV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ChangeSiegeModeV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ChangeSiegeModeV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ChangeSiegeModeV2Res, RmiName_ChangeSiegeModeV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ChangeSiegeModeV2Res;
        summary.rmiName = RmiName_ChangeSiegeModeV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ChangeSiegeModeV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ChangeSiegeModeV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ChangeSiegeModeV2Res;
        summary.rmiName = RmiName_ChangeSiegeModeV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ChangeSiegeWarInfoV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ChangeSiegeWarInfoV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ChangeSiegeWarInfoV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ChangeSiegeWarInfoV2Noti, RmiName_ChangeSiegeWarInfoV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ChangeSiegeWarInfoV2Noti;
        summary.rmiName = RmiName_ChangeSiegeWarInfoV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ChangeSiegeWarInfoV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ChangeSiegeWarInfoV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ChangeSiegeWarInfoV2Noti;
        summary.rmiName = RmiName_ChangeSiegeWarInfoV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ChangeSiegeWarObjectInfoV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ChangeSiegeWarObjectInfoV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ChangeSiegeWarObjectInfoV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ChangeSiegeWarObjectInfoV2Noti, RmiName_ChangeSiegeWarObjectInfoV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ChangeSiegeWarObjectInfoV2Noti;
        summary.rmiName = RmiName_ChangeSiegeWarObjectInfoV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ChangeSiegeWarObjectInfoV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ChangeSiegeWarObjectInfoV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ChangeSiegeWarObjectInfoV2Noti;
        summary.rmiName = RmiName_ChangeSiegeWarObjectInfoV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ChoiceSiegeWarFactionV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ChoiceSiegeWarFactionV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ChoiceSiegeWarFactionV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ChoiceSiegeWarFactionV2Res, RmiName_ChoiceSiegeWarFactionV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ChoiceSiegeWarFactionV2Res;
        summary.rmiName = RmiName_ChoiceSiegeWarFactionV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ChoiceSiegeWarFactionV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ChoiceSiegeWarFactionV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ChoiceSiegeWarFactionV2Res;
        summary.rmiName = RmiName_ChoiceSiegeWarFactionV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CreatedDungeonSiegeWarV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.CreatedDungeonSiegeWarV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CreatedDungeonSiegeWarV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CreatedDungeonSiegeWarV2Noti, RmiName_CreatedDungeonSiegeWarV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CreatedDungeonSiegeWarV2Noti;
        summary.rmiName = RmiName_CreatedDungeonSiegeWarV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CreatedDungeonSiegeWarV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CreatedDungeonSiegeWarV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CreatedDungeonSiegeWarV2Noti;
        summary.rmiName = RmiName_CreatedDungeonSiegeWarV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_DungeonSiegeWarClearV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.DungeonSiegeWarClearV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_DungeonSiegeWarClearV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.DungeonSiegeWarClearV2Noti, RmiName_DungeonSiegeWarClearV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.DungeonSiegeWarClearV2Noti;
        summary.rmiName = RmiName_DungeonSiegeWarClearV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =DungeonSiegeWarClearV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_DungeonSiegeWarClearV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.DungeonSiegeWarClearV2Noti;
        summary.rmiName = RmiName_DungeonSiegeWarClearV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GetSiegeWarInfoV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GetSiegeWarInfoV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GetSiegeWarInfoV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GetSiegeWarInfoV2Res, RmiName_GetSiegeWarInfoV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GetSiegeWarInfoV2Res;
        summary.rmiName = RmiName_GetSiegeWarInfoV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GetSiegeWarInfoV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GetSiegeWarInfoV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GetSiegeWarInfoV2Res;
        summary.rmiName = RmiName_GetSiegeWarInfoV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GetSiegeWarMatchInfoV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.GetSiegeWarMatchInfoV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GetSiegeWarMatchInfoV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GetSiegeWarMatchInfoV2Res, RmiName_GetSiegeWarMatchInfoV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GetSiegeWarMatchInfoV2Res;
        summary.rmiName = RmiName_GetSiegeWarMatchInfoV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GetSiegeWarMatchInfoV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GetSiegeWarMatchInfoV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GetSiegeWarMatchInfoV2Res;
        summary.rmiName = RmiName_GetSiegeWarMatchInfoV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ShowLocalizationV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ShowLocalizationV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ShowLocalizationV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ShowLocalizationV2Noti, RmiName_ShowLocalizationV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ShowLocalizationV2Noti;
        summary.rmiName = RmiName_ShowLocalizationV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ShowLocalizationV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ShowLocalizationV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ShowLocalizationV2Noti;
        summary.rmiName = RmiName_ShowLocalizationV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ActorChangeBattleModeV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ActorChangeBattleModeV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ActorChangeBattleModeV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ActorChangeBattleModeV2Noti, RmiName_ActorChangeBattleModeV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ActorChangeBattleModeV2Noti;
        summary.rmiName = RmiName_ActorChangeBattleModeV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ActorChangeBattleModeV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ActorChangeBattleModeV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ActorChangeBattleModeV2Noti;
        summary.rmiName = RmiName_ActorChangeBattleModeV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BuffListInfoV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.BuffListInfoV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_BuffListInfoV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.BuffListInfoV2Res, RmiName_BuffListInfoV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BuffListInfoV2Res;
        summary.rmiName = RmiName_BuffListInfoV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BuffListInfoV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BuffListInfoV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BuffListInfoV2Res;
        summary.rmiName = RmiName_BuffListInfoV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SkillChangeAutoUseV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.SkillChangeAutoUseV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_SkillChangeAutoUseV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.SkillChangeAutoUseV2Res, RmiName_SkillChangeAutoUseV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SkillChangeAutoUseV2Res;
        summary.rmiName = RmiName_SkillChangeAutoUseV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SkillChangeAutoUseV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SkillChangeAutoUseV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SkillChangeAutoUseV2Res;
        summary.rmiName = RmiName_SkillChangeAutoUseV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SkillChangePresetV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.SkillChangePresetV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_SkillChangePresetV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.SkillChangePresetV2Res, RmiName_SkillChangePresetV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SkillChangePresetV2Res;
        summary.rmiName = RmiName_SkillChangePresetV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SkillChangePresetV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SkillChangePresetV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SkillChangePresetV2Res;
        summary.rmiName = RmiName_SkillChangePresetV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SkillDotEffectV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.SkillDotEffectV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_SkillDotEffectV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.SkillDotEffectV2Noti, RmiName_SkillDotEffectV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SkillDotEffectV2Noti;
        summary.rmiName = RmiName_SkillDotEffectV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SkillDotEffectV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SkillDotEffectV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SkillDotEffectV2Noti;
        summary.rmiName = RmiName_SkillDotEffectV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SkillEquipV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.SkillEquipV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_SkillEquipV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.SkillEquipV2Res, RmiName_SkillEquipV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SkillEquipV2Res;
        summary.rmiName = RmiName_SkillEquipV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SkillEquipV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SkillEquipV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SkillEquipV2Res;
        summary.rmiName = RmiName_SkillEquipV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SkillHitEffectV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.SkillHitEffectV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_SkillHitEffectV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.SkillHitEffectV2Noti, RmiName_SkillHitEffectV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SkillHitEffectV2Noti;
        summary.rmiName = RmiName_SkillHitEffectV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SkillHitEffectV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SkillHitEffectV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SkillHitEffectV2Noti;
        summary.rmiName = RmiName_SkillHitEffectV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SkillHitV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.SkillHitV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_SkillHitV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.SkillHitV2Noti, RmiName_SkillHitV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SkillHitV2Noti;
        summary.rmiName = RmiName_SkillHitV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SkillHitV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SkillHitV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SkillHitV2Noti;
        summary.rmiName = RmiName_SkillHitV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SkillHitV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.SkillHitV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_SkillHitV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.SkillHitV2Res, RmiName_SkillHitV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SkillHitV2Res;
        summary.rmiName = RmiName_SkillHitV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SkillHitV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SkillHitV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SkillHitV2Res;
        summary.rmiName = RmiName_SkillHitV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SkillLearnV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.SkillLearnV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_SkillLearnV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.SkillLearnV2Res, RmiName_SkillLearnV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SkillLearnV2Res;
        summary.rmiName = RmiName_SkillLearnV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SkillLearnV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SkillLearnV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SkillLearnV2Res;
        summary.rmiName = RmiName_SkillLearnV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SkillLevelUpV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.SkillLevelUpV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_SkillLevelUpV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.SkillLevelUpV2Res, RmiName_SkillLevelUpV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SkillLevelUpV2Res;
        summary.rmiName = RmiName_SkillLevelUpV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SkillLevelUpV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SkillLevelUpV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SkillLevelUpV2Res;
        summary.rmiName = RmiName_SkillLevelUpV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SkillListInfoV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.SkillListInfoV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_SkillListInfoV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.SkillListInfoV2Res, RmiName_SkillListInfoV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SkillListInfoV2Res;
        summary.rmiName = RmiName_SkillListInfoV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SkillListInfoV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SkillListInfoV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SkillListInfoV2Res;
        summary.rmiName = RmiName_SkillListInfoV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SkillPreActionEndV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.SkillPreActionEndV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_SkillPreActionEndV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.SkillPreActionEndV2Noti, RmiName_SkillPreActionEndV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SkillPreActionEndV2Noti;
        summary.rmiName = RmiName_SkillPreActionEndV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SkillPreActionEndV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SkillPreActionEndV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SkillPreActionEndV2Noti;
        summary.rmiName = RmiName_SkillPreActionEndV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SkillPresetInfosNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.SkillPresetInfosNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_SkillPresetInfosNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.SkillPresetInfosNoti, RmiName_SkillPresetInfosNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SkillPresetInfosNoti;
        summary.rmiName = RmiName_SkillPresetInfosNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SkillPresetInfosNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SkillPresetInfosNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SkillPresetInfosNoti;
        summary.rmiName = RmiName_SkillPresetInfosNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SkillUnEquipV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.SkillUnEquipV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_SkillUnEquipV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.SkillUnEquipV2Res, RmiName_SkillUnEquipV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SkillUnEquipV2Res;
        summary.rmiName = RmiName_SkillUnEquipV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SkillUnEquipV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SkillUnEquipV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SkillUnEquipV2Res;
        summary.rmiName = RmiName_SkillUnEquipV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SkillUpgradeV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.SkillUpgradeV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_SkillUpgradeV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.SkillUpgradeV2Res, RmiName_SkillUpgradeV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SkillUpgradeV2Res;
        summary.rmiName = RmiName_SkillUpgradeV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SkillUpgradeV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SkillUpgradeV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SkillUpgradeV2Res;
        summary.rmiName = RmiName_SkillUpgradeV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SkillUseV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.SkillUseV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_SkillUseV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.SkillUseV2Noti, RmiName_SkillUseV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SkillUseV2Noti;
        summary.rmiName = RmiName_SkillUseV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SkillUseV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SkillUseV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SkillUseV2Noti;
        summary.rmiName = RmiName_SkillUseV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SkillUseV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.SkillUseV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_SkillUseV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.SkillUseV2Res, RmiName_SkillUseV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SkillUseV2Res;
        summary.rmiName = RmiName_SkillUseV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SkillUseV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SkillUseV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SkillUseV2Res;
        summary.rmiName = RmiName_SkillUseV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SkillDotHealEffectV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.SkillDotHealEffectV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_SkillDotHealEffectV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.SkillDotHealEffectV2Noti, RmiName_SkillDotHealEffectV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SkillDotHealEffectV2Noti;
        summary.rmiName = RmiName_SkillDotHealEffectV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SkillDotHealEffectV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SkillDotHealEffectV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SkillDotHealEffectV2Noti;
        summary.rmiName = RmiName_SkillDotHealEffectV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RTTSkillUseV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.RTTSkillUseV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RTTSkillUseV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RTTSkillUseV2Res, RmiName_RTTSkillUseV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RTTSkillUseV2Res;
        summary.rmiName = RmiName_RTTSkillUseV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RTTSkillUseV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RTTSkillUseV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RTTSkillUseV2Res;
        summary.rmiName = RmiName_RTTSkillUseV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RTTSkillHitV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.RTTSkillHitV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RTTSkillHitV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RTTSkillHitV2Res, RmiName_RTTSkillHitV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RTTSkillHitV2Res;
        summary.rmiName = RmiName_RTTSkillHitV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RTTSkillHitV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RTTSkillHitV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RTTSkillHitV2Res;
        summary.rmiName = RmiName_RTTSkillHitV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TitleAddV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TitleAddV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TitleAddV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TitleAddV2Noti, RmiName_TitleAddV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TitleAddV2Noti;
        summary.rmiName = RmiName_TitleAddV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TitleAddV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TitleAddV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TitleAddV2Noti;
        summary.rmiName = RmiName_TitleAddV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TitleChangeV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TitleChangeV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TitleChangeV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TitleChangeV2Noti, RmiName_TitleChangeV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TitleChangeV2Noti;
        summary.rmiName = RmiName_TitleChangeV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TitleChangeV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TitleChangeV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TitleChangeV2Noti;
        summary.rmiName = RmiName_TitleChangeV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TitleChangeV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TitleChangeV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TitleChangeV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TitleChangeV2Res, RmiName_TitleChangeV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TitleChangeV2Res;
        summary.rmiName = RmiName_TitleChangeV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TitleChangeV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TitleChangeV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TitleChangeV2Res;
        summary.rmiName = RmiName_TitleChangeV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TitleConditionUpdateV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TitleConditionUpdateV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TitleConditionUpdateV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TitleConditionUpdateV2Noti, RmiName_TitleConditionUpdateV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TitleConditionUpdateV2Noti;
        summary.rmiName = RmiName_TitleConditionUpdateV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TitleConditionUpdateV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TitleConditionUpdateV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TitleConditionUpdateV2Noti;
        summary.rmiName = RmiName_TitleConditionUpdateV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TitleListV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TitleListV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TitleListV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TitleListV2Res, RmiName_TitleListV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TitleListV2Res;
        summary.rmiName = RmiName_TitleListV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TitleListV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TitleListV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TitleListV2Res;
        summary.rmiName = RmiName_TitleListV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeCronAverageBalanceRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradeCronAverageBalanceRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeCronAverageBalanceRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeCronAverageBalanceRes, RmiName_TradeCronAverageBalanceRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeCronAverageBalanceRes;
        summary.rmiName = RmiName_TradeCronAverageBalanceRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeCronAverageBalanceRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeCronAverageBalanceRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeCronAverageBalanceRes;
        summary.rmiName = RmiName_TradeCronAverageBalanceRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeCronBalanceRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradeCronBalanceRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeCronBalanceRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeCronBalanceRes, RmiName_TradeCronBalanceRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeCronBalanceRes;
        summary.rmiName = RmiName_TradeCronBalanceRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeCronBalanceRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeCronBalanceRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeCronBalanceRes;
        summary.rmiName = RmiName_TradeCronBalanceRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeCronBuyRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradeCronBuyRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeCronBuyRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeCronBuyRes, RmiName_TradeCronBuyRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeCronBuyRes;
        summary.rmiName = RmiName_TradeCronBuyRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeCronBuyRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeCronBuyRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeCronBuyRes;
        summary.rmiName = RmiName_TradeCronBuyRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeCronInfoRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradeCronInfoRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeCronInfoRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeCronInfoRes, RmiName_TradeCronInfoRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeCronInfoRes;
        summary.rmiName = RmiName_TradeCronInfoRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeCronInfoRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeCronInfoRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeCronInfoRes;
        summary.rmiName = RmiName_TradeCronInfoRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeCronListRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradeCronListRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeCronListRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeCronListRes, RmiName_TradeCronListRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeCronListRes;
        summary.rmiName = RmiName_TradeCronListRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeCronListRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeCronListRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeCronListRes;
        summary.rmiName = RmiName_TradeCronListRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeCronPreviousDayBalanceRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradeCronPreviousDayBalanceRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeCronPreviousDayBalanceRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeCronPreviousDayBalanceRes, RmiName_TradeCronPreviousDayBalanceRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeCronPreviousDayBalanceRes;
        summary.rmiName = RmiName_TradeCronPreviousDayBalanceRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeCronPreviousDayBalanceRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeCronPreviousDayBalanceRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeCronPreviousDayBalanceRes;
        summary.rmiName = RmiName_TradeCronPreviousDayBalanceRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeCronSellRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradeCronSellRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeCronSellRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeCronSellRes, RmiName_TradeCronSellRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeCronSellRes;
        summary.rmiName = RmiName_TradeCronSellRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeCronSellRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeCronSellRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeCronSellRes;
        summary.rmiName = RmiName_TradeCronSellRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeCronWeeklyBalanceRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradeCronWeeklyBalanceRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeCronWeeklyBalanceRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeCronWeeklyBalanceRes, RmiName_TradeCronWeeklyBalanceRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeCronWeeklyBalanceRes;
        summary.rmiName = RmiName_TradeCronWeeklyBalanceRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeCronWeeklyBalanceRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeCronWeeklyBalanceRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeCronWeeklyBalanceRes;
        summary.rmiName = RmiName_TradeCronWeeklyBalanceRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradePersonalListNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradePersonalListNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradePersonalListNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradePersonalListNoti, RmiName_TradePersonalListNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradePersonalListNoti;
        summary.rmiName = RmiName_TradePersonalListNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradePersonalListNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradePersonalListNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradePersonalListNoti;
        summary.rmiName = RmiName_TradePersonalListNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradePersonalRequestRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradePersonalRequestRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradePersonalRequestRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradePersonalRequestRes, RmiName_TradePersonalRequestRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradePersonalRequestRes;
        summary.rmiName = RmiName_TradePersonalRequestRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradePersonalRequestRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradePersonalRequestRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradePersonalRequestRes;
        summary.rmiName = RmiName_TradePersonalRequestRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradePersonalUpdateNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradePersonalUpdateNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradePersonalUpdateNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradePersonalUpdateNoti, RmiName_TradePersonalUpdateNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradePersonalUpdateNoti;
        summary.rmiName = RmiName_TradePersonalUpdateNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradePersonalUpdateNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradePersonalUpdateNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradePersonalUpdateNoti;
        summary.rmiName = RmiName_TradePersonalUpdateNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradePersonalAddNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradePersonalAddNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradePersonalAddNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradePersonalAddNoti, RmiName_TradePersonalAddNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradePersonalAddNoti;
        summary.rmiName = RmiName_TradePersonalAddNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradePersonalAddNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradePersonalAddNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradePersonalAddNoti;
        summary.rmiName = RmiName_TradePersonalAddNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradePersonalDeleteNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradePersonalDeleteNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradePersonalDeleteNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradePersonalDeleteNoti, RmiName_TradePersonalDeleteNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradePersonalDeleteNoti;
        summary.rmiName = RmiName_TradePersonalDeleteNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradePersonalDeleteNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradePersonalDeleteNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradePersonalDeleteNoti;
        summary.rmiName = RmiName_TradePersonalDeleteNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradePersonalAcceptRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradePersonalAcceptRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradePersonalAcceptRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradePersonalAcceptRes, RmiName_TradePersonalAcceptRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradePersonalAcceptRes;
        summary.rmiName = RmiName_TradePersonalAcceptRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradePersonalAcceptRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradePersonalAcceptRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradePersonalAcceptRes;
        summary.rmiName = RmiName_TradePersonalAcceptRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradePersonalRefuseRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradePersonalRefuseRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradePersonalRefuseRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradePersonalRefuseRes, RmiName_TradePersonalRefuseRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradePersonalRefuseRes;
        summary.rmiName = RmiName_TradePersonalRefuseRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradePersonalRefuseRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradePersonalRefuseRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradePersonalRefuseRes;
        summary.rmiName = RmiName_TradePersonalRefuseRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradePersonalCancelRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradePersonalCancelRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradePersonalCancelRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradePersonalCancelRes, RmiName_TradePersonalCancelRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradePersonalCancelRes;
        summary.rmiName = RmiName_TradePersonalCancelRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradePersonalCancelRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradePersonalCancelRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradePersonalCancelRes;
        summary.rmiName = RmiName_TradePersonalCancelRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradePersonalWithdrawRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradePersonalWithdrawRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradePersonalWithdrawRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradePersonalWithdrawRes, RmiName_TradePersonalWithdrawRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradePersonalWithdrawRes;
        summary.rmiName = RmiName_TradePersonalWithdrawRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradePersonalWithdrawRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradePersonalWithdrawRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradePersonalWithdrawRes;
        summary.rmiName = RmiName_TradePersonalWithdrawRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradePersonalFinishRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradePersonalFinishRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradePersonalFinishRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradePersonalFinishRes, RmiName_TradePersonalFinishRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradePersonalFinishRes;
        summary.rmiName = RmiName_TradePersonalFinishRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradePersonalFinishRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradePersonalFinishRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradePersonalFinishRes;
        summary.rmiName = RmiName_TradePersonalFinishRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradePersonalHistoryRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradePersonalHistoryRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradePersonalHistoryRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradePersonalHistoryRes, RmiName_TradePersonalHistoryRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradePersonalHistoryRes;
        summary.rmiName = RmiName_TradePersonalHistoryRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradePersonalHistoryRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradePersonalHistoryRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradePersonalHistoryRes;
        summary.rmiName = RmiName_TradePersonalHistoryRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeCronMyListRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradeCronMyListRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeCronMyListRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeCronMyListRes, RmiName_TradeCronMyListRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeCronMyListRes;
        summary.rmiName = RmiName_TradeCronMyListRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeCronMyListRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeCronMyListRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeCronMyListRes;
        summary.rmiName = RmiName_TradeCronMyListRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeCronSettleRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradeCronSettleRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeCronSettleRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeCronSettleRes, RmiName_TradeCronSettleRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeCronSettleRes;
        summary.rmiName = RmiName_TradeCronSettleRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeCronSettleRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeCronSettleRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeCronSettleRes;
        summary.rmiName = RmiName_TradeCronSettleRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeCronTradesRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradeCronTradesRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeCronTradesRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeCronTradesRes, RmiName_TradeCronTradesRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeCronTradesRes;
        summary.rmiName = RmiName_TradeCronTradesRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeCronTradesRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeCronTradesRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeCronTradesRes;
        summary.rmiName = RmiName_TradeCronTradesRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeCronTimeToNextChangeBalanceRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradeCronTimeToNextChangeBalanceRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeCronTimeToNextChangeBalanceRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeCronTimeToNextChangeBalanceRes, RmiName_TradeCronTimeToNextChangeBalanceRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeCronTimeToNextChangeBalanceRes;
        summary.rmiName = RmiName_TradeCronTimeToNextChangeBalanceRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeCronTimeToNextChangeBalanceRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeCronTimeToNextChangeBalanceRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeCronTimeToNextChangeBalanceRes;
        summary.rmiName = RmiName_TradeCronTimeToNextChangeBalanceRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeCronCancelRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradeCronCancelRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeCronCancelRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeCronCancelRes, RmiName_TradeCronCancelRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeCronCancelRes;
        summary.rmiName = RmiName_TradeCronCancelRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeCronCancelRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeCronCancelRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeCronCancelRes;
        summary.rmiName = RmiName_TradeCronCancelRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeCronReclaimExpiredRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradeCronReclaimExpiredRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeCronReclaimExpiredRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeCronReclaimExpiredRes, RmiName_TradeCronReclaimExpiredRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeCronReclaimExpiredRes;
        summary.rmiName = RmiName_TradeCronReclaimExpiredRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeCronReclaimExpiredRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeCronReclaimExpiredRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeCronReclaimExpiredRes;
        summary.rmiName = RmiName_TradeCronReclaimExpiredRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeCronRemainingCanceledPenaltyTimeRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradeCronRemainingCanceledPenaltyTimeRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeCronRemainingCanceledPenaltyTimeRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeCronRemainingCanceledPenaltyTimeRes, RmiName_TradeCronRemainingCanceledPenaltyTimeRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeCronRemainingCanceledPenaltyTimeRes;
        summary.rmiName = RmiName_TradeCronRemainingCanceledPenaltyTimeRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeCronRemainingCanceledPenaltyTimeRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeCronRemainingCanceledPenaltyTimeRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeCronRemainingCanceledPenaltyTimeRes;
        summary.rmiName = RmiName_TradeCronRemainingCanceledPenaltyTimeRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeItemSellListNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradeItemSellListNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeItemSellListNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeItemSellListNoti, RmiName_TradeItemSellListNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeItemSellListNoti;
        summary.rmiName = RmiName_TradeItemSellListNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeItemSellListNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeItemSellListNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeItemSellListNoti;
        summary.rmiName = RmiName_TradeItemSellListNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeItemUpdateNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradeItemUpdateNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeItemUpdateNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeItemUpdateNoti, RmiName_TradeItemUpdateNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeItemUpdateNoti;
        summary.rmiName = RmiName_TradeItemUpdateNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeItemUpdateNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeItemUpdateNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeItemUpdateNoti;
        summary.rmiName = RmiName_TradeItemUpdateNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeItemDeleteNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradeItemDeleteNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeItemDeleteNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeItemDeleteNoti, RmiName_TradeItemDeleteNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeItemDeleteNoti;
        summary.rmiName = RmiName_TradeItemDeleteNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeItemDeleteNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeItemDeleteNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeItemDeleteNoti;
        summary.rmiName = RmiName_TradeItemDeleteNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeItemRegistRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradeItemRegistRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeItemRegistRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeItemRegistRes, RmiName_TradeItemRegistRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeItemRegistRes;
        summary.rmiName = RmiName_TradeItemRegistRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeItemRegistRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeItemRegistRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeItemRegistRes;
        summary.rmiName = RmiName_TradeItemRegistRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeItemCancelRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradeItemCancelRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeItemCancelRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeItemCancelRes, RmiName_TradeItemCancelRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeItemCancelRes;
        summary.rmiName = RmiName_TradeItemCancelRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeItemCancelRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeItemCancelRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeItemCancelRes;
        summary.rmiName = RmiName_TradeItemCancelRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeItemBuyRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradeItemBuyRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeItemBuyRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeItemBuyRes, RmiName_TradeItemBuyRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeItemBuyRes;
        summary.rmiName = RmiName_TradeItemBuyRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeItemBuyRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeItemBuyRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeItemBuyRes;
        summary.rmiName = RmiName_TradeItemBuyRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeItemWithdrawRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradeItemWithdrawRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeItemWithdrawRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeItemWithdrawRes, RmiName_TradeItemWithdrawRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeItemWithdrawRes;
        summary.rmiName = RmiName_TradeItemWithdrawRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeItemWithdrawRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeItemWithdrawRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeItemWithdrawRes;
        summary.rmiName = RmiName_TradeItemWithdrawRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeItemFinishRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradeItemFinishRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeItemFinishRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeItemFinishRes, RmiName_TradeItemFinishRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeItemFinishRes;
        summary.rmiName = RmiName_TradeItemFinishRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeItemFinishRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeItemFinishRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeItemFinishRes;
        summary.rmiName = RmiName_TradeItemFinishRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeItemHistoryRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradeItemHistoryRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeItemHistoryRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeItemHistoryRes, RmiName_TradeItemHistoryRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeItemHistoryRes;
        summary.rmiName = RmiName_TradeItemHistoryRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeItemHistoryRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeItemHistoryRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeItemHistoryRes;
        summary.rmiName = RmiName_TradeItemHistoryRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeItemSearchCategoryRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradeItemSearchCategoryRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeItemSearchCategoryRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeItemSearchCategoryRes, RmiName_TradeItemSearchCategoryRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeItemSearchCategoryRes;
        summary.rmiName = RmiName_TradeItemSearchCategoryRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeItemSearchCategoryRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeItemSearchCategoryRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeItemSearchCategoryRes;
        summary.rmiName = RmiName_TradeItemSearchCategoryRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeItemSearchItemIndexRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradeItemSearchItemIndexRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeItemSearchItemIndexRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeItemSearchItemIndexRes, RmiName_TradeItemSearchItemIndexRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeItemSearchItemIndexRes;
        summary.rmiName = RmiName_TradeItemSearchItemIndexRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeItemSearchItemIndexRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeItemSearchItemIndexRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeItemSearchItemIndexRes;
        summary.rmiName = RmiName_TradeItemSearchItemIndexRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeItemSearchListNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradeItemSearchListNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeItemSearchListNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeItemSearchListNoti, RmiName_TradeItemSearchListNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeItemSearchListNoti;
        summary.rmiName = RmiName_TradeItemSearchListNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeItemSearchListNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeItemSearchListNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeItemSearchListNoti;
        summary.rmiName = RmiName_TradeItemSearchListNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeItemBookmarkAddRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradeItemBookmarkAddRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeItemBookmarkAddRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeItemBookmarkAddRes, RmiName_TradeItemBookmarkAddRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeItemBookmarkAddRes;
        summary.rmiName = RmiName_TradeItemBookmarkAddRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeItemBookmarkAddRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeItemBookmarkAddRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeItemBookmarkAddRes;
        summary.rmiName = RmiName_TradeItemBookmarkAddRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeItemBookmarkDeleteRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradeItemBookmarkDeleteRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeItemBookmarkDeleteRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeItemBookmarkDeleteRes, RmiName_TradeItemBookmarkDeleteRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeItemBookmarkDeleteRes;
        summary.rmiName = RmiName_TradeItemBookmarkDeleteRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeItemBookmarkDeleteRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeItemBookmarkDeleteRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeItemBookmarkDeleteRes;
        summary.rmiName = RmiName_TradeItemBookmarkDeleteRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeItemBookmarkListNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.TradeItemBookmarkListNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeItemBookmarkListNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeItemBookmarkListNoti, RmiName_TradeItemBookmarkListNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeItemBookmarkListNoti;
        summary.rmiName = RmiName_TradeItemBookmarkListNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeItemBookmarkListNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeItemBookmarkListNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeItemBookmarkListNoti;
        summary.rmiName = RmiName_TradeItemBookmarkListNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_WeaponAppearanceCollectListV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.WeaponAppearanceCollectListV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_WeaponAppearanceCollectListV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.WeaponAppearanceCollectListV2Noti, RmiName_WeaponAppearanceCollectListV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.WeaponAppearanceCollectListV2Noti;
        summary.rmiName = RmiName_WeaponAppearanceCollectListV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =WeaponAppearanceCollectListV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_WeaponAppearanceCollectListV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.WeaponAppearanceCollectListV2Noti;
        summary.rmiName = RmiName_WeaponAppearanceCollectListV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_WeaponAppearanceCollectListV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.WeaponAppearanceCollectListV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_WeaponAppearanceCollectListV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.WeaponAppearanceCollectListV2Res, RmiName_WeaponAppearanceCollectListV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.WeaponAppearanceCollectListV2Res;
        summary.rmiName = RmiName_WeaponAppearanceCollectListV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =WeaponAppearanceCollectListV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_WeaponAppearanceCollectListV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.WeaponAppearanceCollectListV2Res;
        summary.rmiName = RmiName_WeaponAppearanceCollectListV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_WeaponAppearanceEquipV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.WeaponAppearanceEquipV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_WeaponAppearanceEquipV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.WeaponAppearanceEquipV2Noti, RmiName_WeaponAppearanceEquipV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.WeaponAppearanceEquipV2Noti;
        summary.rmiName = RmiName_WeaponAppearanceEquipV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =WeaponAppearanceEquipV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_WeaponAppearanceEquipV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.WeaponAppearanceEquipV2Noti;
        summary.rmiName = RmiName_WeaponAppearanceEquipV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_WeaponAppearanceEquipV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.WeaponAppearanceEquipV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_WeaponAppearanceEquipV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.WeaponAppearanceEquipV2Res, RmiName_WeaponAppearanceEquipV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.WeaponAppearanceEquipV2Res;
        summary.rmiName = RmiName_WeaponAppearanceEquipV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =WeaponAppearanceEquipV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_WeaponAppearanceEquipV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.WeaponAppearanceEquipV2Res;
        summary.rmiName = RmiName_WeaponAppearanceEquipV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_WeaponAppearanceExtractFromItemV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.WeaponAppearanceExtractFromItemV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_WeaponAppearanceExtractFromItemV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.WeaponAppearanceExtractFromItemV2Res, RmiName_WeaponAppearanceExtractFromItemV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.WeaponAppearanceExtractFromItemV2Res;
        summary.rmiName = RmiName_WeaponAppearanceExtractFromItemV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =WeaponAppearanceExtractFromItemV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_WeaponAppearanceExtractFromItemV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.WeaponAppearanceExtractFromItemV2Res;
        summary.rmiName = RmiName_WeaponAppearanceExtractFromItemV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_WeaponAppearanceGachaV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.WeaponAppearanceGachaV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_WeaponAppearanceGachaV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.WeaponAppearanceGachaV2Res, RmiName_WeaponAppearanceGachaV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.WeaponAppearanceGachaV2Res;
        summary.rmiName = RmiName_WeaponAppearanceGachaV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =WeaponAppearanceGachaV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_WeaponAppearanceGachaV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.WeaponAppearanceGachaV2Res;
        summary.rmiName = RmiName_WeaponAppearanceGachaV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_WeaponAppearanceHiddenV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.WeaponAppearanceHiddenV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_WeaponAppearanceHiddenV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.WeaponAppearanceHiddenV2Noti, RmiName_WeaponAppearanceHiddenV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.WeaponAppearanceHiddenV2Noti;
        summary.rmiName = RmiName_WeaponAppearanceHiddenV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =WeaponAppearanceHiddenV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_WeaponAppearanceHiddenV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.WeaponAppearanceHiddenV2Noti;
        summary.rmiName = RmiName_WeaponAppearanceHiddenV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_WeaponAppearanceHiddenV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.WeaponAppearanceHiddenV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_WeaponAppearanceHiddenV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.WeaponAppearanceHiddenV2Res, RmiName_WeaponAppearanceHiddenV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.WeaponAppearanceHiddenV2Res;
        summary.rmiName = RmiName_WeaponAppearanceHiddenV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =WeaponAppearanceHiddenV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_WeaponAppearanceHiddenV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.WeaponAppearanceHiddenV2Res;
        summary.rmiName = RmiName_WeaponAppearanceHiddenV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_WeaponAppearanceListV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.WeaponAppearanceListV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_WeaponAppearanceListV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.WeaponAppearanceListV2Noti, RmiName_WeaponAppearanceListV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.WeaponAppearanceListV2Noti;
        summary.rmiName = RmiName_WeaponAppearanceListV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =WeaponAppearanceListV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_WeaponAppearanceListV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.WeaponAppearanceListV2Noti;
        summary.rmiName = RmiName_WeaponAppearanceListV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_WeaponAppearanceListV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.WeaponAppearanceListV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_WeaponAppearanceListV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.WeaponAppearanceListV2Res, RmiName_WeaponAppearanceListV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.WeaponAppearanceListV2Res;
        summary.rmiName = RmiName_WeaponAppearanceListV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =WeaponAppearanceListV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_WeaponAppearanceListV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.WeaponAppearanceListV2Res;
        summary.rmiName = RmiName_WeaponAppearanceListV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_WeaponAppearanceUnequipV2Noti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.WeaponAppearanceUnequipV2Noti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_WeaponAppearanceUnequipV2Noti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.WeaponAppearanceUnequipV2Noti, RmiName_WeaponAppearanceUnequipV2Noti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.WeaponAppearanceUnequipV2Noti;
        summary.rmiName = RmiName_WeaponAppearanceUnequipV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =WeaponAppearanceUnequipV2Noti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_WeaponAppearanceUnequipV2Noti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.WeaponAppearanceUnequipV2Noti;
        summary.rmiName = RmiName_WeaponAppearanceUnequipV2Noti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_WeaponAppearanceUnequipV2Res(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.WeaponAppearanceUnequipV2Res packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_WeaponAppearanceUnequipV2Res);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.WeaponAppearanceUnequipV2Res, RmiName_WeaponAppearanceUnequipV2Res,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.WeaponAppearanceUnequipV2Res;
        summary.rmiName = RmiName_WeaponAppearanceUnequipV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =WeaponAppearanceUnequipV2Res (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_WeaponAppearanceUnequipV2Res);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.WeaponAppearanceUnequipV2Res;
        summary.rmiName = RmiName_WeaponAppearanceUnequipV2Res;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AccountCreateNameRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.AccountCreateNameRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_AccountCreateNameRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.AccountCreateNameRes, RmiName_AccountCreateNameRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AccountCreateNameRes;
        summary.rmiName = RmiName_AccountCreateNameRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AccountCreateNameRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AccountCreateNameRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AccountCreateNameRes;
        summary.rmiName = RmiName_AccountCreateNameRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ZoneStatusRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ZoneStatusRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ZoneStatusRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ZoneStatusRes, RmiName_ZoneStatusRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ZoneStatusRes;
        summary.rmiName = RmiName_ZoneStatusRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ZoneStatusRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ZoneStatusRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ZoneStatusRes;
        summary.rmiName = RmiName_ZoneStatusRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ZoneStatusNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.ZoneStatusNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ZoneStatusNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ZoneStatusNoti, RmiName_ZoneStatusNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ZoneStatusNoti;
        summary.rmiName = RmiName_ZoneStatusNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ZoneStatusNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ZoneStatusNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ZoneStatusNoti;
        summary.rmiName = RmiName_ZoneStatusNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BloodFogEnterRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.BloodFogEnterRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_BloodFogEnterRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.BloodFogEnterRes, RmiName_BloodFogEnterRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BloodFogEnterRes;
        summary.rmiName = RmiName_BloodFogEnterRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BloodFogEnterRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BloodFogEnterRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BloodFogEnterRes;
        summary.rmiName = RmiName_BloodFogEnterRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BloodFogLeaveRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.BloodFogLeaveRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_BloodFogLeaveRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.BloodFogLeaveRes, RmiName_BloodFogLeaveRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BloodFogLeaveRes;
        summary.rmiName = RmiName_BloodFogLeaveRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BloodFogLeaveRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BloodFogLeaveRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BloodFogLeaveRes;
        summary.rmiName = RmiName_BloodFogLeaveRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BloodFogUseBuffRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.BloodFogUseBuffRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_BloodFogUseBuffRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.BloodFogUseBuffRes, RmiName_BloodFogUseBuffRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BloodFogUseBuffRes;
        summary.rmiName = RmiName_BloodFogUseBuffRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BloodFogUseBuffRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BloodFogUseBuffRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BloodFogUseBuffRes;
        summary.rmiName = RmiName_BloodFogUseBuffRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BloodFogChangeWaveNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.BloodFogChangeWaveNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_BloodFogChangeWaveNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.BloodFogChangeWaveNoti, RmiName_BloodFogChangeWaveNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BloodFogChangeWaveNoti;
        summary.rmiName = RmiName_BloodFogChangeWaveNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BloodFogChangeWaveNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BloodFogChangeWaveNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BloodFogChangeWaveNoti;
        summary.rmiName = RmiName_BloodFogChangeWaveNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BloodFogEventNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.BloodFogEventNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_BloodFogEventNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.BloodFogEventNoti, RmiName_BloodFogEventNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BloodFogEventNoti;
        summary.rmiName = RmiName_BloodFogEventNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BloodFogEventNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BloodFogEventNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BloodFogEventNoti;
        summary.rmiName = RmiName_BloodFogEventNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BloodFogKickoutNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.BloodFogKickoutNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_BloodFogKickoutNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.BloodFogKickoutNoti, RmiName_BloodFogKickoutNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BloodFogKickoutNoti;
        summary.rmiName = RmiName_BloodFogKickoutNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BloodFogKickoutNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BloodFogKickoutNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BloodFogKickoutNoti;
        summary.rmiName = RmiName_BloodFogKickoutNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BloodFogPlayerDeathNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.BloodFogPlayerDeathNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_BloodFogPlayerDeathNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.BloodFogPlayerDeathNoti, RmiName_BloodFogPlayerDeathNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BloodFogPlayerDeathNoti;
        summary.rmiName = RmiName_BloodFogPlayerDeathNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BloodFogPlayerDeathNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BloodFogPlayerDeathNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BloodFogPlayerDeathNoti;
        summary.rmiName = RmiName_BloodFogPlayerDeathNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BloodFogPlayerPointUpdateNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.BloodFogPlayerPointUpdateNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_BloodFogPlayerPointUpdateNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.BloodFogPlayerPointUpdateNoti, RmiName_BloodFogPlayerPointUpdateNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BloodFogPlayerPointUpdateNoti;
        summary.rmiName = RmiName_BloodFogPlayerPointUpdateNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BloodFogPlayerPointUpdateNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BloodFogPlayerPointUpdateNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BloodFogPlayerPointUpdateNoti;
        summary.rmiName = RmiName_BloodFogPlayerPointUpdateNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BloodFogPlayerRankUpdateNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.BloodFogPlayerRankUpdateNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_BloodFogPlayerRankUpdateNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.BloodFogPlayerRankUpdateNoti, RmiName_BloodFogPlayerRankUpdateNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BloodFogPlayerRankUpdateNoti;
        summary.rmiName = RmiName_BloodFogPlayerRankUpdateNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BloodFogPlayerRankUpdateNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BloodFogPlayerRankUpdateNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BloodFogPlayerRankUpdateNoti;
        summary.rmiName = RmiName_BloodFogPlayerRankUpdateNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BloodFogResultNoti(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.BloodFogResultNoti packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_BloodFogResultNoti);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.BloodFogResultNoti, RmiName_BloodFogResultNoti,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BloodFogResultNoti;
        summary.rmiName = RmiName_BloodFogResultNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BloodFogResultNoti (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BloodFogResultNoti);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BloodFogResultNoti;
        summary.rmiName = RmiName_BloodFogResultNoti;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_S2CRttRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.S2CRttRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_S2CRttRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.S2CRttRes, RmiName_S2CRttRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.S2CRttRes;
        summary.rmiName = RmiName_S2CRttRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =S2CRttRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_S2CRttRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.S2CRttRes;
        summary.rmiName = RmiName_S2CRttRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_S2CRttReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        G2C.S2CRttReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_S2CRttReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.S2CRttReq, RmiName_S2CRttReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.S2CRttReq;
        summary.rmiName = RmiName_S2CRttReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =S2CRttReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_S2CRttReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.S2CRttReq;
        summary.rmiName = RmiName_S2CRttReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
		#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_PlayerSelectRes="PlayerSelectRes";
public const string RmiName_PlayerEnterStageFirstRes="PlayerEnterStageFirstRes";
public const string RmiName_PlayerEnterStageSecondRes="PlayerEnterStageSecondRes";
public const string RmiName_PlayerEnterStageThirdRes="PlayerEnterStageThirdRes";
public const string RmiName_PlayerEnterStageFourthRes="PlayerEnterStageFourthRes";
public const string RmiName_PlayerEnterStageFifthRes="PlayerEnterStageFifthRes";
public const string RmiName_PlayerGameEnterRes="PlayerGameEnterRes";
public const string RmiName_AuthenticateBotCredentialRes="AuthenticateBotCredentialRes";
public const string RmiName_ActorAddBuffV2Noti="ActorAddBuffV2Noti";
public const string RmiName_ActorChangedLevelToMeV2Noti="ActorChangedLevelToMeV2Noti";
public const string RmiName_ActorChangedLevelV2Noti="ActorChangedLevelV2Noti";
public const string RmiName_ActorChangeStateV2Noti="ActorChangeStateV2Noti";
public const string RmiName_ActorCostumeNoti="ActorCostumeNoti";
public const string RmiName_ActorDeathV2Noti="ActorDeathV2Noti";
public const string RmiName_ActorDisAppearV2Noti="ActorDisAppearV2Noti";
public const string RmiName_ActorGuildV2Noti="ActorGuildV2Noti";
public const string RmiName_ActorHpMpUpdateV2Noti="ActorHpMpUpdateV2Noti";
public const string RmiName_ActorHpUpdateV2Noti="ActorHpUpdateV2Noti";
public const string RmiName_ActorMoveV2Noti="ActorMoveV2Noti";
public const string RmiName_ActorMpUpdateV2Noti="ActorMpUpdateV2Noti";
public const string RmiName_ActorPetV2Noti="ActorPetV2Noti";
public const string RmiName_ActorRemoveBuffV2Noti="ActorRemoveBuffV2Noti";
public const string RmiName_ActorRideV2Noti="ActorRideV2Noti";
public const string RmiName_ActorsDisAppearV2Noti="ActorsDisAppearV2Noti";
public const string RmiName_MonsterActorAppearV2Noti="MonsterActorAppearV2Noti";
public const string RmiName_MonsterActorsAppearV2Noti="MonsterActorsAppearV2Noti";
public const string RmiName_MonsterActorTargetNoti="MonsterActorTargetNoti";
public const string RmiName_PlayerActorAppearV2Noti="PlayerActorAppearV2Noti";
public const string RmiName_PlayerActorsAppearV2Noti="PlayerActorsAppearV2Noti";
public const string RmiName_PlayerActorZoneStateNoti="PlayerActorZoneStateNoti";
public const string RmiName_ActorStatSyncNoti="ActorStatSyncNoti";
public const string RmiName_PropActorAppearNoti="PropActorAppearNoti";
public const string RmiName_ActorPendingDisAppearNoti="ActorPendingDisAppearNoti";
public const string RmiName_PropActorsAppearNoti="PropActorsAppearNoti";
public const string RmiName_DesignateBindStoneRes="DesignateBindStoneRes";
public const string RmiName_PortalByBindStoneRes="PortalByBindStoneRes";
public const string RmiName_PlayerBlackRosterGetPreferenceRes="PlayerBlackRosterGetPreferenceRes";
public const string RmiName_PlayerBlackRosterObservingNoti="PlayerBlackRosterObservingNoti";
public const string RmiName_PlayerBlackRosterObservingRes="PlayerBlackRosterObservingRes";
public const string RmiName_PlayerBlackRosterProvocationNoti="PlayerBlackRosterProvocationNoti";
public const string RmiName_PlayerBlackRosterProvocationRes="PlayerBlackRosterProvocationRes";
public const string RmiName_PlayerBlackRosterRankRes="PlayerBlackRosterRankRes";
public const string RmiName_PlayerBlackRosterRevengeRes="PlayerBlackRosterRevengeRes";
public const string RmiName_PlayerBlackRosterSetPreferenceRes="PlayerBlackRosterSetPreferenceRes";
public const string RmiName_PlayerBlackRostersRes="PlayerBlackRostersRes";
public const string RmiName_PlayerBlackRosterLastWeekRankRes="PlayerBlackRosterLastWeekRankRes";
public const string RmiName_PlayerBlackRosterMessageNoti="PlayerBlackRosterMessageNoti";
public const string RmiName_CheatGetMainQuestV2Noti="CheatGetMainQuestV2Noti";
public const string RmiName_CheatMessageV2Res="CheatMessageV2Res";
public const string RmiName_CheatQuestResetV2Noti="CheatQuestResetV2Noti";
public const string RmiName_AccountBlockPlayerAddRes="AccountBlockPlayerAddRes";
public const string RmiName_AccountBlockPlayerDeleteRes="AccountBlockPlayerDeleteRes";
public const string RmiName_AccountBlockPlayerReasonEditRes="AccountBlockPlayerReasonEditRes";
public const string RmiName_AccountBlockPlayersRes="AccountBlockPlayersRes";
public const string RmiName_ChatMessageV2Noti="ChatMessageV2Noti";
public const string RmiName_ChatMessageV2Res="ChatMessageV2Res";
public const string RmiName_PlayerSearchV2Res="PlayerSearchV2Res";
public const string RmiName_LinkItemInfoRes="LinkItemInfoRes";
public const string RmiName_CostumeCardBuildRes="CostumeCardBuildRes";
public const string RmiName_CostumeCardGachaRes="CostumeCardGachaRes";
public const string RmiName_CostumeCardInfoRes="CostumeCardInfoRes";
public const string RmiName_CostumeCardMixRes="CostumeCardMixRes";
public const string RmiName_CostumeCollectNoti="CostumeCollectNoti";
public const string RmiName_CostumeCollectRes="CostumeCollectRes";
public const string RmiName_CostumeEquipBodyRes="CostumeEquipBodyRes";
public const string RmiName_CostumeEquipBodyShowRes="CostumeEquipBodyShowRes";
public const string RmiName_CostumeEquipHeadRes="CostumeEquipHeadRes";
public const string RmiName_CostumeEquipHeadShowRes="CostumeEquipHeadShowRes";
public const string RmiName_CostumeInfoRes="CostumeInfoRes";
public const string RmiName_CostumeConfirmAcceptRes="CostumeConfirmAcceptRes";
public const string RmiName_CostumeConfirmChangeRes="CostumeConfirmChangeRes";
public const string RmiName_CostumeConfirmInfoRes="CostumeConfirmInfoRes";
public const string RmiName_PortalEffectNoti="PortalEffectNoti";
public const string RmiName_PortalEffectRes="PortalEffectRes";
public const string RmiName_AttainmentDailyRewardV2Res="AttainmentDailyRewardV2Res";
public const string RmiName_AttainmentNormalRewardV2Res="AttainmentNormalRewardV2Res";
public const string RmiName_AttainmentProgressV2Noti="AttainmentProgressV2Noti";
public const string RmiName_AttainmentsNoti="AttainmentsNoti";
public const string RmiName_AttendanceRewardV2Res="AttendanceRewardV2Res";
public const string RmiName_BossScheduleNoti="BossScheduleNoti";
public const string RmiName_BossScheduleRes="BossScheduleRes";
public const string RmiName_EventAttendanceListV2Noti="EventAttendanceListV2Noti";
public const string RmiName_EventExchangeRewardV2Res="EventExchangeRewardV2Res";
public const string RmiName_GuildAdminBuffActiveRes="GuildAdminBuffActiveRes";
public const string RmiName_GuildAdminBuffBuyRes="GuildAdminBuffBuyRes";
public const string RmiName_GuildAdminInfoRes="GuildAdminInfoRes";
public const string RmiName_GuildAdminMasterChangeNoti="GuildAdminMasterChangeNoti";
public const string RmiName_GuildAdminMasterChangeRes="GuildAdminMasterChangeRes";
public const string RmiName_GuildAdminMemberBanishNoti="GuildAdminMemberBanishNoti";
public const string RmiName_GuildAdminMemberBanishRes="GuildAdminMemberBanishRes";
public const string RmiName_GuildAdminMemberUpdateNoti="GuildAdminMemberUpdateNoti";
public const string RmiName_GuildAdminMemberUpdateRes="GuildAdminMemberUpdateRes";
public const string RmiName_GuildAdminUpdateBaseNoti="GuildAdminUpdateBaseNoti";
public const string RmiName_GuildAdminUpdateBaseRes="GuildAdminUpdateBaseRes";
public const string RmiName_GuildAdminUpdateIntroNoti="GuildAdminUpdateIntroNoti";
public const string RmiName_GuildAdminUpdateIntroRes="GuildAdminUpdateIntroRes";
public const string RmiName_GuildAdminUpdateNoticeNoti="GuildAdminUpdateNoticeNoti";
public const string RmiName_GuildAdminUpdateNoticeRes="GuildAdminUpdateNoticeRes";
public const string RmiName_GuildAdminUpdateTendencyNoti="GuildAdminUpdateTendencyNoti";
public const string RmiName_GuildAdminUpdateTendencyRes="GuildAdminUpdateTendencyRes";
public const string RmiName_GuildAdminUpdateTypeNoti="GuildAdminUpdateTypeNoti";
public const string RmiName_GuildAdminUpdateTypeRes="GuildAdminUpdateTypeRes";
public const string RmiName_GuildAttendRes="GuildAttendRes";
public const string RmiName_GuildBaseNoti="GuildBaseNoti";
public const string RmiName_GuildBuffInfoRes="GuildBuffInfoRes";
public const string RmiName_GuildBuffNoti="GuildBuffNoti";
public const string RmiName_GuildCreateRes="GuildCreateRes";
public const string RmiName_GuildDeleteRes="GuildDeleteRes";
public const string RmiName_GuildDonateRes="GuildDonateRes";
public const string RmiName_GuildDonationByCronV2Res="GuildDonationByCronV2Res";
public const string RmiName_GuildFindRes="GuildFindRes";
public const string RmiName_GuildHistoryNoti="GuildHistoryNoti";
public const string RmiName_GuildHistoryRes="GuildHistoryRes";
public const string RmiName_GuildInfoCallRes="GuildInfoCallRes";
public const string RmiName_GuildInfoRes="GuildInfoRes";
public const string RmiName_GuildJoinRequestConfirmNoti="GuildJoinRequestConfirmNoti";
public const string RmiName_GuildJoinRequestConfirmRes="GuildJoinRequestConfirmRes";
public const string RmiName_GuildJoinRequestListRes="GuildJoinRequestListRes";
public const string RmiName_GuildLeaveNoti="GuildLeaveNoti";
public const string RmiName_GuildLeaveRes="GuildLeaveRes";
public const string RmiName_GuildLiveInviteConfirmNoti="GuildLiveInviteConfirmNoti";
public const string RmiName_GuildLiveInviteConfirmRes="GuildLiveInviteConfirmRes";
public const string RmiName_GuildLiveInviteNoti="GuildLiveInviteNoti";
public const string RmiName_GuildLiveInviteRes="GuildLiveInviteRes";
public const string RmiName_GuildMemberInfoRes="GuildMemberInfoRes";
public const string RmiName_GuildMemberNoti="GuildMemberNoti";
public const string RmiName_GuildMemberStateV2Noti="GuildMemberStateV2Noti";
public const string RmiName_GuildMemberUpdateNoti="GuildMemberUpdateNoti";
public const string RmiName_GuildPointNoti="GuildPointNoti";
public const string RmiName_GuildSignRequestCancelRes="GuildSignRequestCancelRes";
public const string RmiName_GuildSignRequestListRes="GuildSignRequestListRes";
public const string RmiName_GuildSignRequestRes="GuildSignRequestRes";
public const string RmiName_GuildUpdateCrestNoti="GuildUpdateCrestNoti";
public const string RmiName_GuildUpdateCurrencyV2Noti="GuildUpdateCurrencyV2Noti";
public const string RmiName_GuildVoteInfoRes="GuildVoteInfoRes";
public const string RmiName_GuildVoteMasterImpeachRes="GuildVoteMasterImpeachRes";
public const string RmiName_GuildVoteNoti="GuildVoteNoti";
public const string RmiName_GuildVoteRes="GuildVoteRes";
public const string RmiName_GuildWarehouseChangeSizeV2Res="GuildWarehouseChangeSizeV2Res";
public const string RmiName_GuildWarehouseInfoV2Res="GuildWarehouseInfoV2Res";
public const string RmiName_GuildWarehouseItemMoveV2Res="GuildWarehouseItemMoveV2Res";
public const string RmiName_GuildWarehouseWalletMoveV2Res="GuildWarehouseWalletMoveV2Res";
public const string RmiName_GuildRubyNoti="GuildRubyNoti";
public const string RmiName_GuildCronNoti="GuildCronNoti";
public const string RmiName_GuildTerritoryInfoRes="GuildTerritoryInfoRes";
public const string RmiName_GuildTerritorySetRes="GuildTerritorySetRes";
public const string RmiName_WorldTerritoryOverviewRes="WorldTerritoryOverviewRes";
public const string RmiName_WorldBossLastAttackNoti="WorldBossLastAttackNoti";
public const string RmiName_DungeonClearHistoryV2Noti="DungeonClearHistoryV2Noti";
public const string RmiName_DungeonClearV2Noti="DungeonClearV2Noti";
public const string RmiName_DungeonCronUpdateV2Noti="DungeonCronUpdateV2Noti";
public const string RmiName_DungeonEnterV2Res="DungeonEnterV2Res";
public const string RmiName_DungeonExpUpdateV2Noti="DungeonExpUpdateV2Noti";
public const string RmiName_DungeonGiveUpV2Res="DungeonGiveUpV2Res";
public const string RmiName_DungeonLeaveV2Res="DungeonLeaveV2Res";
public const string RmiName_DungeonLoadingCompleteAllV2Noti="DungeonLoadingCompleteAllV2Noti";
public const string RmiName_DungeonLoadingCompleteV2Res="DungeonLoadingCompleteV2Res";
public const string RmiName_ExpDungeonClearNoti="ExpDungeonClearNoti";
public const string RmiName_EquipDungeonClearNoti="EquipDungeonClearNoti";
public const string RmiName_MineralDungeonClearNoti="MineralDungeonClearNoti";
public const string RmiName_PartyDungeonClearNoti="PartyDungeonClearNoti";
public const string RmiName_InteractStartRes="InteractStartRes";
public const string RmiName_InteractEndRes="InteractEndRes";
public const string RmiName_InteractCancelRes="InteractCancelRes";
public const string RmiName_InteractNoti="InteractNoti";
public const string RmiName_EquipmentVisibleV2Res="EquipmentVisibleV2Res";
public const string RmiName_InventoryChangeSizeV2Res="InventoryChangeSizeV2Res";
public const string RmiName_ItemAddOptionV2Res="ItemAddOptionV2Res";
public const string RmiName_ItemAddV2Noti="ItemAddV2Noti";
public const string RmiName_ItemChangeOptionV2Res="ItemChangeOptionV2Res";
public const string RmiName_ItemCollectionBookmarksRegisterV2Res="ItemCollectionBookmarksRegisterV2Res";
public const string RmiName_ItemCollectionBookmarksUnregisterV2Res="ItemCollectionBookmarksUnregisterV2Res";
public const string RmiName_ItemCollectionListV2Noti="ItemCollectionListV2Noti";
public const string RmiName_ItemCollectionRegisterV2Res="ItemCollectionRegisterV2Res";
public const string RmiName_ItemCombineV2Res="ItemCombineV2Res";
public const string RmiName_ItemDeleteV2Noti="ItemDeleteV2Noti";
public const string RmiName_ItemDeleteV2Res="ItemDeleteV2Res";
public const string RmiName_ItemDisassembleV2Res="ItemDisassembleV2Res";
public const string RmiName_ItemEnchantV2Res="ItemEnchantV2Res";
public const string RmiName_ItemEquipV2Noti="ItemEquipV2Noti";
public const string RmiName_ItemEquipV2Res="ItemEquipV2Res";
public const string RmiName_ItemIntensionV2Res="ItemIntensionV2Res";
public const string RmiName_ItemMixOptionV2Res="ItemMixOptionV2Res";
public const string RmiName_ItemPackageUseV2Res="ItemPackageUseV2Res";
public const string RmiName_ItemProductionV2Res="ItemProductionV2Res";
public const string RmiName_ItemSelectUseV2Res="ItemSelectUseV2Res";
public const string RmiName_ItemUpdateV2Noti="ItemUpdateV2Noti";
public const string RmiName_ItemUpgradeV2Res="ItemUpgradeV2Res";
public const string RmiName_ItemUseV2Res="ItemUseV2Res";
public const string RmiName_PkLootingAddV2Noti="PkLootingAddV2Noti";
public const string RmiName_PkLootingItemV2Res="PkLootingItemV2Res";
public const string RmiName_PkLootingListV2Res="PkLootingListV2Res";
public const string RmiName_PkLootingV2Noti="PkLootingV2Noti";
public const string RmiName_PlayerInventoryExtendInfoNoti="PlayerInventoryExtendInfoNoti";
public const string RmiName_PlayerInventoryInfoV2Noti="PlayerInventoryInfoV2Noti";
public const string RmiName_WarehouseChangeSizeV2Res="WarehouseChangeSizeV2Res";
public const string RmiName_WarehouseInfoV2Res="WarehouseInfoV2Res";
public const string RmiName_WarehouseItemMoveV2Res="WarehouseItemMoveV2Res";
public const string RmiName_ItemIntentionSucceedNoti="ItemIntentionSucceedNoti";
public const string RmiName_ItemSetLockRes="ItemSetLockRes";
public const string RmiName_ItemMarketPriceRes="ItemMarketPriceRes";
public const string RmiName_ItemInheritRes="ItemInheritRes";
public const string RmiName_MailListV2Res="MailListV2Res";
public const string RmiName_MailReadAllV2Res="MailReadAllV2Res";
public const string RmiName_MailReadV2Res="MailReadV2Res";
public const string RmiName_MatchingApplyRes="MatchingApplyRes";
public const string RmiName_MatchingCancelRes="MatchingCancelRes";
public const string RmiName_MatchingCompleteNoti="MatchingCompleteNoti";
public const string RmiName_MatchingIncompleteNoti="MatchingIncompleteNoti";
public const string RmiName_MatchingMatchedNoti="MatchingMatchedNoti";
public const string RmiName_MatchingRejectReplyNoti="MatchingRejectReplyNoti";
public const string RmiName_MatchingReplyNoti="MatchingReplyNoti";
public const string RmiName_MatchingReplyRes="MatchingReplyRes";
public const string RmiName_AuthenticatePlayerCredentialRes="AuthenticatePlayerCredentialRes";
public const string RmiName_BindStonesNoti="BindStonesNoti";
public const string RmiName_BroadCastContextNoti="BroadCastContextNoti";
public const string RmiName_BroadCastContextRes="BroadCastContextRes";
public const string RmiName_CutSceneEndV2Res="CutSceneEndV2Res";
public const string RmiName_CutSceneStartV2Res="CutSceneStartV2Res";
public const string RmiName_CutSceneStateV2Noti="CutSceneStateV2Noti";
public const string RmiName_DebugPlayerStateV2Noti="DebugPlayerStateV2Noti";
public const string RmiName_LogOutRes="LogOutRes";
public const string RmiName_PortalV2Res="PortalV2Res";
public const string RmiName_ReturnToLobbyRes="ReturnToLobbyRes";
public const string RmiName_ServerTimeV2Res="ServerTimeV2Res";
public const string RmiName_SystemMessageV2Noti="SystemMessageV2Noti";
public const string RmiName_TemporalFluxZoneEnterNoti="TemporalFluxZoneEnterNoti";
public const string RmiName_TemporalFluxZoneExitNoti="TemporalFluxZoneExitNoti";
public const string RmiName_TestPacketV2Noti="TestPacketV2Noti";
public const string RmiName_TestPacketV2Res="TestPacketV2Res";
public const string RmiName_TicketInfoV2Noti="TicketInfoV2Noti";
public const string RmiName_TriggerActivateMapMoveV2Noti="TriggerActivateMapMoveV2Noti";
public const string RmiName_TriggerActivateV2Res="TriggerActivateV2Res";
public const string RmiName_UnionV2Res="UnionV2Res";
public const string RmiName_ZoneLoadingCompletedRes="ZoneLoadingCompletedRes";
public const string RmiName_BossDamagedInfoNoti="BossDamagedInfoNoti";
public const string RmiName_BossFirstDamagedNoti="BossFirstDamagedNoti";
public const string RmiName_BossKilledNoti="BossKilledNoti";
public const string RmiName_BossKilledRewardNoti="BossKilledRewardNoti";
public const string RmiName_GainMessageNoti="GainMessageNoti";
public const string RmiName_TicketUpdateNoti="TicketUpdateNoti";
public const string RmiName_BossDamagedInfoRes="BossDamagedInfoRes";
public const string RmiName_WorldBossDamagedInfoNoti="WorldBossDamagedInfoNoti";
public const string RmiName_BossTakenDamageOnPlayerKillNoti="BossTakenDamageOnPlayerKillNoti";
public const string RmiName_PartyChangeLootingNoti="PartyChangeLootingNoti";
public const string RmiName_PartyChangeLootingRes="PartyChangeLootingRes";
public const string RmiName_PartyCreateRes="PartyCreateRes";
public const string RmiName_PartyDisbandNoti="PartyDisbandNoti";
public const string RmiName_PartyDisbandRes="PartyDisbandRes";
public const string RmiName_PartyDungeonEntranceInquiryRes="PartyDungeonEntranceInquiryRes";
public const string RmiName_PartyEnterDungeonCanceledNoti="PartyEnterDungeonCanceledNoti";
public const string RmiName_PartyEnterDungeonNoti="PartyEnterDungeonNoti";
public const string RmiName_PartyEnterDungeonReplyNoti="PartyEnterDungeonReplyNoti";
public const string RmiName_PartyEnterDungeonReplyRes="PartyEnterDungeonReplyRes";
public const string RmiName_PartyEnterDungeonRes="PartyEnterDungeonRes";
public const string RmiName_PartyEnterNoti="PartyEnterNoti";
public const string RmiName_PartyInfoNoti="PartyInfoNoti";
public const string RmiName_PartyInfoRes="PartyInfoRes";
public const string RmiName_PartyInviteNoti="PartyInviteNoti";
public const string RmiName_PartyInviteReplyNoti="PartyInviteReplyNoti";
public const string RmiName_PartyInviteReplyRes="PartyInviteReplyRes";
public const string RmiName_PartyInviteRes="PartyInviteRes";
public const string RmiName_PartyKickedNoti="PartyKickedNoti";
public const string RmiName_PartyLeaderChangeNoti="PartyLeaderChangeNoti";
public const string RmiName_PartyLeaderChangeRes="PartyLeaderChangeRes";
public const string RmiName_PartyLeaveNoti="PartyLeaveNoti";
public const string RmiName_PartyLeaveRes="PartyLeaveRes";
public const string RmiName_PartyMemberKickNoti="PartyMemberKickNoti";
public const string RmiName_PartyMemberKickRes="PartyMemberKickRes";
public const string RmiName_PartyMemberUpdateNoti="PartyMemberUpdateNoti";
public const string RmiName_PartySuggestionPlayersRes="PartySuggestionPlayersRes";
public const string RmiName_PartyEnterDungeonCanceledRes="PartyEnterDungeonCanceledRes";
public const string RmiName_PetCollectInfoV2Res="PetCollectInfoV2Res";
public const string RmiName_PetEquipOffV2Noti="PetEquipOffV2Noti";
public const string RmiName_PetEquipOffV2Res="PetEquipOffV2Res";
public const string RmiName_PetEquipV2Noti="PetEquipV2Noti";
public const string RmiName_PetEquipV2Res="PetEquipV2Res";
public const string RmiName_PetFeedUseV2Res="PetFeedUseV2Res";
public const string RmiName_PetGachaV2Res="PetGachaV2Res";
public const string RmiName_PetInfoV2Res="PetInfoV2Res";
public const string RmiName_PetMixV2Res="PetMixV2Res";
public const string RmiName_PetUpgradeV2Res="PetUpgradeV2Res";
public const string RmiName_PetInActiveBuffRes="PetInActiveBuffRes";
public const string RmiName_PhaseFieldEndV2Res="PhaseFieldEndV2Res";
public const string RmiName_PhaseFieldStartV2Res="PhaseFieldStartV2Res";
public const string RmiName_PlayerCrimeV2Noti="PlayerCrimeV2Noti";
public const string RmiName_PlayerDeleteRes="PlayerDeleteRes";
public const string RmiName_PlayerEventV2Noti="PlayerEventV2Noti";
public const string RmiName_PlayerExpChangeV2Noti="PlayerExpChangeV2Noti";
public const string RmiName_PlayerGetMacroRes="PlayerGetMacroRes";
public const string RmiName_PlayerLootingV2Noti="PlayerLootingV2Noti";
public const string RmiName_PlayerMapMoveV2Res="PlayerMapMoveV2Res";
public const string RmiName_PlayerMoveV2Noti="PlayerMoveV2Noti";
public const string RmiName_PlayerMoveV2Res="PlayerMoveV2Res";
public const string RmiName_PlayerTendencyNoti="PlayerTendencyNoti";
public const string RmiName_PlayerPvpValueNoti="PlayerPvpValueNoti";
public const string RmiName_PlayerResurrectionV2Noti="PlayerResurrectionV2Noti";
public const string RmiName_PlayerResurrectionV2Res="PlayerResurrectionV2Res";
public const string RmiName_PlayerSetMacroRes="PlayerSetMacroRes";
public const string RmiName_PlayerStatChangeV2Noti="PlayerStatChangeV2Noti";
public const string RmiName_PlayerStatPointChangeV2Noti="PlayerStatPointChangeV2Noti";
public const string RmiName_PlayerStatPointChangeV2Res="PlayerStatPointChangeV2Res";
public const string RmiName_PlayerStatPointInitV2Res="PlayerStatPointInitV2Res";
public const string RmiName_PlayerStatV2Res="PlayerStatV2Res";
public const string RmiName_PlayerWalletUpdateV2Noti="PlayerWalletUpdateV2Noti";
public const string RmiName_PlayerWalletV2Noti="PlayerWalletV2Noti";
public const string RmiName_PlayerWantedV2Noti="PlayerWantedV2Noti";
public const string RmiName_PlayerDeathInfoRes="PlayerDeathInfoRes";
public const string RmiName_RecoverPlayerExpRes="RecoverPlayerExpRes";
public const string RmiName_PlayerCombatCapabilityNoti="PlayerCombatCapabilityNoti";
public const string RmiName_PlayerClassUpV2Res="PlayerClassUpV2Res";
public const string RmiName_QuickslotSetRes="QuickslotSetRes";
public const string RmiName_QuickslotListNoti="QuickslotListNoti";
public const string RmiName_MembershipAddNoti="MembershipAddNoti";
public const string RmiName_MembershipUpdateNoti="MembershipUpdateNoti";
public const string RmiName_MembershipListNoti="MembershipListNoti";
public const string RmiName_PlayerExpRecoveryPopupRes="PlayerExpRecoveryPopupRes";
public const string RmiName_RTTPlayerMoveV2Res="RTTPlayerMoveV2Res";
public const string RmiName_CheatGetQuestV2Noti="CheatGetQuestV2Noti";
public const string RmiName_DailyQuestOpenV2Noti="DailyQuestOpenV2Noti";
public const string RmiName_PlayerQuestProgressV2Noti="PlayerQuestProgressV2Noti";
public const string RmiName_QuestAbandonV2Res="QuestAbandonV2Res";
public const string RmiName_QuestAcceptV2Res="QuestAcceptV2Res";
public const string RmiName_QuestCompleteV2Res="QuestCompleteV2Res";
public const string RmiName_QuestConditionCompleteV2Res="QuestConditionCompleteV2Res";
public const string RmiName_QuestListV2Res="QuestListV2Res";
public const string RmiName_QuestPortalV2Res="QuestPortalV2Res";
public const string RmiName_QuestRegisterV2Res="QuestRegisterV2Res";
public const string RmiName_QuestRerollV2Res="QuestRerollV2Res";
public const string RmiName_QuestResetCheatV2Noti="QuestResetCheatV2Noti";
public const string RmiName_QuestRewardV2Res="QuestRewardV2Res";
public const string RmiName_QuestTalkCompleteV2Res="QuestTalkCompleteV2Res";
public const string RmiName_ResetDailyQuestV2Noti="ResetDailyQuestV2Noti";
public const string RmiName_TutorialSkipV2Res="TutorialSkipV2Res";
public const string RmiName_GuildRelationRes="GuildRelationRes";
public const string RmiName_PlayerRelationRes="PlayerRelationRes";
public const string RmiName_RelationsNoti="RelationsNoti";
public const string RmiName_RideAttachDeleteV2Res="RideAttachDeleteV2Res";
public const string RmiName_RideAttachDisassembleV2Res="RideAttachDisassembleV2Res";
public const string RmiName_RideAttachEquipOffV2Noti="RideAttachEquipOffV2Noti";
public const string RmiName_RideAttachEquipOffV2Res="RideAttachEquipOffV2Res";
public const string RmiName_RideAttachEquipV2Noti="RideAttachEquipV2Noti";
public const string RmiName_RideAttachEquipV2Res="RideAttachEquipV2Res";
public const string RmiName_RideAttachGachaV2Res="RideAttachGachaV2Res";
public const string RmiName_RideAttachInvenExtendV2Res="RideAttachInvenExtendV2Res";
public const string RmiName_RideCollectInfosNoti="RideCollectInfosNoti";
public const string RmiName_RideEquipOffV2Res="RideEquipOffV2Res";
public const string RmiName_RideEquipV2Res="RideEquipV2Res";
public const string RmiName_RideGachaV2Res="RideGachaV2Res";
public const string RmiName_RideInfosNoti="RideInfosNoti";
public const string RmiName_RideMixV2Res="RideMixV2Res";
public const string RmiName_RideSitOffV2Noti="RideSitOffV2Noti";
public const string RmiName_RideSitOffV2Res="RideSitOffV2Res";
public const string RmiName_RideSitV2Noti="RideSitV2Noti";
public const string RmiName_RideSitV2Res="RideSitV2Res";
public const string RmiName_BuyCashShopItemV2Res="BuyCashShopItemV2Res";
public const string RmiName_BuyGameShopItemV2Res="BuyGameShopItemV2Res";
public const string RmiName_GameShopSellItemV2Res="GameShopSellItemV2Res";
public const string RmiName_ShopBuyCountListNoti="ShopBuyCountListNoti";
public const string RmiName_ChangedSiegeWarMatchInfoV2Noti="ChangedSiegeWarMatchInfoV2Noti";
public const string RmiName_ChangeSiegeModeV2Res="ChangeSiegeModeV2Res";
public const string RmiName_ChangeSiegeWarInfoV2Noti="ChangeSiegeWarInfoV2Noti";
public const string RmiName_ChangeSiegeWarObjectInfoV2Noti="ChangeSiegeWarObjectInfoV2Noti";
public const string RmiName_ChoiceSiegeWarFactionV2Res="ChoiceSiegeWarFactionV2Res";
public const string RmiName_CreatedDungeonSiegeWarV2Noti="CreatedDungeonSiegeWarV2Noti";
public const string RmiName_DungeonSiegeWarClearV2Noti="DungeonSiegeWarClearV2Noti";
public const string RmiName_GetSiegeWarInfoV2Res="GetSiegeWarInfoV2Res";
public const string RmiName_GetSiegeWarMatchInfoV2Res="GetSiegeWarMatchInfoV2Res";
public const string RmiName_ShowLocalizationV2Noti="ShowLocalizationV2Noti";
public const string RmiName_ActorChangeBattleModeV2Noti="ActorChangeBattleModeV2Noti";
public const string RmiName_BuffListInfoV2Res="BuffListInfoV2Res";
public const string RmiName_SkillChangeAutoUseV2Res="SkillChangeAutoUseV2Res";
public const string RmiName_SkillChangePresetV2Res="SkillChangePresetV2Res";
public const string RmiName_SkillDotEffectV2Noti="SkillDotEffectV2Noti";
public const string RmiName_SkillEquipV2Res="SkillEquipV2Res";
public const string RmiName_SkillHitEffectV2Noti="SkillHitEffectV2Noti";
public const string RmiName_SkillHitV2Noti="SkillHitV2Noti";
public const string RmiName_SkillHitV2Res="SkillHitV2Res";
public const string RmiName_SkillLearnV2Res="SkillLearnV2Res";
public const string RmiName_SkillLevelUpV2Res="SkillLevelUpV2Res";
public const string RmiName_SkillListInfoV2Res="SkillListInfoV2Res";
public const string RmiName_SkillPreActionEndV2Noti="SkillPreActionEndV2Noti";
public const string RmiName_SkillPresetInfosNoti="SkillPresetInfosNoti";
public const string RmiName_SkillUnEquipV2Res="SkillUnEquipV2Res";
public const string RmiName_SkillUpgradeV2Res="SkillUpgradeV2Res";
public const string RmiName_SkillUseV2Noti="SkillUseV2Noti";
public const string RmiName_SkillUseV2Res="SkillUseV2Res";
public const string RmiName_SkillDotHealEffectV2Noti="SkillDotHealEffectV2Noti";
public const string RmiName_RTTSkillUseV2Res="RTTSkillUseV2Res";
public const string RmiName_RTTSkillHitV2Res="RTTSkillHitV2Res";
public const string RmiName_TitleAddV2Noti="TitleAddV2Noti";
public const string RmiName_TitleChangeV2Noti="TitleChangeV2Noti";
public const string RmiName_TitleChangeV2Res="TitleChangeV2Res";
public const string RmiName_TitleConditionUpdateV2Noti="TitleConditionUpdateV2Noti";
public const string RmiName_TitleListV2Res="TitleListV2Res";
public const string RmiName_TradeCronAverageBalanceRes="TradeCronAverageBalanceRes";
public const string RmiName_TradeCronBalanceRes="TradeCronBalanceRes";
public const string RmiName_TradeCronBuyRes="TradeCronBuyRes";
public const string RmiName_TradeCronInfoRes="TradeCronInfoRes";
public const string RmiName_TradeCronListRes="TradeCronListRes";
public const string RmiName_TradeCronPreviousDayBalanceRes="TradeCronPreviousDayBalanceRes";
public const string RmiName_TradeCronSellRes="TradeCronSellRes";
public const string RmiName_TradeCronWeeklyBalanceRes="TradeCronWeeklyBalanceRes";
public const string RmiName_TradePersonalListNoti="TradePersonalListNoti";
public const string RmiName_TradePersonalRequestRes="TradePersonalRequestRes";
public const string RmiName_TradePersonalUpdateNoti="TradePersonalUpdateNoti";
public const string RmiName_TradePersonalAddNoti="TradePersonalAddNoti";
public const string RmiName_TradePersonalDeleteNoti="TradePersonalDeleteNoti";
public const string RmiName_TradePersonalAcceptRes="TradePersonalAcceptRes";
public const string RmiName_TradePersonalRefuseRes="TradePersonalRefuseRes";
public const string RmiName_TradePersonalCancelRes="TradePersonalCancelRes";
public const string RmiName_TradePersonalWithdrawRes="TradePersonalWithdrawRes";
public const string RmiName_TradePersonalFinishRes="TradePersonalFinishRes";
public const string RmiName_TradePersonalHistoryRes="TradePersonalHistoryRes";
public const string RmiName_TradeCronMyListRes="TradeCronMyListRes";
public const string RmiName_TradeCronSettleRes="TradeCronSettleRes";
public const string RmiName_TradeCronTradesRes="TradeCronTradesRes";
public const string RmiName_TradeCronTimeToNextChangeBalanceRes="TradeCronTimeToNextChangeBalanceRes";
public const string RmiName_TradeCronCancelRes="TradeCronCancelRes";
public const string RmiName_TradeCronReclaimExpiredRes="TradeCronReclaimExpiredRes";
public const string RmiName_TradeCronRemainingCanceledPenaltyTimeRes="TradeCronRemainingCanceledPenaltyTimeRes";
public const string RmiName_TradeItemSellListNoti="TradeItemSellListNoti";
public const string RmiName_TradeItemUpdateNoti="TradeItemUpdateNoti";
public const string RmiName_TradeItemDeleteNoti="TradeItemDeleteNoti";
public const string RmiName_TradeItemRegistRes="TradeItemRegistRes";
public const string RmiName_TradeItemCancelRes="TradeItemCancelRes";
public const string RmiName_TradeItemBuyRes="TradeItemBuyRes";
public const string RmiName_TradeItemWithdrawRes="TradeItemWithdrawRes";
public const string RmiName_TradeItemFinishRes="TradeItemFinishRes";
public const string RmiName_TradeItemHistoryRes="TradeItemHistoryRes";
public const string RmiName_TradeItemSearchCategoryRes="TradeItemSearchCategoryRes";
public const string RmiName_TradeItemSearchItemIndexRes="TradeItemSearchItemIndexRes";
public const string RmiName_TradeItemSearchListNoti="TradeItemSearchListNoti";
public const string RmiName_TradeItemBookmarkAddRes="TradeItemBookmarkAddRes";
public const string RmiName_TradeItemBookmarkDeleteRes="TradeItemBookmarkDeleteRes";
public const string RmiName_TradeItemBookmarkListNoti="TradeItemBookmarkListNoti";
public const string RmiName_WeaponAppearanceCollectListV2Noti="WeaponAppearanceCollectListV2Noti";
public const string RmiName_WeaponAppearanceCollectListV2Res="WeaponAppearanceCollectListV2Res";
public const string RmiName_WeaponAppearanceEquipV2Noti="WeaponAppearanceEquipV2Noti";
public const string RmiName_WeaponAppearanceEquipV2Res="WeaponAppearanceEquipV2Res";
public const string RmiName_WeaponAppearanceExtractFromItemV2Res="WeaponAppearanceExtractFromItemV2Res";
public const string RmiName_WeaponAppearanceGachaV2Res="WeaponAppearanceGachaV2Res";
public const string RmiName_WeaponAppearanceHiddenV2Noti="WeaponAppearanceHiddenV2Noti";
public const string RmiName_WeaponAppearanceHiddenV2Res="WeaponAppearanceHiddenV2Res";
public const string RmiName_WeaponAppearanceListV2Noti="WeaponAppearanceListV2Noti";
public const string RmiName_WeaponAppearanceListV2Res="WeaponAppearanceListV2Res";
public const string RmiName_WeaponAppearanceUnequipV2Noti="WeaponAppearanceUnequipV2Noti";
public const string RmiName_WeaponAppearanceUnequipV2Res="WeaponAppearanceUnequipV2Res";
public const string RmiName_AccountCreateNameRes="AccountCreateNameRes";
public const string RmiName_ZoneStatusRes="ZoneStatusRes";
public const string RmiName_ZoneStatusNoti="ZoneStatusNoti";
public const string RmiName_BloodFogEnterRes="BloodFogEnterRes";
public const string RmiName_BloodFogLeaveRes="BloodFogLeaveRes";
public const string RmiName_BloodFogUseBuffRes="BloodFogUseBuffRes";
public const string RmiName_BloodFogChangeWaveNoti="BloodFogChangeWaveNoti";
public const string RmiName_BloodFogEventNoti="BloodFogEventNoti";
public const string RmiName_BloodFogKickoutNoti="BloodFogKickoutNoti";
public const string RmiName_BloodFogPlayerDeathNoti="BloodFogPlayerDeathNoti";
public const string RmiName_BloodFogPlayerPointUpdateNoti="BloodFogPlayerPointUpdateNoti";
public const string RmiName_BloodFogPlayerRankUpdateNoti="BloodFogPlayerRankUpdateNoti";
public const string RmiName_BloodFogResultNoti="BloodFogResultNoti";
public const string RmiName_S2CRttRes="S2CRttRes";
public const string RmiName_S2CRttReq="S2CRttReq";
       
public const string RmiName_First = RmiName_PlayerSelectRes;
		#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_PlayerSelectRes="";
public const string RmiName_PlayerEnterStageFirstRes="";
public const string RmiName_PlayerEnterStageSecondRes="";
public const string RmiName_PlayerEnterStageThirdRes="";
public const string RmiName_PlayerEnterStageFourthRes="";
public const string RmiName_PlayerEnterStageFifthRes="";
public const string RmiName_PlayerGameEnterRes="";
public const string RmiName_AuthenticateBotCredentialRes="";
public const string RmiName_ActorAddBuffV2Noti="";
public const string RmiName_ActorChangedLevelToMeV2Noti="";
public const string RmiName_ActorChangedLevelV2Noti="";
public const string RmiName_ActorChangeStateV2Noti="";
public const string RmiName_ActorCostumeNoti="";
public const string RmiName_ActorDeathV2Noti="";
public const string RmiName_ActorDisAppearV2Noti="";
public const string RmiName_ActorGuildV2Noti="";
public const string RmiName_ActorHpMpUpdateV2Noti="";
public const string RmiName_ActorHpUpdateV2Noti="";
public const string RmiName_ActorMoveV2Noti="";
public const string RmiName_ActorMpUpdateV2Noti="";
public const string RmiName_ActorPetV2Noti="";
public const string RmiName_ActorRemoveBuffV2Noti="";
public const string RmiName_ActorRideV2Noti="";
public const string RmiName_ActorsDisAppearV2Noti="";
public const string RmiName_MonsterActorAppearV2Noti="";
public const string RmiName_MonsterActorsAppearV2Noti="";
public const string RmiName_MonsterActorTargetNoti="";
public const string RmiName_PlayerActorAppearV2Noti="";
public const string RmiName_PlayerActorsAppearV2Noti="";
public const string RmiName_PlayerActorZoneStateNoti="";
public const string RmiName_ActorStatSyncNoti="";
public const string RmiName_PropActorAppearNoti="";
public const string RmiName_ActorPendingDisAppearNoti="";
public const string RmiName_PropActorsAppearNoti="";
public const string RmiName_DesignateBindStoneRes="";
public const string RmiName_PortalByBindStoneRes="";
public const string RmiName_PlayerBlackRosterGetPreferenceRes="";
public const string RmiName_PlayerBlackRosterObservingNoti="";
public const string RmiName_PlayerBlackRosterObservingRes="";
public const string RmiName_PlayerBlackRosterProvocationNoti="";
public const string RmiName_PlayerBlackRosterProvocationRes="";
public const string RmiName_PlayerBlackRosterRankRes="";
public const string RmiName_PlayerBlackRosterRevengeRes="";
public const string RmiName_PlayerBlackRosterSetPreferenceRes="";
public const string RmiName_PlayerBlackRostersRes="";
public const string RmiName_PlayerBlackRosterLastWeekRankRes="";
public const string RmiName_PlayerBlackRosterMessageNoti="";
public const string RmiName_CheatGetMainQuestV2Noti="";
public const string RmiName_CheatMessageV2Res="";
public const string RmiName_CheatQuestResetV2Noti="";
public const string RmiName_AccountBlockPlayerAddRes="";
public const string RmiName_AccountBlockPlayerDeleteRes="";
public const string RmiName_AccountBlockPlayerReasonEditRes="";
public const string RmiName_AccountBlockPlayersRes="";
public const string RmiName_ChatMessageV2Noti="";
public const string RmiName_ChatMessageV2Res="";
public const string RmiName_PlayerSearchV2Res="";
public const string RmiName_LinkItemInfoRes="";
public const string RmiName_CostumeCardBuildRes="";
public const string RmiName_CostumeCardGachaRes="";
public const string RmiName_CostumeCardInfoRes="";
public const string RmiName_CostumeCardMixRes="";
public const string RmiName_CostumeCollectNoti="";
public const string RmiName_CostumeCollectRes="";
public const string RmiName_CostumeEquipBodyRes="";
public const string RmiName_CostumeEquipBodyShowRes="";
public const string RmiName_CostumeEquipHeadRes="";
public const string RmiName_CostumeEquipHeadShowRes="";
public const string RmiName_CostumeInfoRes="";
public const string RmiName_CostumeConfirmAcceptRes="";
public const string RmiName_CostumeConfirmChangeRes="";
public const string RmiName_CostumeConfirmInfoRes="";
public const string RmiName_PortalEffectNoti="";
public const string RmiName_PortalEffectRes="";
public const string RmiName_AttainmentDailyRewardV2Res="";
public const string RmiName_AttainmentNormalRewardV2Res="";
public const string RmiName_AttainmentProgressV2Noti="";
public const string RmiName_AttainmentsNoti="";
public const string RmiName_AttendanceRewardV2Res="";
public const string RmiName_BossScheduleNoti="";
public const string RmiName_BossScheduleRes="";
public const string RmiName_EventAttendanceListV2Noti="";
public const string RmiName_EventExchangeRewardV2Res="";
public const string RmiName_GuildAdminBuffActiveRes="";
public const string RmiName_GuildAdminBuffBuyRes="";
public const string RmiName_GuildAdminInfoRes="";
public const string RmiName_GuildAdminMasterChangeNoti="";
public const string RmiName_GuildAdminMasterChangeRes="";
public const string RmiName_GuildAdminMemberBanishNoti="";
public const string RmiName_GuildAdminMemberBanishRes="";
public const string RmiName_GuildAdminMemberUpdateNoti="";
public const string RmiName_GuildAdminMemberUpdateRes="";
public const string RmiName_GuildAdminUpdateBaseNoti="";
public const string RmiName_GuildAdminUpdateBaseRes="";
public const string RmiName_GuildAdminUpdateIntroNoti="";
public const string RmiName_GuildAdminUpdateIntroRes="";
public const string RmiName_GuildAdminUpdateNoticeNoti="";
public const string RmiName_GuildAdminUpdateNoticeRes="";
public const string RmiName_GuildAdminUpdateTendencyNoti="";
public const string RmiName_GuildAdminUpdateTendencyRes="";
public const string RmiName_GuildAdminUpdateTypeNoti="";
public const string RmiName_GuildAdminUpdateTypeRes="";
public const string RmiName_GuildAttendRes="";
public const string RmiName_GuildBaseNoti="";
public const string RmiName_GuildBuffInfoRes="";
public const string RmiName_GuildBuffNoti="";
public const string RmiName_GuildCreateRes="";
public const string RmiName_GuildDeleteRes="";
public const string RmiName_GuildDonateRes="";
public const string RmiName_GuildDonationByCronV2Res="";
public const string RmiName_GuildFindRes="";
public const string RmiName_GuildHistoryNoti="";
public const string RmiName_GuildHistoryRes="";
public const string RmiName_GuildInfoCallRes="";
public const string RmiName_GuildInfoRes="";
public const string RmiName_GuildJoinRequestConfirmNoti="";
public const string RmiName_GuildJoinRequestConfirmRes="";
public const string RmiName_GuildJoinRequestListRes="";
public const string RmiName_GuildLeaveNoti="";
public const string RmiName_GuildLeaveRes="";
public const string RmiName_GuildLiveInviteConfirmNoti="";
public const string RmiName_GuildLiveInviteConfirmRes="";
public const string RmiName_GuildLiveInviteNoti="";
public const string RmiName_GuildLiveInviteRes="";
public const string RmiName_GuildMemberInfoRes="";
public const string RmiName_GuildMemberNoti="";
public const string RmiName_GuildMemberStateV2Noti="";
public const string RmiName_GuildMemberUpdateNoti="";
public const string RmiName_GuildPointNoti="";
public const string RmiName_GuildSignRequestCancelRes="";
public const string RmiName_GuildSignRequestListRes="";
public const string RmiName_GuildSignRequestRes="";
public const string RmiName_GuildUpdateCrestNoti="";
public const string RmiName_GuildUpdateCurrencyV2Noti="";
public const string RmiName_GuildVoteInfoRes="";
public const string RmiName_GuildVoteMasterImpeachRes="";
public const string RmiName_GuildVoteNoti="";
public const string RmiName_GuildVoteRes="";
public const string RmiName_GuildWarehouseChangeSizeV2Res="";
public const string RmiName_GuildWarehouseInfoV2Res="";
public const string RmiName_GuildWarehouseItemMoveV2Res="";
public const string RmiName_GuildWarehouseWalletMoveV2Res="";
public const string RmiName_GuildRubyNoti="";
public const string RmiName_GuildCronNoti="";
public const string RmiName_GuildTerritoryInfoRes="";
public const string RmiName_GuildTerritorySetRes="";
public const string RmiName_WorldTerritoryOverviewRes="";
public const string RmiName_WorldBossLastAttackNoti="";
public const string RmiName_DungeonClearHistoryV2Noti="";
public const string RmiName_DungeonClearV2Noti="";
public const string RmiName_DungeonCronUpdateV2Noti="";
public const string RmiName_DungeonEnterV2Res="";
public const string RmiName_DungeonExpUpdateV2Noti="";
public const string RmiName_DungeonGiveUpV2Res="";
public const string RmiName_DungeonLeaveV2Res="";
public const string RmiName_DungeonLoadingCompleteAllV2Noti="";
public const string RmiName_DungeonLoadingCompleteV2Res="";
public const string RmiName_ExpDungeonClearNoti="";
public const string RmiName_EquipDungeonClearNoti="";
public const string RmiName_MineralDungeonClearNoti="";
public const string RmiName_PartyDungeonClearNoti="";
public const string RmiName_InteractStartRes="";
public const string RmiName_InteractEndRes="";
public const string RmiName_InteractCancelRes="";
public const string RmiName_InteractNoti="";
public const string RmiName_EquipmentVisibleV2Res="";
public const string RmiName_InventoryChangeSizeV2Res="";
public const string RmiName_ItemAddOptionV2Res="";
public const string RmiName_ItemAddV2Noti="";
public const string RmiName_ItemChangeOptionV2Res="";
public const string RmiName_ItemCollectionBookmarksRegisterV2Res="";
public const string RmiName_ItemCollectionBookmarksUnregisterV2Res="";
public const string RmiName_ItemCollectionListV2Noti="";
public const string RmiName_ItemCollectionRegisterV2Res="";
public const string RmiName_ItemCombineV2Res="";
public const string RmiName_ItemDeleteV2Noti="";
public const string RmiName_ItemDeleteV2Res="";
public const string RmiName_ItemDisassembleV2Res="";
public const string RmiName_ItemEnchantV2Res="";
public const string RmiName_ItemEquipV2Noti="";
public const string RmiName_ItemEquipV2Res="";
public const string RmiName_ItemIntensionV2Res="";
public const string RmiName_ItemMixOptionV2Res="";
public const string RmiName_ItemPackageUseV2Res="";
public const string RmiName_ItemProductionV2Res="";
public const string RmiName_ItemSelectUseV2Res="";
public const string RmiName_ItemUpdateV2Noti="";
public const string RmiName_ItemUpgradeV2Res="";
public const string RmiName_ItemUseV2Res="";
public const string RmiName_PkLootingAddV2Noti="";
public const string RmiName_PkLootingItemV2Res="";
public const string RmiName_PkLootingListV2Res="";
public const string RmiName_PkLootingV2Noti="";
public const string RmiName_PlayerInventoryExtendInfoNoti="";
public const string RmiName_PlayerInventoryInfoV2Noti="";
public const string RmiName_WarehouseChangeSizeV2Res="";
public const string RmiName_WarehouseInfoV2Res="";
public const string RmiName_WarehouseItemMoveV2Res="";
public const string RmiName_ItemIntentionSucceedNoti="";
public const string RmiName_ItemSetLockRes="";
public const string RmiName_ItemMarketPriceRes="";
public const string RmiName_ItemInheritRes="";
public const string RmiName_MailListV2Res="";
public const string RmiName_MailReadAllV2Res="";
public const string RmiName_MailReadV2Res="";
public const string RmiName_MatchingApplyRes="";
public const string RmiName_MatchingCancelRes="";
public const string RmiName_MatchingCompleteNoti="";
public const string RmiName_MatchingIncompleteNoti="";
public const string RmiName_MatchingMatchedNoti="";
public const string RmiName_MatchingRejectReplyNoti="";
public const string RmiName_MatchingReplyNoti="";
public const string RmiName_MatchingReplyRes="";
public const string RmiName_AuthenticatePlayerCredentialRes="";
public const string RmiName_BindStonesNoti="";
public const string RmiName_BroadCastContextNoti="";
public const string RmiName_BroadCastContextRes="";
public const string RmiName_CutSceneEndV2Res="";
public const string RmiName_CutSceneStartV2Res="";
public const string RmiName_CutSceneStateV2Noti="";
public const string RmiName_DebugPlayerStateV2Noti="";
public const string RmiName_LogOutRes="";
public const string RmiName_PortalV2Res="";
public const string RmiName_ReturnToLobbyRes="";
public const string RmiName_ServerTimeV2Res="";
public const string RmiName_SystemMessageV2Noti="";
public const string RmiName_TemporalFluxZoneEnterNoti="";
public const string RmiName_TemporalFluxZoneExitNoti="";
public const string RmiName_TestPacketV2Noti="";
public const string RmiName_TestPacketV2Res="";
public const string RmiName_TicketInfoV2Noti="";
public const string RmiName_TriggerActivateMapMoveV2Noti="";
public const string RmiName_TriggerActivateV2Res="";
public const string RmiName_UnionV2Res="";
public const string RmiName_ZoneLoadingCompletedRes="";
public const string RmiName_BossDamagedInfoNoti="";
public const string RmiName_BossFirstDamagedNoti="";
public const string RmiName_BossKilledNoti="";
public const string RmiName_BossKilledRewardNoti="";
public const string RmiName_GainMessageNoti="";
public const string RmiName_TicketUpdateNoti="";
public const string RmiName_BossDamagedInfoRes="";
public const string RmiName_WorldBossDamagedInfoNoti="";
public const string RmiName_BossTakenDamageOnPlayerKillNoti="";
public const string RmiName_PartyChangeLootingNoti="";
public const string RmiName_PartyChangeLootingRes="";
public const string RmiName_PartyCreateRes="";
public const string RmiName_PartyDisbandNoti="";
public const string RmiName_PartyDisbandRes="";
public const string RmiName_PartyDungeonEntranceInquiryRes="";
public const string RmiName_PartyEnterDungeonCanceledNoti="";
public const string RmiName_PartyEnterDungeonNoti="";
public const string RmiName_PartyEnterDungeonReplyNoti="";
public const string RmiName_PartyEnterDungeonReplyRes="";
public const string RmiName_PartyEnterDungeonRes="";
public const string RmiName_PartyEnterNoti="";
public const string RmiName_PartyInfoNoti="";
public const string RmiName_PartyInfoRes="";
public const string RmiName_PartyInviteNoti="";
public const string RmiName_PartyInviteReplyNoti="";
public const string RmiName_PartyInviteReplyRes="";
public const string RmiName_PartyInviteRes="";
public const string RmiName_PartyKickedNoti="";
public const string RmiName_PartyLeaderChangeNoti="";
public const string RmiName_PartyLeaderChangeRes="";
public const string RmiName_PartyLeaveNoti="";
public const string RmiName_PartyLeaveRes="";
public const string RmiName_PartyMemberKickNoti="";
public const string RmiName_PartyMemberKickRes="";
public const string RmiName_PartyMemberUpdateNoti="";
public const string RmiName_PartySuggestionPlayersRes="";
public const string RmiName_PartyEnterDungeonCanceledRes="";
public const string RmiName_PetCollectInfoV2Res="";
public const string RmiName_PetEquipOffV2Noti="";
public const string RmiName_PetEquipOffV2Res="";
public const string RmiName_PetEquipV2Noti="";
public const string RmiName_PetEquipV2Res="";
public const string RmiName_PetFeedUseV2Res="";
public const string RmiName_PetGachaV2Res="";
public const string RmiName_PetInfoV2Res="";
public const string RmiName_PetMixV2Res="";
public const string RmiName_PetUpgradeV2Res="";
public const string RmiName_PetInActiveBuffRes="";
public const string RmiName_PhaseFieldEndV2Res="";
public const string RmiName_PhaseFieldStartV2Res="";
public const string RmiName_PlayerCrimeV2Noti="";
public const string RmiName_PlayerDeleteRes="";
public const string RmiName_PlayerEventV2Noti="";
public const string RmiName_PlayerExpChangeV2Noti="";
public const string RmiName_PlayerGetMacroRes="";
public const string RmiName_PlayerLootingV2Noti="";
public const string RmiName_PlayerMapMoveV2Res="";
public const string RmiName_PlayerMoveV2Noti="";
public const string RmiName_PlayerMoveV2Res="";
public const string RmiName_PlayerTendencyNoti="";
public const string RmiName_PlayerPvpValueNoti="";
public const string RmiName_PlayerResurrectionV2Noti="";
public const string RmiName_PlayerResurrectionV2Res="";
public const string RmiName_PlayerSetMacroRes="";
public const string RmiName_PlayerStatChangeV2Noti="";
public const string RmiName_PlayerStatPointChangeV2Noti="";
public const string RmiName_PlayerStatPointChangeV2Res="";
public const string RmiName_PlayerStatPointInitV2Res="";
public const string RmiName_PlayerStatV2Res="";
public const string RmiName_PlayerWalletUpdateV2Noti="";
public const string RmiName_PlayerWalletV2Noti="";
public const string RmiName_PlayerWantedV2Noti="";
public const string RmiName_PlayerDeathInfoRes="";
public const string RmiName_RecoverPlayerExpRes="";
public const string RmiName_PlayerCombatCapabilityNoti="";
public const string RmiName_PlayerClassUpV2Res="";
public const string RmiName_QuickslotSetRes="";
public const string RmiName_QuickslotListNoti="";
public const string RmiName_MembershipAddNoti="";
public const string RmiName_MembershipUpdateNoti="";
public const string RmiName_MembershipListNoti="";
public const string RmiName_PlayerExpRecoveryPopupRes="";
public const string RmiName_RTTPlayerMoveV2Res="";
public const string RmiName_CheatGetQuestV2Noti="";
public const string RmiName_DailyQuestOpenV2Noti="";
public const string RmiName_PlayerQuestProgressV2Noti="";
public const string RmiName_QuestAbandonV2Res="";
public const string RmiName_QuestAcceptV2Res="";
public const string RmiName_QuestCompleteV2Res="";
public const string RmiName_QuestConditionCompleteV2Res="";
public const string RmiName_QuestListV2Res="";
public const string RmiName_QuestPortalV2Res="";
public const string RmiName_QuestRegisterV2Res="";
public const string RmiName_QuestRerollV2Res="";
public const string RmiName_QuestResetCheatV2Noti="";
public const string RmiName_QuestRewardV2Res="";
public const string RmiName_QuestTalkCompleteV2Res="";
public const string RmiName_ResetDailyQuestV2Noti="";
public const string RmiName_TutorialSkipV2Res="";
public const string RmiName_GuildRelationRes="";
public const string RmiName_PlayerRelationRes="";
public const string RmiName_RelationsNoti="";
public const string RmiName_RideAttachDeleteV2Res="";
public const string RmiName_RideAttachDisassembleV2Res="";
public const string RmiName_RideAttachEquipOffV2Noti="";
public const string RmiName_RideAttachEquipOffV2Res="";
public const string RmiName_RideAttachEquipV2Noti="";
public const string RmiName_RideAttachEquipV2Res="";
public const string RmiName_RideAttachGachaV2Res="";
public const string RmiName_RideAttachInvenExtendV2Res="";
public const string RmiName_RideCollectInfosNoti="";
public const string RmiName_RideEquipOffV2Res="";
public const string RmiName_RideEquipV2Res="";
public const string RmiName_RideGachaV2Res="";
public const string RmiName_RideInfosNoti="";
public const string RmiName_RideMixV2Res="";
public const string RmiName_RideSitOffV2Noti="";
public const string RmiName_RideSitOffV2Res="";
public const string RmiName_RideSitV2Noti="";
public const string RmiName_RideSitV2Res="";
public const string RmiName_BuyCashShopItemV2Res="";
public const string RmiName_BuyGameShopItemV2Res="";
public const string RmiName_GameShopSellItemV2Res="";
public const string RmiName_ShopBuyCountListNoti="";
public const string RmiName_ChangedSiegeWarMatchInfoV2Noti="";
public const string RmiName_ChangeSiegeModeV2Res="";
public const string RmiName_ChangeSiegeWarInfoV2Noti="";
public const string RmiName_ChangeSiegeWarObjectInfoV2Noti="";
public const string RmiName_ChoiceSiegeWarFactionV2Res="";
public const string RmiName_CreatedDungeonSiegeWarV2Noti="";
public const string RmiName_DungeonSiegeWarClearV2Noti="";
public const string RmiName_GetSiegeWarInfoV2Res="";
public const string RmiName_GetSiegeWarMatchInfoV2Res="";
public const string RmiName_ShowLocalizationV2Noti="";
public const string RmiName_ActorChangeBattleModeV2Noti="";
public const string RmiName_BuffListInfoV2Res="";
public const string RmiName_SkillChangeAutoUseV2Res="";
public const string RmiName_SkillChangePresetV2Res="";
public const string RmiName_SkillDotEffectV2Noti="";
public const string RmiName_SkillEquipV2Res="";
public const string RmiName_SkillHitEffectV2Noti="";
public const string RmiName_SkillHitV2Noti="";
public const string RmiName_SkillHitV2Res="";
public const string RmiName_SkillLearnV2Res="";
public const string RmiName_SkillLevelUpV2Res="";
public const string RmiName_SkillListInfoV2Res="";
public const string RmiName_SkillPreActionEndV2Noti="";
public const string RmiName_SkillPresetInfosNoti="";
public const string RmiName_SkillUnEquipV2Res="";
public const string RmiName_SkillUpgradeV2Res="";
public const string RmiName_SkillUseV2Noti="";
public const string RmiName_SkillUseV2Res="";
public const string RmiName_SkillDotHealEffectV2Noti="";
public const string RmiName_RTTSkillUseV2Res="";
public const string RmiName_RTTSkillHitV2Res="";
public const string RmiName_TitleAddV2Noti="";
public const string RmiName_TitleChangeV2Noti="";
public const string RmiName_TitleChangeV2Res="";
public const string RmiName_TitleConditionUpdateV2Noti="";
public const string RmiName_TitleListV2Res="";
public const string RmiName_TradeCronAverageBalanceRes="";
public const string RmiName_TradeCronBalanceRes="";
public const string RmiName_TradeCronBuyRes="";
public const string RmiName_TradeCronInfoRes="";
public const string RmiName_TradeCronListRes="";
public const string RmiName_TradeCronPreviousDayBalanceRes="";
public const string RmiName_TradeCronSellRes="";
public const string RmiName_TradeCronWeeklyBalanceRes="";
public const string RmiName_TradePersonalListNoti="";
public const string RmiName_TradePersonalRequestRes="";
public const string RmiName_TradePersonalUpdateNoti="";
public const string RmiName_TradePersonalAddNoti="";
public const string RmiName_TradePersonalDeleteNoti="";
public const string RmiName_TradePersonalAcceptRes="";
public const string RmiName_TradePersonalRefuseRes="";
public const string RmiName_TradePersonalCancelRes="";
public const string RmiName_TradePersonalWithdrawRes="";
public const string RmiName_TradePersonalFinishRes="";
public const string RmiName_TradePersonalHistoryRes="";
public const string RmiName_TradeCronMyListRes="";
public const string RmiName_TradeCronSettleRes="";
public const string RmiName_TradeCronTradesRes="";
public const string RmiName_TradeCronTimeToNextChangeBalanceRes="";
public const string RmiName_TradeCronCancelRes="";
public const string RmiName_TradeCronReclaimExpiredRes="";
public const string RmiName_TradeCronRemainingCanceledPenaltyTimeRes="";
public const string RmiName_TradeItemSellListNoti="";
public const string RmiName_TradeItemUpdateNoti="";
public const string RmiName_TradeItemDeleteNoti="";
public const string RmiName_TradeItemRegistRes="";
public const string RmiName_TradeItemCancelRes="";
public const string RmiName_TradeItemBuyRes="";
public const string RmiName_TradeItemWithdrawRes="";
public const string RmiName_TradeItemFinishRes="";
public const string RmiName_TradeItemHistoryRes="";
public const string RmiName_TradeItemSearchCategoryRes="";
public const string RmiName_TradeItemSearchItemIndexRes="";
public const string RmiName_TradeItemSearchListNoti="";
public const string RmiName_TradeItemBookmarkAddRes="";
public const string RmiName_TradeItemBookmarkDeleteRes="";
public const string RmiName_TradeItemBookmarkListNoti="";
public const string RmiName_WeaponAppearanceCollectListV2Noti="";
public const string RmiName_WeaponAppearanceCollectListV2Res="";
public const string RmiName_WeaponAppearanceEquipV2Noti="";
public const string RmiName_WeaponAppearanceEquipV2Res="";
public const string RmiName_WeaponAppearanceExtractFromItemV2Res="";
public const string RmiName_WeaponAppearanceGachaV2Res="";
public const string RmiName_WeaponAppearanceHiddenV2Noti="";
public const string RmiName_WeaponAppearanceHiddenV2Res="";
public const string RmiName_WeaponAppearanceListV2Noti="";
public const string RmiName_WeaponAppearanceListV2Res="";
public const string RmiName_WeaponAppearanceUnequipV2Noti="";
public const string RmiName_WeaponAppearanceUnequipV2Res="";
public const string RmiName_AccountCreateNameRes="";
public const string RmiName_ZoneStatusRes="";
public const string RmiName_ZoneStatusNoti="";
public const string RmiName_BloodFogEnterRes="";
public const string RmiName_BloodFogLeaveRes="";
public const string RmiName_BloodFogUseBuffRes="";
public const string RmiName_BloodFogChangeWaveNoti="";
public const string RmiName_BloodFogEventNoti="";
public const string RmiName_BloodFogKickoutNoti="";
public const string RmiName_BloodFogPlayerDeathNoti="";
public const string RmiName_BloodFogPlayerPointUpdateNoti="";
public const string RmiName_BloodFogPlayerRankUpdateNoti="";
public const string RmiName_BloodFogResultNoti="";
public const string RmiName_S2CRttRes="";
public const string RmiName_S2CRttReq="";
       
public const string RmiName_First = "";
		#endif

		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

