




// Generated by PIDL compiler.
// Do not modify this file, but modify the source .pidl file.

using System;
using System.Net;	     

            
using System.Collections.Generic; 
namespace NetProtocol.Packet.C2G
{
	public class Stub:Nettention.Proud.RmiStub
	{
public AfterRmiInvocationDelegate AfterRmiInvocation = delegate(Nettention.Proud.AfterRmiSummary summary) {};
public BeforeRmiInvocationDelegate BeforeRmiInvocation = delegate(Nettention.Proud.BeforeRmiSummary summary) {};

		public delegate bool PlayerSelectReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerSelectReq packet);  
		public PlayerSelectReqDelegate PlayerSelectReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerSelectReq packet)
		{ 
			return false;
		};
		public delegate bool PlayerEnterStageFirstReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerEnterStageFirstReq packet);  
		public PlayerEnterStageFirstReqDelegate PlayerEnterStageFirstReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerEnterStageFirstReq packet)
		{ 
			return false;
		};
		public delegate bool PlayerEnterStageSecondReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerEnterStageSecondReq packet);  
		public PlayerEnterStageSecondReqDelegate PlayerEnterStageSecondReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerEnterStageSecondReq packet)
		{ 
			return false;
		};
		public delegate bool PlayerEnterStageThirdReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerEnterStageThirdReq packet);  
		public PlayerEnterStageThirdReqDelegate PlayerEnterStageThirdReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerEnterStageThirdReq packet)
		{ 
			return false;
		};
		public delegate bool PlayerEnterStageFourthReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerEnterStageFourthReq packet);  
		public PlayerEnterStageFourthReqDelegate PlayerEnterStageFourthReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerEnterStageFourthReq packet)
		{ 
			return false;
		};
		public delegate bool PlayerEnterStageFifthReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerEnterStageFifthReq packet);  
		public PlayerEnterStageFifthReqDelegate PlayerEnterStageFifthReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerEnterStageFifthReq packet)
		{ 
			return false;
		};
		public delegate bool PlayerGameEnterReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerGameEnterReq packet);  
		public PlayerGameEnterReqDelegate PlayerGameEnterReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerGameEnterReq packet)
		{ 
			return false;
		};
		public delegate bool AuthenticateBotCredentialReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.AuthenticateBotCredentialReq packet);  
		public AuthenticateBotCredentialReqDelegate AuthenticateBotCredentialReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.AuthenticateBotCredentialReq packet)
		{ 
			return false;
		};
		public delegate bool DesignateBindStoneReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.DesignateBindStoneReq packet);  
		public DesignateBindStoneReqDelegate DesignateBindStoneReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.DesignateBindStoneReq packet)
		{ 
			return false;
		};
		public delegate bool PortalByBindStoneReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PortalByBindStoneReq packet);  
		public PortalByBindStoneReqDelegate PortalByBindStoneReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PortalByBindStoneReq packet)
		{ 
			return false;
		};
		public delegate bool PlayerBlackRosterGetPreferenceReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerBlackRosterGetPreferenceReq packet);  
		public PlayerBlackRosterGetPreferenceReqDelegate PlayerBlackRosterGetPreferenceReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerBlackRosterGetPreferenceReq packet)
		{ 
			return false;
		};
		public delegate bool PlayerBlackRosterObservingReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerBlackRosterObservingReq packet);  
		public PlayerBlackRosterObservingReqDelegate PlayerBlackRosterObservingReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerBlackRosterObservingReq packet)
		{ 
			return false;
		};
		public delegate bool PlayerBlackRosterProvocationReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerBlackRosterProvocationReq packet);  
		public PlayerBlackRosterProvocationReqDelegate PlayerBlackRosterProvocationReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerBlackRosterProvocationReq packet)
		{ 
			return false;
		};
		public delegate bool PlayerBlackRosterRankReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerBlackRosterRankReq packet);  
		public PlayerBlackRosterRankReqDelegate PlayerBlackRosterRankReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerBlackRosterRankReq packet)
		{ 
			return false;
		};
		public delegate bool PlayerBlackRosterRevengeReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerBlackRosterRevengeReq packet);  
		public PlayerBlackRosterRevengeReqDelegate PlayerBlackRosterRevengeReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerBlackRosterRevengeReq packet)
		{ 
			return false;
		};
		public delegate bool PlayerBlackRosterSetPreferenceReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerBlackRosterSetPreferenceReq packet);  
		public PlayerBlackRosterSetPreferenceReqDelegate PlayerBlackRosterSetPreferenceReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerBlackRosterSetPreferenceReq packet)
		{ 
			return false;
		};
		public delegate bool PlayerBlackRostersReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerBlackRostersReq packet);  
		public PlayerBlackRostersReqDelegate PlayerBlackRostersReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerBlackRostersReq packet)
		{ 
			return false;
		};
		public delegate bool PlayerBlackRosterLastWeekRankReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerBlackRosterLastWeekRankReq packet);  
		public PlayerBlackRosterLastWeekRankReqDelegate PlayerBlackRosterLastWeekRankReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerBlackRosterLastWeekRankReq packet)
		{ 
			return false;
		};
		public delegate bool CheatMessageV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.CheatMessageV2Req packet);  
		public CheatMessageV2ReqDelegate CheatMessageV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.CheatMessageV2Req packet)
		{ 
			return false;
		};
		public delegate bool AccountBlockPlayerAddReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.AccountBlockPlayerAddReq packet);  
		public AccountBlockPlayerAddReqDelegate AccountBlockPlayerAddReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.AccountBlockPlayerAddReq packet)
		{ 
			return false;
		};
		public delegate bool AccountBlockPlayerDeleteReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.AccountBlockPlayerDeleteReq packet);  
		public AccountBlockPlayerDeleteReqDelegate AccountBlockPlayerDeleteReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.AccountBlockPlayerDeleteReq packet)
		{ 
			return false;
		};
		public delegate bool AccountBlockPlayerReasonEditReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.AccountBlockPlayerReasonEditReq packet);  
		public AccountBlockPlayerReasonEditReqDelegate AccountBlockPlayerReasonEditReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.AccountBlockPlayerReasonEditReq packet)
		{ 
			return false;
		};
		public delegate bool AccountBlockPlayersReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.AccountBlockPlayersReq packet);  
		public AccountBlockPlayersReqDelegate AccountBlockPlayersReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.AccountBlockPlayersReq packet)
		{ 
			return false;
		};
		public delegate bool ChatMessageV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ChatMessageV2Req packet);  
		public ChatMessageV2ReqDelegate ChatMessageV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ChatMessageV2Req packet)
		{ 
			return false;
		};
		public delegate bool PlayerSearchV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerSearchV2Req packet);  
		public PlayerSearchV2ReqDelegate PlayerSearchV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerSearchV2Req packet)
		{ 
			return false;
		};
		public delegate bool LinkItemInfoReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.LinkItemInfoReq packet);  
		public LinkItemInfoReqDelegate LinkItemInfoReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.LinkItemInfoReq packet)
		{ 
			return false;
		};
		public delegate bool CostumeCardBuildReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.CostumeCardBuildReq packet);  
		public CostumeCardBuildReqDelegate CostumeCardBuildReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.CostumeCardBuildReq packet)
		{ 
			return false;
		};
		public delegate bool CostumeCardGachaReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.CostumeCardGachaReq packet);  
		public CostumeCardGachaReqDelegate CostumeCardGachaReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.CostumeCardGachaReq packet)
		{ 
			return false;
		};
		public delegate bool CostumeCardInfoReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CostumeCardInfoReqDelegate CostumeCardInfoReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CostumeCardMixReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.CostumeCardMixReq packet);  
		public CostumeCardMixReqDelegate CostumeCardMixReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.CostumeCardMixReq packet)
		{ 
			return false;
		};
		public delegate bool CostumeCollectReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CostumeCollectReqDelegate CostumeCollectReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CostumeEquipBodyReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.CostumeEquipBodyReq packet);  
		public CostumeEquipBodyReqDelegate CostumeEquipBodyReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.CostumeEquipBodyReq packet)
		{ 
			return false;
		};
		public delegate bool CostumeEquipBodyShowReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.CostumeEquipBodyShowReq packet);  
		public CostumeEquipBodyShowReqDelegate CostumeEquipBodyShowReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.CostumeEquipBodyShowReq packet)
		{ 
			return false;
		};
		public delegate bool CostumeEquipHeadReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.CostumeEquipHeadReq packet);  
		public CostumeEquipHeadReqDelegate CostumeEquipHeadReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.CostumeEquipHeadReq packet)
		{ 
			return false;
		};
		public delegate bool CostumeEquipHeadShowReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.CostumeEquipHeadShowReq packet);  
		public CostumeEquipHeadShowReqDelegate CostumeEquipHeadShowReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.CostumeEquipHeadShowReq packet)
		{ 
			return false;
		};
		public delegate bool CostumeInfoReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CostumeInfoReqDelegate CostumeInfoReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool CostumeConfirmAcceptReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.CostumeConfirmAcceptReq packet);  
		public CostumeConfirmAcceptReqDelegate CostumeConfirmAcceptReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.CostumeConfirmAcceptReq packet)
		{ 
			return false;
		};
		public delegate bool CostumeConfirmChangeReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.CostumeConfirmChangeReq packet);  
		public CostumeConfirmChangeReqDelegate CostumeConfirmChangeReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.CostumeConfirmChangeReq packet)
		{ 
			return false;
		};
		public delegate bool CostumeConfirmInfoReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public CostumeConfirmInfoReqDelegate CostumeConfirmInfoReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool PortalEffectReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PortalEffectReq packet);  
		public PortalEffectReqDelegate PortalEffectReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PortalEffectReq packet)
		{ 
			return false;
		};
		public delegate bool AttainmentDailyRewardV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.AttainmentDailyRewardV2Req packet);  
		public AttainmentDailyRewardV2ReqDelegate AttainmentDailyRewardV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.AttainmentDailyRewardV2Req packet)
		{ 
			return false;
		};
		public delegate bool AttainmentNormalRewardV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.AttainmentNormalRewardV2Req packet);  
		public AttainmentNormalRewardV2ReqDelegate AttainmentNormalRewardV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.AttainmentNormalRewardV2Req packet)
		{ 
			return false;
		};
		public delegate bool AttendanceRewardV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.AttendanceRewardV2Req packet);  
		public AttendanceRewardV2ReqDelegate AttendanceRewardV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.AttendanceRewardV2Req packet)
		{ 
			return false;
		};
		public delegate bool BossScheduleReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.BossScheduleReq packet);  
		public BossScheduleReqDelegate BossScheduleReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.BossScheduleReq packet)
		{ 
			return false;
		};
		public delegate bool EventExchangeRewardV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.EventExchangeRewardV2Req packet);  
		public EventExchangeRewardV2ReqDelegate EventExchangeRewardV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.EventExchangeRewardV2Req packet)
		{ 
			return false;
		};
		public delegate bool GuildAdminBuffActiveReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildAdminBuffActiveReq packet);  
		public GuildAdminBuffActiveReqDelegate GuildAdminBuffActiveReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildAdminBuffActiveReq packet)
		{ 
			return false;
		};
		public delegate bool GuildAdminBuffBuyReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildAdminBuffBuyReq packet);  
		public GuildAdminBuffBuyReqDelegate GuildAdminBuffBuyReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildAdminBuffBuyReq packet)
		{ 
			return false;
		};
		public delegate bool GuildAdminInfoReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public GuildAdminInfoReqDelegate GuildAdminInfoReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool GuildAdminLevelUpReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildAdminLevelUpReq packet);  
		public GuildAdminLevelUpReqDelegate GuildAdminLevelUpReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildAdminLevelUpReq packet)
		{ 
			return false;
		};
		public delegate bool GuildAdminMasterChangeReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildAdminMasterChangeReq packet);  
		public GuildAdminMasterChangeReqDelegate GuildAdminMasterChangeReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildAdminMasterChangeReq packet)
		{ 
			return false;
		};
		public delegate bool GuildAdminMemberBanishReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildAdminMemberBanishReq packet);  
		public GuildAdminMemberBanishReqDelegate GuildAdminMemberBanishReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildAdminMemberBanishReq packet)
		{ 
			return false;
		};
		public delegate bool GuildAdminMemberUpdateReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildAdminMemberUpdateReq packet);  
		public GuildAdminMemberUpdateReqDelegate GuildAdminMemberUpdateReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildAdminMemberUpdateReq packet)
		{ 
			return false;
		};
		public delegate bool GuildAdminUpdateBaseReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildAdminUpdateBaseReq packet);  
		public GuildAdminUpdateBaseReqDelegate GuildAdminUpdateBaseReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildAdminUpdateBaseReq packet)
		{ 
			return false;
		};
		public delegate bool GuildAdminUpdateIntroReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildAdminUpdateIntroReq packet);  
		public GuildAdminUpdateIntroReqDelegate GuildAdminUpdateIntroReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildAdminUpdateIntroReq packet)
		{ 
			return false;
		};
		public delegate bool GuildAdminUpdateNoticeReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildAdminUpdateNoticeReq packet);  
		public GuildAdminUpdateNoticeReqDelegate GuildAdminUpdateNoticeReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildAdminUpdateNoticeReq packet)
		{ 
			return false;
		};
		public delegate bool GuildAdminUpdateTendencyReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildAdminUpdateTendencyReq packet);  
		public GuildAdminUpdateTendencyReqDelegate GuildAdminUpdateTendencyReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildAdminUpdateTendencyReq packet)
		{ 
			return false;
		};
		public delegate bool GuildAdminUpdateTypeReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildAdminUpdateTypeReq packet);  
		public GuildAdminUpdateTypeReqDelegate GuildAdminUpdateTypeReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildAdminUpdateTypeReq packet)
		{ 
			return false;
		};
		public delegate bool GuildAttendReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public GuildAttendReqDelegate GuildAttendReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool GuildBuffInfoReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public GuildBuffInfoReqDelegate GuildBuffInfoReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool GuildCreateReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildCreateReq packet);  
		public GuildCreateReqDelegate GuildCreateReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildCreateReq packet)
		{ 
			return false;
		};
		public delegate bool GuildDeleteReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public GuildDeleteReqDelegate GuildDeleteReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool GuildDonateReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildDonateReq packet);  
		public GuildDonateReqDelegate GuildDonateReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildDonateReq packet)
		{ 
			return false;
		};
		public delegate bool GuildDonationByCronV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public GuildDonationByCronV2ReqDelegate GuildDonationByCronV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool GuildFindReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildFindReq packet);  
		public GuildFindReqDelegate GuildFindReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildFindReq packet)
		{ 
			return false;
		};
		public delegate bool GuildHistroyReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildHistroyReq packet);  
		public GuildHistroyReqDelegate GuildHistroyReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildHistroyReq packet)
		{ 
			return false;
		};
		public delegate bool GuildInfoCallReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildInfoCallReq packet);  
		public GuildInfoCallReqDelegate GuildInfoCallReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildInfoCallReq packet)
		{ 
			return false;
		};
		public delegate bool GuildInfoReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public GuildInfoReqDelegate GuildInfoReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool GuildJoinRequestConfirmReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildJoinRequestConfirmReq packet);  
		public GuildJoinRequestConfirmReqDelegate GuildJoinRequestConfirmReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildJoinRequestConfirmReq packet)
		{ 
			return false;
		};
		public delegate bool GuildJoinRequestListReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public GuildJoinRequestListReqDelegate GuildJoinRequestListReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool GuildLeaveReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public GuildLeaveReqDelegate GuildLeaveReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool GuildLiveInviteConfirmReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildLiveInviteConfirmReq packet);  
		public GuildLiveInviteConfirmReqDelegate GuildLiveInviteConfirmReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildLiveInviteConfirmReq packet)
		{ 
			return false;
		};
		public delegate bool GuildLiveInviteReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildLiveInviteReq packet);  
		public GuildLiveInviteReqDelegate GuildLiveInviteReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildLiveInviteReq packet)
		{ 
			return false;
		};
		public delegate bool GuildMemberInfoReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public GuildMemberInfoReqDelegate GuildMemberInfoReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool GuildSignRequestCancelReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildSignRequestCancelReq packet);  
		public GuildSignRequestCancelReqDelegate GuildSignRequestCancelReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildSignRequestCancelReq packet)
		{ 
			return false;
		};
		public delegate bool GuildSignRequestListReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public GuildSignRequestListReqDelegate GuildSignRequestListReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool GuildSignRequestReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildSignRequestReq packet);  
		public GuildSignRequestReqDelegate GuildSignRequestReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildSignRequestReq packet)
		{ 
			return false;
		};
		public delegate bool GuildVoteInfoReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public GuildVoteInfoReqDelegate GuildVoteInfoReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool GuildVoteMasterImpeachReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public GuildVoteMasterImpeachReqDelegate GuildVoteMasterImpeachReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool GuildVoteReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildVoteReq packet);  
		public GuildVoteReqDelegate GuildVoteReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildVoteReq packet)
		{ 
			return false;
		};
		public delegate bool GuildWaitingMemberListV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public GuildWaitingMemberListV2ReqDelegate GuildWaitingMemberListV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool GuildWarehouseChangeSizeV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildWarehouseChangeSizeV2Req packet);  
		public GuildWarehouseChangeSizeV2ReqDelegate GuildWarehouseChangeSizeV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildWarehouseChangeSizeV2Req packet)
		{ 
			return false;
		};
		public delegate bool GuildWarehouseInfoV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public GuildWarehouseInfoV2ReqDelegate GuildWarehouseInfoV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool GuildWarehouseItemMoveV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildWarehouseItemMoveV2Req packet);  
		public GuildWarehouseItemMoveV2ReqDelegate GuildWarehouseItemMoveV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildWarehouseItemMoveV2Req packet)
		{ 
			return false;
		};
		public delegate bool GuildWarehouseWalletMoveV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildWarehouseWalletMoveV2Req packet);  
		public GuildWarehouseWalletMoveV2ReqDelegate GuildWarehouseWalletMoveV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildWarehouseWalletMoveV2Req packet)
		{ 
			return false;
		};
		public delegate bool GuildTerritoryInfoReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildTerritoryInfoReq packet);  
		public GuildTerritoryInfoReqDelegate GuildTerritoryInfoReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildTerritoryInfoReq packet)
		{ 
			return false;
		};
		public delegate bool GuildTerritorySetReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildTerritorySetReq packet);  
		public GuildTerritorySetReqDelegate GuildTerritorySetReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildTerritorySetReq packet)
		{ 
			return false;
		};
		public delegate bool WorldTerritoryOverviewReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.WorldTerritoryOverviewReq packet);  
		public WorldTerritoryOverviewReqDelegate WorldTerritoryOverviewReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.WorldTerritoryOverviewReq packet)
		{ 
			return false;
		};
		public delegate bool DungeonEnterV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.DungeonEnterV2Req packet);  
		public DungeonEnterV2ReqDelegate DungeonEnterV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.DungeonEnterV2Req packet)
		{ 
			return false;
		};
		public delegate bool DungeonGiveUpV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.DungeonGiveUpV2Req packet);  
		public DungeonGiveUpV2ReqDelegate DungeonGiveUpV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.DungeonGiveUpV2Req packet)
		{ 
			return false;
		};
		public delegate bool DungeonLeaveV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.DungeonLeaveV2Req packet);  
		public DungeonLeaveV2ReqDelegate DungeonLeaveV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.DungeonLeaveV2Req packet)
		{ 
			return false;
		};
		public delegate bool DungeonLoadingCompleteV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.DungeonLoadingCompleteV2Req packet);  
		public DungeonLoadingCompleteV2ReqDelegate DungeonLoadingCompleteV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.DungeonLoadingCompleteV2Req packet)
		{ 
			return false;
		};
		public delegate bool InteractStartReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.InteractStartReq packet);  
		public InteractStartReqDelegate InteractStartReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.InteractStartReq packet)
		{ 
			return false;
		};
		public delegate bool InteractEndReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.InteractEndReq packet);  
		public InteractEndReqDelegate InteractEndReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.InteractEndReq packet)
		{ 
			return false;
		};
		public delegate bool InteractCancelReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.InteractCancelReq packet);  
		public InteractCancelReqDelegate InteractCancelReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.InteractCancelReq packet)
		{ 
			return false;
		};
		public delegate bool EquipmentVisibleV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.EquipmentVisibleV2Req packet);  
		public EquipmentVisibleV2ReqDelegate EquipmentVisibleV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.EquipmentVisibleV2Req packet)
		{ 
			return false;
		};
		public delegate bool InventoryChangeSizeV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.InventoryChangeSizeV2Req packet);  
		public InventoryChangeSizeV2ReqDelegate InventoryChangeSizeV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.InventoryChangeSizeV2Req packet)
		{ 
			return false;
		};
		public delegate bool ItemAddOptionV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemAddOptionV2Req packet);  
		public ItemAddOptionV2ReqDelegate ItemAddOptionV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemAddOptionV2Req packet)
		{ 
			return false;
		};
		public delegate bool ItemChangeOptionV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemChangeOptionV2Req packet);  
		public ItemChangeOptionV2ReqDelegate ItemChangeOptionV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemChangeOptionV2Req packet)
		{ 
			return false;
		};
		public delegate bool ItemCollectionBookmarksRegisterV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemCollectionBookmarksRegisterV2Req packet);  
		public ItemCollectionBookmarksRegisterV2ReqDelegate ItemCollectionBookmarksRegisterV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemCollectionBookmarksRegisterV2Req packet)
		{ 
			return false;
		};
		public delegate bool ItemCollectionBookmarksUnregisterV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemCollectionBookmarksUnregisterV2Req packet);  
		public ItemCollectionBookmarksUnregisterV2ReqDelegate ItemCollectionBookmarksUnregisterV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemCollectionBookmarksUnregisterV2Req packet)
		{ 
			return false;
		};
		public delegate bool ItemCollectionRegisterV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemCollectionRegisterV2Req packet);  
		public ItemCollectionRegisterV2ReqDelegate ItemCollectionRegisterV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemCollectionRegisterV2Req packet)
		{ 
			return false;
		};
		public delegate bool ItemCombineV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemCombineV2Req packet);  
		public ItemCombineV2ReqDelegate ItemCombineV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemCombineV2Req packet)
		{ 
			return false;
		};
		public delegate bool ItemDeleteV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemDeleteV2Req packet);  
		public ItemDeleteV2ReqDelegate ItemDeleteV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemDeleteV2Req packet)
		{ 
			return false;
		};
		public delegate bool ItemDisassembleV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemDisassembleV2Req packet);  
		public ItemDisassembleV2ReqDelegate ItemDisassembleV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemDisassembleV2Req packet)
		{ 
			return false;
		};
		public delegate bool ItemEnchantV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemEnchantV2Req packet);  
		public ItemEnchantV2ReqDelegate ItemEnchantV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemEnchantV2Req packet)
		{ 
			return false;
		};
		public delegate bool ItemEquipV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemEquipV2Req packet);  
		public ItemEquipV2ReqDelegate ItemEquipV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemEquipV2Req packet)
		{ 
			return false;
		};
		public delegate bool ItemIntensionV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemIntensionV2Req packet);  
		public ItemIntensionV2ReqDelegate ItemIntensionV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemIntensionV2Req packet)
		{ 
			return false;
		};
		public delegate bool ItemMixOptionV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemMixOptionV2Req packet);  
		public ItemMixOptionV2ReqDelegate ItemMixOptionV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemMixOptionV2Req packet)
		{ 
			return false;
		};
		public delegate bool ItemPackageUseV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemPackageUseV2Req packet);  
		public ItemPackageUseV2ReqDelegate ItemPackageUseV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemPackageUseV2Req packet)
		{ 
			return false;
		};
		public delegate bool ItemProductionV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemProductionV2Req packet);  
		public ItemProductionV2ReqDelegate ItemProductionV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemProductionV2Req packet)
		{ 
			return false;
		};
		public delegate bool ItemSelectUseV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemSelectUseV2Req packet);  
		public ItemSelectUseV2ReqDelegate ItemSelectUseV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemSelectUseV2Req packet)
		{ 
			return false;
		};
		public delegate bool ItemUpgradeV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemUpgradeV2Req packet);  
		public ItemUpgradeV2ReqDelegate ItemUpgradeV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemUpgradeV2Req packet)
		{ 
			return false;
		};
		public delegate bool ItemUseV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemUseV2Req packet);  
		public ItemUseV2ReqDelegate ItemUseV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemUseV2Req packet)
		{ 
			return false;
		};
		public delegate bool PkLootingItemV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PkLootingItemV2Req packet);  
		public PkLootingItemV2ReqDelegate PkLootingItemV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PkLootingItemV2Req packet)
		{ 
			return false;
		};
		public delegate bool PkLootingListV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PkLootingListV2Req packet);  
		public PkLootingListV2ReqDelegate PkLootingListV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PkLootingListV2Req packet)
		{ 
			return false;
		};
		public delegate bool WarehouseChangeSizeV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.WarehouseChangeSizeV2Req packet);  
		public WarehouseChangeSizeV2ReqDelegate WarehouseChangeSizeV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.WarehouseChangeSizeV2Req packet)
		{ 
			return false;
		};
		public delegate bool WarehouseInfoV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.WarehouseInfoV2Req packet);  
		public WarehouseInfoV2ReqDelegate WarehouseInfoV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.WarehouseInfoV2Req packet)
		{ 
			return false;
		};
		public delegate bool WarehouseItemMoveV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.WarehouseItemMoveV2Req packet);  
		public WarehouseItemMoveV2ReqDelegate WarehouseItemMoveV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.WarehouseItemMoveV2Req packet)
		{ 
			return false;
		};
		public delegate bool ItemSetLockReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemSetLockReq packet);  
		public ItemSetLockReqDelegate ItemSetLockReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemSetLockReq packet)
		{ 
			return false;
		};
		public delegate bool ItemMarketPriceReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemMarketPriceReq packet);  
		public ItemMarketPriceReqDelegate ItemMarketPriceReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemMarketPriceReq packet)
		{ 
			return false;
		};
		public delegate bool ItemInheritReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemInheritReq packet);  
		public ItemInheritReqDelegate ItemInheritReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ItemInheritReq packet)
		{ 
			return false;
		};
		public delegate bool MailListV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.MailListV2Req packet);  
		public MailListV2ReqDelegate MailListV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.MailListV2Req packet)
		{ 
			return false;
		};
		public delegate bool MailReadAllV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.MailReadAllV2Req packet);  
		public MailReadAllV2ReqDelegate MailReadAllV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.MailReadAllV2Req packet)
		{ 
			return false;
		};
		public delegate bool MailReadV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.MailReadV2Req packet);  
		public MailReadV2ReqDelegate MailReadV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.MailReadV2Req packet)
		{ 
			return false;
		};
		public delegate bool MatchingApplyReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.MatchingApplyReq packet);  
		public MatchingApplyReqDelegate MatchingApplyReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.MatchingApplyReq packet)
		{ 
			return false;
		};
		public delegate bool MatchingCancelReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.MatchingCancelReq packet);  
		public MatchingCancelReqDelegate MatchingCancelReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.MatchingCancelReq packet)
		{ 
			return false;
		};
		public delegate bool MatchingReplyReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.MatchingReplyReq packet);  
		public MatchingReplyReqDelegate MatchingReplyReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.MatchingReplyReq packet)
		{ 
			return false;
		};
		public delegate bool AuthenticatePlayerCredentialReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.AuthenticatePlayerCredentialReq packet);  
		public AuthenticatePlayerCredentialReqDelegate AuthenticatePlayerCredentialReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.AuthenticatePlayerCredentialReq packet)
		{ 
			return false;
		};
		public delegate bool BroadCastContextReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.BroadCastContextReq packet);  
		public BroadCastContextReqDelegate BroadCastContextReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.BroadCastContextReq packet)
		{ 
			return false;
		};
		public delegate bool CutSceneEndV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.CutSceneEndV2Req packet);  
		public CutSceneEndV2ReqDelegate CutSceneEndV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.CutSceneEndV2Req packet)
		{ 
			return false;
		};
		public delegate bool CutSceneStartV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.CutSceneStartV2Req packet);  
		public CutSceneStartV2ReqDelegate CutSceneStartV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.CutSceneStartV2Req packet)
		{ 
			return false;
		};
		public delegate bool LogOutReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.LogOutReq packet);  
		public LogOutReqDelegate LogOutReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.LogOutReq packet)
		{ 
			return false;
		};
		public delegate bool PortalV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PortalV2Req packet);  
		public PortalV2ReqDelegate PortalV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PortalV2Req packet)
		{ 
			return false;
		};
		public delegate bool ReturnToLobbyReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ReturnToLobbyReq packet);  
		public ReturnToLobbyReqDelegate ReturnToLobbyReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ReturnToLobbyReq packet)
		{ 
			return false;
		};
		public delegate bool ServerTimeV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ServerTimeV2ReqDelegate ServerTimeV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool TestPacketV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TestPacketV2Req packet);  
		public TestPacketV2ReqDelegate TestPacketV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TestPacketV2Req packet)
		{ 
			return false;
		};
		public delegate bool TriggerActivateV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TriggerActivateV2Req packet);  
		public TriggerActivateV2ReqDelegate TriggerActivateV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TriggerActivateV2Req packet)
		{ 
			return false;
		};
		public delegate bool UnionV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.UnionV2Req packet);  
		public UnionV2ReqDelegate UnionV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.UnionV2Req packet)
		{ 
			return false;
		};
		public delegate bool ZoneLoadingCompletedReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public ZoneLoadingCompletedReqDelegate ZoneLoadingCompletedReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool BossDamagedInfoReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.BossDamagedInfoReq packet);  
		public BossDamagedInfoReqDelegate BossDamagedInfoReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.BossDamagedInfoReq packet)
		{ 
			return false;
		};
		public delegate bool PartyChangeLootingReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PartyChangeLootingReq packet);  
		public PartyChangeLootingReqDelegate PartyChangeLootingReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PartyChangeLootingReq packet)
		{ 
			return false;
		};
		public delegate bool PartyCreateReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PartyCreateReq packet);  
		public PartyCreateReqDelegate PartyCreateReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PartyCreateReq packet)
		{ 
			return false;
		};
		public delegate bool PartyDisbandReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PartyDisbandReq packet);  
		public PartyDisbandReqDelegate PartyDisbandReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PartyDisbandReq packet)
		{ 
			return false;
		};
		public delegate bool PartyDungeonEntranceInquiryReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PartyDungeonEntranceInquiryReq packet);  
		public PartyDungeonEntranceInquiryReqDelegate PartyDungeonEntranceInquiryReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PartyDungeonEntranceInquiryReq packet)
		{ 
			return false;
		};
		public delegate bool PartyEnterDungeonReplyReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PartyEnterDungeonReplyReq packet);  
		public PartyEnterDungeonReplyReqDelegate PartyEnterDungeonReplyReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PartyEnterDungeonReplyReq packet)
		{ 
			return false;
		};
		public delegate bool PartyEnterDungeonReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PartyEnterDungeonReq packet);  
		public PartyEnterDungeonReqDelegate PartyEnterDungeonReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PartyEnterDungeonReq packet)
		{ 
			return false;
		};
		public delegate bool PartyInfoReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PartyInfoReq packet);  
		public PartyInfoReqDelegate PartyInfoReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PartyInfoReq packet)
		{ 
			return false;
		};
		public delegate bool PartyInviteReplyReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PartyInviteReplyReq packet);  
		public PartyInviteReplyReqDelegate PartyInviteReplyReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PartyInviteReplyReq packet)
		{ 
			return false;
		};
		public delegate bool PartyInviteReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PartyInviteReq packet);  
		public PartyInviteReqDelegate PartyInviteReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PartyInviteReq packet)
		{ 
			return false;
		};
		public delegate bool PartyLeaderChangeReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PartyLeaderChangeReq packet);  
		public PartyLeaderChangeReqDelegate PartyLeaderChangeReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PartyLeaderChangeReq packet)
		{ 
			return false;
		};
		public delegate bool PartyLeaveReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PartyLeaveReq packet);  
		public PartyLeaveReqDelegate PartyLeaveReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PartyLeaveReq packet)
		{ 
			return false;
		};
		public delegate bool PartyMemberKickReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PartyMemberKickReq packet);  
		public PartyMemberKickReqDelegate PartyMemberKickReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PartyMemberKickReq packet)
		{ 
			return false;
		};
		public delegate bool PartySuggestionPlayersReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PartySuggestionPlayersReq packet);  
		public PartySuggestionPlayersReqDelegate PartySuggestionPlayersReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PartySuggestionPlayersReq packet)
		{ 
			return false;
		};
		public delegate bool PartyEnterDungeonCanceledReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PartyEnterDungeonCanceledReq packet);  
		public PartyEnterDungeonCanceledReqDelegate PartyEnterDungeonCanceledReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PartyEnterDungeonCanceledReq packet)
		{ 
			return false;
		};
		public delegate bool PetCollectInfoV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PetCollectInfoV2Req packet);  
		public PetCollectInfoV2ReqDelegate PetCollectInfoV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PetCollectInfoV2Req packet)
		{ 
			return false;
		};
		public delegate bool PetEquipOffV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public PetEquipOffV2ReqDelegate PetEquipOffV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool PetEquipV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PetEquipV2Req packet);  
		public PetEquipV2ReqDelegate PetEquipV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PetEquipV2Req packet)
		{ 
			return false;
		};
		public delegate bool PetFeedUseV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PetFeedUseV2Req packet);  
		public PetFeedUseV2ReqDelegate PetFeedUseV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PetFeedUseV2Req packet)
		{ 
			return false;
		};
		public delegate bool PetGachaV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PetGachaV2Req packet);  
		public PetGachaV2ReqDelegate PetGachaV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PetGachaV2Req packet)
		{ 
			return false;
		};
		public delegate bool PetInfoV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public PetInfoV2ReqDelegate PetInfoV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool PetMixV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PetMixV2Req packet);  
		public PetMixV2ReqDelegate PetMixV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PetMixV2Req packet)
		{ 
			return false;
		};
		public delegate bool PetUpgradeV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PetUpgradeV2Req packet);  
		public PetUpgradeV2ReqDelegate PetUpgradeV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PetUpgradeV2Req packet)
		{ 
			return false;
		};
		public delegate bool PetInActiveBuffReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PetInActiveBuffReq packet);  
		public PetInActiveBuffReqDelegate PetInActiveBuffReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PetInActiveBuffReq packet)
		{ 
			return false;
		};
		public delegate bool PhaseFieldEndV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PhaseFieldEndV2Req packet);  
		public PhaseFieldEndV2ReqDelegate PhaseFieldEndV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PhaseFieldEndV2Req packet)
		{ 
			return false;
		};
		public delegate bool PhaseFieldStartV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PhaseFieldStartV2Req packet);  
		public PhaseFieldStartV2ReqDelegate PhaseFieldStartV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PhaseFieldStartV2Req packet)
		{ 
			return false;
		};
		public delegate bool PlayerDeleteReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerDeleteReq packet);  
		public PlayerDeleteReqDelegate PlayerDeleteReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerDeleteReq packet)
		{ 
			return false;
		};
		public delegate bool PlayerGetMacroReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerGetMacroReq packet);  
		public PlayerGetMacroReqDelegate PlayerGetMacroReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerGetMacroReq packet)
		{ 
			return false;
		};
		public delegate bool PlayerMapMoveV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerMapMoveV2Req packet);  
		public PlayerMapMoveV2ReqDelegate PlayerMapMoveV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerMapMoveV2Req packet)
		{ 
			return false;
		};
		public delegate bool PlayerMoveV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerMoveV2Req packet);  
		public PlayerMoveV2ReqDelegate PlayerMoveV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerMoveV2Req packet)
		{ 
			return false;
		};
		public delegate bool PlayerMoveZoneV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerMoveZoneV2Req packet);  
		public PlayerMoveZoneV2ReqDelegate PlayerMoveZoneV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerMoveZoneV2Req packet)
		{ 
			return false;
		};
		public delegate bool PlayerResurrectionV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerResurrectionV2Req packet);  
		public PlayerResurrectionV2ReqDelegate PlayerResurrectionV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerResurrectionV2Req packet)
		{ 
			return false;
		};
		public delegate bool PlayerSetMacroReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerSetMacroReq packet);  
		public PlayerSetMacroReqDelegate PlayerSetMacroReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerSetMacroReq packet)
		{ 
			return false;
		};
		public delegate bool PlayerSlotChangeV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerSlotChangeV2Req packet);  
		public PlayerSlotChangeV2ReqDelegate PlayerSlotChangeV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerSlotChangeV2Req packet)
		{ 
			return false;
		};
		public delegate bool PlayerStatPointChangeV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerStatPointChangeV2Req packet);  
		public PlayerStatPointChangeV2ReqDelegate PlayerStatPointChangeV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerStatPointChangeV2Req packet)
		{ 
			return false;
		};
		public delegate bool PlayerStatPointInitV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerStatPointInitV2Req packet);  
		public PlayerStatPointInitV2ReqDelegate PlayerStatPointInitV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerStatPointInitV2Req packet)
		{ 
			return false;
		};
		public delegate bool PlayerStatV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerStatV2Req packet);  
		public PlayerStatV2ReqDelegate PlayerStatV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerStatV2Req packet)
		{ 
			return false;
		};
		public delegate bool PlayerDeathInfoReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerDeathInfoReq packet);  
		public PlayerDeathInfoReqDelegate PlayerDeathInfoReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerDeathInfoReq packet)
		{ 
			return false;
		};
		public delegate bool RecoverPlayerExpReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.RecoverPlayerExpReq packet);  
		public RecoverPlayerExpReqDelegate RecoverPlayerExpReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.RecoverPlayerExpReq packet)
		{ 
			return false;
		};
		public delegate bool PlayerClassUpV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerClassUpV2Req packet);  
		public PlayerClassUpV2ReqDelegate PlayerClassUpV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerClassUpV2Req packet)
		{ 
			return false;
		};
		public delegate bool QuickslotSetReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.QuickslotSetReq packet);  
		public QuickslotSetReqDelegate QuickslotSetReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.QuickslotSetReq packet)
		{ 
			return false;
		};
		public delegate bool PlayerExpRecoveryPopupReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerExpRecoveryPopupReq packet);  
		public PlayerExpRecoveryPopupReqDelegate PlayerExpRecoveryPopupReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerExpRecoveryPopupReq packet)
		{ 
			return false;
		};
		public delegate bool RTTPlayerMoveV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.RTTPlayerMoveV2Req packet);  
		public RTTPlayerMoveV2ReqDelegate RTTPlayerMoveV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.RTTPlayerMoveV2Req packet)
		{ 
			return false;
		};
		public delegate bool QuestAbandonV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.QuestAbandonV2Req packet);  
		public QuestAbandonV2ReqDelegate QuestAbandonV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.QuestAbandonV2Req packet)
		{ 
			return false;
		};
		public delegate bool QuestAcceptV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.QuestAcceptV2Req packet);  
		public QuestAcceptV2ReqDelegate QuestAcceptV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.QuestAcceptV2Req packet)
		{ 
			return false;
		};
		public delegate bool QuestCompleteV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.QuestCompleteV2Req packet);  
		public QuestCompleteV2ReqDelegate QuestCompleteV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.QuestCompleteV2Req packet)
		{ 
			return false;
		};
		public delegate bool QuestConditionCompleteV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.QuestConditionCompleteV2Req packet);  
		public QuestConditionCompleteV2ReqDelegate QuestConditionCompleteV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.QuestConditionCompleteV2Req packet)
		{ 
			return false;
		};
		public delegate bool QuestListV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.QuestListV2Req packet);  
		public QuestListV2ReqDelegate QuestListV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.QuestListV2Req packet)
		{ 
			return false;
		};
		public delegate bool QuestPortalV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.QuestPortalV2Req packet);  
		public QuestPortalV2ReqDelegate QuestPortalV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.QuestPortalV2Req packet)
		{ 
			return false;
		};
		public delegate bool QuestRegisterV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.QuestRegisterV2Req packet);  
		public QuestRegisterV2ReqDelegate QuestRegisterV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.QuestRegisterV2Req packet)
		{ 
			return false;
		};
		public delegate bool QuestRerollV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public QuestRerollV2ReqDelegate QuestRerollV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool QuestRewardV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.QuestRewardV2Req packet);  
		public QuestRewardV2ReqDelegate QuestRewardV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.QuestRewardV2Req packet)
		{ 
			return false;
		};
		public delegate bool QuestTalkCompleteV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.QuestTalkCompleteV2Req packet);  
		public QuestTalkCompleteV2ReqDelegate QuestTalkCompleteV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.QuestTalkCompleteV2Req packet)
		{ 
			return false;
		};
		public delegate bool TutorialSkipV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public TutorialSkipV2ReqDelegate TutorialSkipV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool GuildRelationReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildRelationReq packet);  
		public GuildRelationReqDelegate GuildRelationReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GuildRelationReq packet)
		{ 
			return false;
		};
		public delegate bool PlayerRelationReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerRelationReq packet);  
		public PlayerRelationReqDelegate PlayerRelationReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerRelationReq packet)
		{ 
			return false;
		};
		public delegate bool RideAttachDeleteV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.RideAttachDeleteV2Req packet);  
		public RideAttachDeleteV2ReqDelegate RideAttachDeleteV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.RideAttachDeleteV2Req packet)
		{ 
			return false;
		};
		public delegate bool RideAttachDisassembleV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.RideAttachDisassembleV2Req packet);  
		public RideAttachDisassembleV2ReqDelegate RideAttachDisassembleV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.RideAttachDisassembleV2Req packet)
		{ 
			return false;
		};
		public delegate bool RideAttachEquipOffV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.RideAttachEquipOffV2Req packet);  
		public RideAttachEquipOffV2ReqDelegate RideAttachEquipOffV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.RideAttachEquipOffV2Req packet)
		{ 
			return false;
		};
		public delegate bool RideAttachEquipV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.RideAttachEquipV2Req packet);  
		public RideAttachEquipV2ReqDelegate RideAttachEquipV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.RideAttachEquipV2Req packet)
		{ 
			return false;
		};
		public delegate bool RideAttachGachaV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.RideAttachGachaV2Req packet);  
		public RideAttachGachaV2ReqDelegate RideAttachGachaV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.RideAttachGachaV2Req packet)
		{ 
			return false;
		};
		public delegate bool RideAttachInvenExtendV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.RideAttachInvenExtendV2Req packet);  
		public RideAttachInvenExtendV2ReqDelegate RideAttachInvenExtendV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.RideAttachInvenExtendV2Req packet)
		{ 
			return false;
		};
		public delegate bool RideEquipOffV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public RideEquipOffV2ReqDelegate RideEquipOffV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool RideEquipV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.RideEquipV2Req packet);  
		public RideEquipV2ReqDelegate RideEquipV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.RideEquipV2Req packet)
		{ 
			return false;
		};
		public delegate bool RideGachaV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.RideGachaV2Req packet);  
		public RideGachaV2ReqDelegate RideGachaV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.RideGachaV2Req packet)
		{ 
			return false;
		};
		public delegate bool RideMixV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.RideMixV2Req packet);  
		public RideMixV2ReqDelegate RideMixV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.RideMixV2Req packet)
		{ 
			return false;
		};
		public delegate bool RideSitOffV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public RideSitOffV2ReqDelegate RideSitOffV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool RideSitV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext);  
		public RideSitV2ReqDelegate RideSitV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext)
		{ 
			return false;
		};
		public delegate bool BuyCashShopItemV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.BuyCashShopItemV2Req packet);  
		public BuyCashShopItemV2ReqDelegate BuyCashShopItemV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.BuyCashShopItemV2Req packet)
		{ 
			return false;
		};
		public delegate bool BuyGameShopItemV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.BuyGameShopItemV2Req packet);  
		public BuyGameShopItemV2ReqDelegate BuyGameShopItemV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.BuyGameShopItemV2Req packet)
		{ 
			return false;
		};
		public delegate bool GameShopSellItemV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GameShopSellItemV2Req packet);  
		public GameShopSellItemV2ReqDelegate GameShopSellItemV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GameShopSellItemV2Req packet)
		{ 
			return false;
		};
		public delegate bool ChangeSiegeModeV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ChangeSiegeModeV2Req packet);  
		public ChangeSiegeModeV2ReqDelegate ChangeSiegeModeV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ChangeSiegeModeV2Req packet)
		{ 
			return false;
		};
		public delegate bool ChoiceSiegeWarFactionV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ChoiceSiegeWarFactionV2Req packet);  
		public ChoiceSiegeWarFactionV2ReqDelegate ChoiceSiegeWarFactionV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ChoiceSiegeWarFactionV2Req packet)
		{ 
			return false;
		};
		public delegate bool GetSiegeWarInfoV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GetSiegeWarInfoV2Req packet);  
		public GetSiegeWarInfoV2ReqDelegate GetSiegeWarInfoV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GetSiegeWarInfoV2Req packet)
		{ 
			return false;
		};
		public delegate bool GetSiegeWarMatchInfoV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GetSiegeWarMatchInfoV2Req packet);  
		public GetSiegeWarMatchInfoV2ReqDelegate GetSiegeWarMatchInfoV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.GetSiegeWarMatchInfoV2Req packet)
		{ 
			return false;
		};
		public delegate bool BuffListInfoV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.BuffListInfoV2Req packet);  
		public BuffListInfoV2ReqDelegate BuffListInfoV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.BuffListInfoV2Req packet)
		{ 
			return false;
		};
		public delegate bool SkillChangeAutoUseV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.SkillChangeAutoUseV2Req packet);  
		public SkillChangeAutoUseV2ReqDelegate SkillChangeAutoUseV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.SkillChangeAutoUseV2Req packet)
		{ 
			return false;
		};
		public delegate bool SkillChangePresetV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.SkillChangePresetV2Req packet);  
		public SkillChangePresetV2ReqDelegate SkillChangePresetV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.SkillChangePresetV2Req packet)
		{ 
			return false;
		};
		public delegate bool SkillEquipV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.SkillEquipV2Req packet);  
		public SkillEquipV2ReqDelegate SkillEquipV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.SkillEquipV2Req packet)
		{ 
			return false;
		};
		public delegate bool SkillHitV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.SkillHitV2Req packet);  
		public SkillHitV2ReqDelegate SkillHitV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.SkillHitV2Req packet)
		{ 
			return false;
		};
		public delegate bool SkillLearnV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.SkillLearnV2Req packet);  
		public SkillLearnV2ReqDelegate SkillLearnV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.SkillLearnV2Req packet)
		{ 
			return false;
		};
		public delegate bool SkillLevelUpV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.SkillLevelUpV2Req packet);  
		public SkillLevelUpV2ReqDelegate SkillLevelUpV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.SkillLevelUpV2Req packet)
		{ 
			return false;
		};
		public delegate bool SkillListInfoV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.SkillListInfoV2Req packet);  
		public SkillListInfoV2ReqDelegate SkillListInfoV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.SkillListInfoV2Req packet)
		{ 
			return false;
		};
		public delegate bool SkillUnEquipV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.SkillUnEquipV2Req packet);  
		public SkillUnEquipV2ReqDelegate SkillUnEquipV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.SkillUnEquipV2Req packet)
		{ 
			return false;
		};
		public delegate bool SkillUpgradeV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.SkillUpgradeV2Req packet);  
		public SkillUpgradeV2ReqDelegate SkillUpgradeV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.SkillUpgradeV2Req packet)
		{ 
			return false;
		};
		public delegate bool SkillUseV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.SkillUseV2Req packet);  
		public SkillUseV2ReqDelegate SkillUseV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.SkillUseV2Req packet)
		{ 
			return false;
		};
		public delegate bool RTTSkillUseV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.RTTSkillUseV2Req packet);  
		public RTTSkillUseV2ReqDelegate RTTSkillUseV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.RTTSkillUseV2Req packet)
		{ 
			return false;
		};
		public delegate bool RTTSkillHitV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.RTTSkillHitV2Req packet);  
		public RTTSkillHitV2ReqDelegate RTTSkillHitV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.RTTSkillHitV2Req packet)
		{ 
			return false;
		};
		public delegate bool PlayerTitleChangeV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerTitleChangeV2Req packet);  
		public PlayerTitleChangeV2ReqDelegate PlayerTitleChangeV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.PlayerTitleChangeV2Req packet)
		{ 
			return false;
		};
		public delegate bool TitleChangeV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TitleChangeV2Req packet);  
		public TitleChangeV2ReqDelegate TitleChangeV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TitleChangeV2Req packet)
		{ 
			return false;
		};
		public delegate bool TitleListV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TitleListV2Req packet);  
		public TitleListV2ReqDelegate TitleListV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TitleListV2Req packet)
		{ 
			return false;
		};
		public delegate bool TradeCronAverageBalanceReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeCronAverageBalanceReq packet);  
		public TradeCronAverageBalanceReqDelegate TradeCronAverageBalanceReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeCronAverageBalanceReq packet)
		{ 
			return false;
		};
		public delegate bool TradeCronBalanceReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeCronBalanceReq packet);  
		public TradeCronBalanceReqDelegate TradeCronBalanceReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeCronBalanceReq packet)
		{ 
			return false;
		};
		public delegate bool TradeCronBuyReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeCronBuyReq packet);  
		public TradeCronBuyReqDelegate TradeCronBuyReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeCronBuyReq packet)
		{ 
			return false;
		};
		public delegate bool TradeCronInfoReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeCronInfoReq packet);  
		public TradeCronInfoReqDelegate TradeCronInfoReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeCronInfoReq packet)
		{ 
			return false;
		};
		public delegate bool TradeCronListReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeCronListReq packet);  
		public TradeCronListReqDelegate TradeCronListReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeCronListReq packet)
		{ 
			return false;
		};
		public delegate bool TradeCronPreviousDayBalanceReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeCronPreviousDayBalanceReq packet);  
		public TradeCronPreviousDayBalanceReqDelegate TradeCronPreviousDayBalanceReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeCronPreviousDayBalanceReq packet)
		{ 
			return false;
		};
		public delegate bool TradeCronSellReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeCronSellReq packet);  
		public TradeCronSellReqDelegate TradeCronSellReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeCronSellReq packet)
		{ 
			return false;
		};
		public delegate bool TradeCronWeeklyBalanceReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeCronWeeklyBalanceReq packet);  
		public TradeCronWeeklyBalanceReqDelegate TradeCronWeeklyBalanceReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeCronWeeklyBalanceReq packet)
		{ 
			return false;
		};
		public delegate bool TradePersonalRequestReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradePersonalRequestReq packet);  
		public TradePersonalRequestReqDelegate TradePersonalRequestReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradePersonalRequestReq packet)
		{ 
			return false;
		};
		public delegate bool TradePersonalAcceptReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradePersonalAcceptReq packet);  
		public TradePersonalAcceptReqDelegate TradePersonalAcceptReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradePersonalAcceptReq packet)
		{ 
			return false;
		};
		public delegate bool TradePersonalRefuseReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradePersonalRefuseReq packet);  
		public TradePersonalRefuseReqDelegate TradePersonalRefuseReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradePersonalRefuseReq packet)
		{ 
			return false;
		};
		public delegate bool TradePersonalCancelReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradePersonalCancelReq packet);  
		public TradePersonalCancelReqDelegate TradePersonalCancelReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradePersonalCancelReq packet)
		{ 
			return false;
		};
		public delegate bool TradePersonalWithdrawReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradePersonalWithdrawReq packet);  
		public TradePersonalWithdrawReqDelegate TradePersonalWithdrawReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradePersonalWithdrawReq packet)
		{ 
			return false;
		};
		public delegate bool TradePersonalFinishReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradePersonalFinishReq packet);  
		public TradePersonalFinishReqDelegate TradePersonalFinishReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradePersonalFinishReq packet)
		{ 
			return false;
		};
		public delegate bool TradePersonalHistoryReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradePersonalHistoryReq packet);  
		public TradePersonalHistoryReqDelegate TradePersonalHistoryReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradePersonalHistoryReq packet)
		{ 
			return false;
		};
		public delegate bool TradeCronMyListReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeCronMyListReq packet);  
		public TradeCronMyListReqDelegate TradeCronMyListReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeCronMyListReq packet)
		{ 
			return false;
		};
		public delegate bool TradeCronSettleReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeCronSettleReq packet);  
		public TradeCronSettleReqDelegate TradeCronSettleReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeCronSettleReq packet)
		{ 
			return false;
		};
		public delegate bool TradeCronTradesReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeCronTradesReq packet);  
		public TradeCronTradesReqDelegate TradeCronTradesReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeCronTradesReq packet)
		{ 
			return false;
		};
		public delegate bool TradeCronTimeToNextChangeBalanceReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeCronTimeToNextChangeBalanceReq packet);  
		public TradeCronTimeToNextChangeBalanceReqDelegate TradeCronTimeToNextChangeBalanceReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeCronTimeToNextChangeBalanceReq packet)
		{ 
			return false;
		};
		public delegate bool TradeCronCancelReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeCronCancelReq packet);  
		public TradeCronCancelReqDelegate TradeCronCancelReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeCronCancelReq packet)
		{ 
			return false;
		};
		public delegate bool TradeCronReclaimExpiredReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeCronReclaimExpiredReq packet);  
		public TradeCronReclaimExpiredReqDelegate TradeCronReclaimExpiredReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeCronReclaimExpiredReq packet)
		{ 
			return false;
		};
		public delegate bool TradeCronRemainingCanceledPenaltyTimeReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeCronRemainingCanceledPenaltyTimeReq packet);  
		public TradeCronRemainingCanceledPenaltyTimeReqDelegate TradeCronRemainingCanceledPenaltyTimeReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeCronRemainingCanceledPenaltyTimeReq packet)
		{ 
			return false;
		};
		public delegate bool TradeItemRegistReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeItemRegistReq packet);  
		public TradeItemRegistReqDelegate TradeItemRegistReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeItemRegistReq packet)
		{ 
			return false;
		};
		public delegate bool TradeItemCancelReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeItemCancelReq packet);  
		public TradeItemCancelReqDelegate TradeItemCancelReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeItemCancelReq packet)
		{ 
			return false;
		};
		public delegate bool TradeItemBuyReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeItemBuyReq packet);  
		public TradeItemBuyReqDelegate TradeItemBuyReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeItemBuyReq packet)
		{ 
			return false;
		};
		public delegate bool TradeItemWithdrawReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeItemWithdrawReq packet);  
		public TradeItemWithdrawReqDelegate TradeItemWithdrawReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeItemWithdrawReq packet)
		{ 
			return false;
		};
		public delegate bool TradeItemFinishReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeItemFinishReq packet);  
		public TradeItemFinishReqDelegate TradeItemFinishReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeItemFinishReq packet)
		{ 
			return false;
		};
		public delegate bool TradeItemHistoryReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeItemHistoryReq packet);  
		public TradeItemHistoryReqDelegate TradeItemHistoryReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeItemHistoryReq packet)
		{ 
			return false;
		};
		public delegate bool TradeItemSearchCategoryReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeItemSearchCategoryReq packet);  
		public TradeItemSearchCategoryReqDelegate TradeItemSearchCategoryReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeItemSearchCategoryReq packet)
		{ 
			return false;
		};
		public delegate bool TradeItemSearchItemIndexReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeItemSearchItemIndexReq packet);  
		public TradeItemSearchItemIndexReqDelegate TradeItemSearchItemIndexReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeItemSearchItemIndexReq packet)
		{ 
			return false;
		};
		public delegate bool TradeItemBookmarkAddReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeItemBookmarkAddReq packet);  
		public TradeItemBookmarkAddReqDelegate TradeItemBookmarkAddReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeItemBookmarkAddReq packet)
		{ 
			return false;
		};
		public delegate bool TradeItemBookmarkDeleteReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeItemBookmarkDeleteReq packet);  
		public TradeItemBookmarkDeleteReqDelegate TradeItemBookmarkDeleteReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.TradeItemBookmarkDeleteReq packet)
		{ 
			return false;
		};
		public delegate bool WeaponAppearanceCollectListV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.WeaponAppearanceCollectListV2Req packet);  
		public WeaponAppearanceCollectListV2ReqDelegate WeaponAppearanceCollectListV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.WeaponAppearanceCollectListV2Req packet)
		{ 
			return false;
		};
		public delegate bool WeaponAppearanceEquipV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.WeaponAppearanceEquipV2Req packet);  
		public WeaponAppearanceEquipV2ReqDelegate WeaponAppearanceEquipV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.WeaponAppearanceEquipV2Req packet)
		{ 
			return false;
		};
		public delegate bool WeaponAppearanceExtractFromItemV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.WeaponAppearanceExtractFromItemV2Req packet);  
		public WeaponAppearanceExtractFromItemV2ReqDelegate WeaponAppearanceExtractFromItemV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.WeaponAppearanceExtractFromItemV2Req packet)
		{ 
			return false;
		};
		public delegate bool WeaponAppearanceHiddenV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.WeaponAppearanceHiddenV2Req packet);  
		public WeaponAppearanceHiddenV2ReqDelegate WeaponAppearanceHiddenV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.WeaponAppearanceHiddenV2Req packet)
		{ 
			return false;
		};
		public delegate bool WeaponAppearanceListV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.WeaponAppearanceListV2Req packet);  
		public WeaponAppearanceListV2ReqDelegate WeaponAppearanceListV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.WeaponAppearanceListV2Req packet)
		{ 
			return false;
		};
		public delegate bool WeaponAppearanceUnequipV2ReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.WeaponAppearanceUnequipV2Req packet);  
		public WeaponAppearanceUnequipV2ReqDelegate WeaponAppearanceUnequipV2Req = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.WeaponAppearanceUnequipV2Req packet)
		{ 
			return false;
		};
		public delegate bool AccountCreateNameReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.AccountCreateNameReq packet);  
		public AccountCreateNameReqDelegate AccountCreateNameReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.AccountCreateNameReq packet)
		{ 
			return false;
		};
		public delegate bool ZoneStatusReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ZoneStatusReq packet);  
		public ZoneStatusReqDelegate ZoneStatusReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.ZoneStatusReq packet)
		{ 
			return false;
		};
		public delegate bool BloodFogEnterReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.BloodFogEnterReq packet);  
		public BloodFogEnterReqDelegate BloodFogEnterReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.BloodFogEnterReq packet)
		{ 
			return false;
		};
		public delegate bool BloodFogLeaveReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.BloodFogLeaveReq packet);  
		public BloodFogLeaveReqDelegate BloodFogLeaveReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.BloodFogLeaveReq packet)
		{ 
			return false;
		};
		public delegate bool BloodFogUseBuffReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.BloodFogUseBuffReq packet);  
		public BloodFogUseBuffReqDelegate BloodFogUseBuffReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.BloodFogUseBuffReq packet)
		{ 
			return false;
		};
		public delegate bool C2SRttReqDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.C2SRttReq packet);  
		public C2SRttReqDelegate C2SRttReq = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.C2SRttReq packet)
		{ 
			return false;
		};
		public delegate bool C2SRttResDelegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.C2SRttRes packet);  
		public C2SRttResDelegate C2SRttRes = delegate(Nettention.Proud.HostID remote,Nettention.Proud.RmiContext rmiContext, C2G.C2SRttRes packet)
		{ 
			return false;
		};
	public override bool ProcessReceivedMessage(Nettention.Proud.ReceivedMessage pa, Object hostTag) 
	{
		Nettention.Proud.HostID remote=pa.RemoteHostID;
		if(remote==Nettention.Proud.HostID.HostID_None)
		{
			ShowUnknownHostIDWarning(remote);
		}

		Nettention.Proud.Message __msg=pa.ReadOnlyMessage;
		int orgReadOffset = __msg.ReadOffset;
        Nettention.Proud.RmiID __rmiID = Nettention.Proud.RmiID.RmiID_None;
        if (!__msg.Read( out __rmiID))
            goto __fail;
					
		switch(__rmiID)
		{
        case Common.PlayerSelectReq:
            ProcessReceivedMessage_PlayerSelectReq(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerEnterStageFirstReq:
            ProcessReceivedMessage_PlayerEnterStageFirstReq(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerEnterStageSecondReq:
            ProcessReceivedMessage_PlayerEnterStageSecondReq(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerEnterStageThirdReq:
            ProcessReceivedMessage_PlayerEnterStageThirdReq(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerEnterStageFourthReq:
            ProcessReceivedMessage_PlayerEnterStageFourthReq(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerEnterStageFifthReq:
            ProcessReceivedMessage_PlayerEnterStageFifthReq(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerGameEnterReq:
            ProcessReceivedMessage_PlayerGameEnterReq(__msg, pa, hostTag, remote);
            break;
        case Common.AuthenticateBotCredentialReq:
            ProcessReceivedMessage_AuthenticateBotCredentialReq(__msg, pa, hostTag, remote);
            break;
        case Common.DesignateBindStoneReq:
            ProcessReceivedMessage_DesignateBindStoneReq(__msg, pa, hostTag, remote);
            break;
        case Common.PortalByBindStoneReq:
            ProcessReceivedMessage_PortalByBindStoneReq(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerBlackRosterGetPreferenceReq:
            ProcessReceivedMessage_PlayerBlackRosterGetPreferenceReq(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerBlackRosterObservingReq:
            ProcessReceivedMessage_PlayerBlackRosterObservingReq(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerBlackRosterProvocationReq:
            ProcessReceivedMessage_PlayerBlackRosterProvocationReq(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerBlackRosterRankReq:
            ProcessReceivedMessage_PlayerBlackRosterRankReq(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerBlackRosterRevengeReq:
            ProcessReceivedMessage_PlayerBlackRosterRevengeReq(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerBlackRosterSetPreferenceReq:
            ProcessReceivedMessage_PlayerBlackRosterSetPreferenceReq(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerBlackRostersReq:
            ProcessReceivedMessage_PlayerBlackRostersReq(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerBlackRosterLastWeekRankReq:
            ProcessReceivedMessage_PlayerBlackRosterLastWeekRankReq(__msg, pa, hostTag, remote);
            break;
        case Common.CheatMessageV2Req:
            ProcessReceivedMessage_CheatMessageV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.AccountBlockPlayerAddReq:
            ProcessReceivedMessage_AccountBlockPlayerAddReq(__msg, pa, hostTag, remote);
            break;
        case Common.AccountBlockPlayerDeleteReq:
            ProcessReceivedMessage_AccountBlockPlayerDeleteReq(__msg, pa, hostTag, remote);
            break;
        case Common.AccountBlockPlayerReasonEditReq:
            ProcessReceivedMessage_AccountBlockPlayerReasonEditReq(__msg, pa, hostTag, remote);
            break;
        case Common.AccountBlockPlayersReq:
            ProcessReceivedMessage_AccountBlockPlayersReq(__msg, pa, hostTag, remote);
            break;
        case Common.ChatMessageV2Req:
            ProcessReceivedMessage_ChatMessageV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerSearchV2Req:
            ProcessReceivedMessage_PlayerSearchV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.LinkItemInfoReq:
            ProcessReceivedMessage_LinkItemInfoReq(__msg, pa, hostTag, remote);
            break;
        case Common.CostumeCardBuildReq:
            ProcessReceivedMessage_CostumeCardBuildReq(__msg, pa, hostTag, remote);
            break;
        case Common.CostumeCardGachaReq:
            ProcessReceivedMessage_CostumeCardGachaReq(__msg, pa, hostTag, remote);
            break;
        case Common.CostumeCardInfoReq:
            ProcessReceivedMessage_CostumeCardInfoReq(__msg, pa, hostTag, remote);
            break;
        case Common.CostumeCardMixReq:
            ProcessReceivedMessage_CostumeCardMixReq(__msg, pa, hostTag, remote);
            break;
        case Common.CostumeCollectReq:
            ProcessReceivedMessage_CostumeCollectReq(__msg, pa, hostTag, remote);
            break;
        case Common.CostumeEquipBodyReq:
            ProcessReceivedMessage_CostumeEquipBodyReq(__msg, pa, hostTag, remote);
            break;
        case Common.CostumeEquipBodyShowReq:
            ProcessReceivedMessage_CostumeEquipBodyShowReq(__msg, pa, hostTag, remote);
            break;
        case Common.CostumeEquipHeadReq:
            ProcessReceivedMessage_CostumeEquipHeadReq(__msg, pa, hostTag, remote);
            break;
        case Common.CostumeEquipHeadShowReq:
            ProcessReceivedMessage_CostumeEquipHeadShowReq(__msg, pa, hostTag, remote);
            break;
        case Common.CostumeInfoReq:
            ProcessReceivedMessage_CostumeInfoReq(__msg, pa, hostTag, remote);
            break;
        case Common.CostumeConfirmAcceptReq:
            ProcessReceivedMessage_CostumeConfirmAcceptReq(__msg, pa, hostTag, remote);
            break;
        case Common.CostumeConfirmChangeReq:
            ProcessReceivedMessage_CostumeConfirmChangeReq(__msg, pa, hostTag, remote);
            break;
        case Common.CostumeConfirmInfoReq:
            ProcessReceivedMessage_CostumeConfirmInfoReq(__msg, pa, hostTag, remote);
            break;
        case Common.PortalEffectReq:
            ProcessReceivedMessage_PortalEffectReq(__msg, pa, hostTag, remote);
            break;
        case Common.AttainmentDailyRewardV2Req:
            ProcessReceivedMessage_AttainmentDailyRewardV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.AttainmentNormalRewardV2Req:
            ProcessReceivedMessage_AttainmentNormalRewardV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.AttendanceRewardV2Req:
            ProcessReceivedMessage_AttendanceRewardV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.BossScheduleReq:
            ProcessReceivedMessage_BossScheduleReq(__msg, pa, hostTag, remote);
            break;
        case Common.EventExchangeRewardV2Req:
            ProcessReceivedMessage_EventExchangeRewardV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.GuildAdminBuffActiveReq:
            ProcessReceivedMessage_GuildAdminBuffActiveReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildAdminBuffBuyReq:
            ProcessReceivedMessage_GuildAdminBuffBuyReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildAdminInfoReq:
            ProcessReceivedMessage_GuildAdminInfoReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildAdminLevelUpReq:
            ProcessReceivedMessage_GuildAdminLevelUpReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildAdminMasterChangeReq:
            ProcessReceivedMessage_GuildAdminMasterChangeReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildAdminMemberBanishReq:
            ProcessReceivedMessage_GuildAdminMemberBanishReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildAdminMemberUpdateReq:
            ProcessReceivedMessage_GuildAdminMemberUpdateReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildAdminUpdateBaseReq:
            ProcessReceivedMessage_GuildAdminUpdateBaseReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildAdminUpdateIntroReq:
            ProcessReceivedMessage_GuildAdminUpdateIntroReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildAdminUpdateNoticeReq:
            ProcessReceivedMessage_GuildAdminUpdateNoticeReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildAdminUpdateTendencyReq:
            ProcessReceivedMessage_GuildAdminUpdateTendencyReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildAdminUpdateTypeReq:
            ProcessReceivedMessage_GuildAdminUpdateTypeReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildAttendReq:
            ProcessReceivedMessage_GuildAttendReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildBuffInfoReq:
            ProcessReceivedMessage_GuildBuffInfoReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildCreateReq:
            ProcessReceivedMessage_GuildCreateReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildDeleteReq:
            ProcessReceivedMessage_GuildDeleteReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildDonateReq:
            ProcessReceivedMessage_GuildDonateReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildDonationByCronV2Req:
            ProcessReceivedMessage_GuildDonationByCronV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.GuildFindReq:
            ProcessReceivedMessage_GuildFindReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildHistroyReq:
            ProcessReceivedMessage_GuildHistroyReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildInfoCallReq:
            ProcessReceivedMessage_GuildInfoCallReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildInfoReq:
            ProcessReceivedMessage_GuildInfoReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildJoinRequestConfirmReq:
            ProcessReceivedMessage_GuildJoinRequestConfirmReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildJoinRequestListReq:
            ProcessReceivedMessage_GuildJoinRequestListReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildLeaveReq:
            ProcessReceivedMessage_GuildLeaveReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildLiveInviteConfirmReq:
            ProcessReceivedMessage_GuildLiveInviteConfirmReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildLiveInviteReq:
            ProcessReceivedMessage_GuildLiveInviteReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildMemberInfoReq:
            ProcessReceivedMessage_GuildMemberInfoReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildSignRequestCancelReq:
            ProcessReceivedMessage_GuildSignRequestCancelReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildSignRequestListReq:
            ProcessReceivedMessage_GuildSignRequestListReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildSignRequestReq:
            ProcessReceivedMessage_GuildSignRequestReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildVoteInfoReq:
            ProcessReceivedMessage_GuildVoteInfoReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildVoteMasterImpeachReq:
            ProcessReceivedMessage_GuildVoteMasterImpeachReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildVoteReq:
            ProcessReceivedMessage_GuildVoteReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildWaitingMemberListV2Req:
            ProcessReceivedMessage_GuildWaitingMemberListV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.GuildWarehouseChangeSizeV2Req:
            ProcessReceivedMessage_GuildWarehouseChangeSizeV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.GuildWarehouseInfoV2Req:
            ProcessReceivedMessage_GuildWarehouseInfoV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.GuildWarehouseItemMoveV2Req:
            ProcessReceivedMessage_GuildWarehouseItemMoveV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.GuildWarehouseWalletMoveV2Req:
            ProcessReceivedMessage_GuildWarehouseWalletMoveV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.GuildTerritoryInfoReq:
            ProcessReceivedMessage_GuildTerritoryInfoReq(__msg, pa, hostTag, remote);
            break;
        case Common.GuildTerritorySetReq:
            ProcessReceivedMessage_GuildTerritorySetReq(__msg, pa, hostTag, remote);
            break;
        case Common.WorldTerritoryOverviewReq:
            ProcessReceivedMessage_WorldTerritoryOverviewReq(__msg, pa, hostTag, remote);
            break;
        case Common.DungeonEnterV2Req:
            ProcessReceivedMessage_DungeonEnterV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.DungeonGiveUpV2Req:
            ProcessReceivedMessage_DungeonGiveUpV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.DungeonLeaveV2Req:
            ProcessReceivedMessage_DungeonLeaveV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.DungeonLoadingCompleteV2Req:
            ProcessReceivedMessage_DungeonLoadingCompleteV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.InteractStartReq:
            ProcessReceivedMessage_InteractStartReq(__msg, pa, hostTag, remote);
            break;
        case Common.InteractEndReq:
            ProcessReceivedMessage_InteractEndReq(__msg, pa, hostTag, remote);
            break;
        case Common.InteractCancelReq:
            ProcessReceivedMessage_InteractCancelReq(__msg, pa, hostTag, remote);
            break;
        case Common.EquipmentVisibleV2Req:
            ProcessReceivedMessage_EquipmentVisibleV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.InventoryChangeSizeV2Req:
            ProcessReceivedMessage_InventoryChangeSizeV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.ItemAddOptionV2Req:
            ProcessReceivedMessage_ItemAddOptionV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.ItemChangeOptionV2Req:
            ProcessReceivedMessage_ItemChangeOptionV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.ItemCollectionBookmarksRegisterV2Req:
            ProcessReceivedMessage_ItemCollectionBookmarksRegisterV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.ItemCollectionBookmarksUnregisterV2Req:
            ProcessReceivedMessage_ItemCollectionBookmarksUnregisterV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.ItemCollectionRegisterV2Req:
            ProcessReceivedMessage_ItemCollectionRegisterV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.ItemCombineV2Req:
            ProcessReceivedMessage_ItemCombineV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.ItemDeleteV2Req:
            ProcessReceivedMessage_ItemDeleteV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.ItemDisassembleV2Req:
            ProcessReceivedMessage_ItemDisassembleV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.ItemEnchantV2Req:
            ProcessReceivedMessage_ItemEnchantV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.ItemEquipV2Req:
            ProcessReceivedMessage_ItemEquipV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.ItemIntensionV2Req:
            ProcessReceivedMessage_ItemIntensionV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.ItemMixOptionV2Req:
            ProcessReceivedMessage_ItemMixOptionV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.ItemPackageUseV2Req:
            ProcessReceivedMessage_ItemPackageUseV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.ItemProductionV2Req:
            ProcessReceivedMessage_ItemProductionV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.ItemSelectUseV2Req:
            ProcessReceivedMessage_ItemSelectUseV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.ItemUpgradeV2Req:
            ProcessReceivedMessage_ItemUpgradeV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.ItemUseV2Req:
            ProcessReceivedMessage_ItemUseV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.PkLootingItemV2Req:
            ProcessReceivedMessage_PkLootingItemV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.PkLootingListV2Req:
            ProcessReceivedMessage_PkLootingListV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.WarehouseChangeSizeV2Req:
            ProcessReceivedMessage_WarehouseChangeSizeV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.WarehouseInfoV2Req:
            ProcessReceivedMessage_WarehouseInfoV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.WarehouseItemMoveV2Req:
            ProcessReceivedMessage_WarehouseItemMoveV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.ItemSetLockReq:
            ProcessReceivedMessage_ItemSetLockReq(__msg, pa, hostTag, remote);
            break;
        case Common.ItemMarketPriceReq:
            ProcessReceivedMessage_ItemMarketPriceReq(__msg, pa, hostTag, remote);
            break;
        case Common.ItemInheritReq:
            ProcessReceivedMessage_ItemInheritReq(__msg, pa, hostTag, remote);
            break;
        case Common.MailListV2Req:
            ProcessReceivedMessage_MailListV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.MailReadAllV2Req:
            ProcessReceivedMessage_MailReadAllV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.MailReadV2Req:
            ProcessReceivedMessage_MailReadV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.MatchingApplyReq:
            ProcessReceivedMessage_MatchingApplyReq(__msg, pa, hostTag, remote);
            break;
        case Common.MatchingCancelReq:
            ProcessReceivedMessage_MatchingCancelReq(__msg, pa, hostTag, remote);
            break;
        case Common.MatchingReplyReq:
            ProcessReceivedMessage_MatchingReplyReq(__msg, pa, hostTag, remote);
            break;
        case Common.AuthenticatePlayerCredentialReq:
            ProcessReceivedMessage_AuthenticatePlayerCredentialReq(__msg, pa, hostTag, remote);
            break;
        case Common.BroadCastContextReq:
            ProcessReceivedMessage_BroadCastContextReq(__msg, pa, hostTag, remote);
            break;
        case Common.CutSceneEndV2Req:
            ProcessReceivedMessage_CutSceneEndV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.CutSceneStartV2Req:
            ProcessReceivedMessage_CutSceneStartV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.LogOutReq:
            ProcessReceivedMessage_LogOutReq(__msg, pa, hostTag, remote);
            break;
        case Common.PortalV2Req:
            ProcessReceivedMessage_PortalV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.ReturnToLobbyReq:
            ProcessReceivedMessage_ReturnToLobbyReq(__msg, pa, hostTag, remote);
            break;
        case Common.ServerTimeV2Req:
            ProcessReceivedMessage_ServerTimeV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.TestPacketV2Req:
            ProcessReceivedMessage_TestPacketV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.TriggerActivateV2Req:
            ProcessReceivedMessage_TriggerActivateV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.UnionV2Req:
            ProcessReceivedMessage_UnionV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.ZoneLoadingCompletedReq:
            ProcessReceivedMessage_ZoneLoadingCompletedReq(__msg, pa, hostTag, remote);
            break;
        case Common.BossDamagedInfoReq:
            ProcessReceivedMessage_BossDamagedInfoReq(__msg, pa, hostTag, remote);
            break;
        case Common.PartyChangeLootingReq:
            ProcessReceivedMessage_PartyChangeLootingReq(__msg, pa, hostTag, remote);
            break;
        case Common.PartyCreateReq:
            ProcessReceivedMessage_PartyCreateReq(__msg, pa, hostTag, remote);
            break;
        case Common.PartyDisbandReq:
            ProcessReceivedMessage_PartyDisbandReq(__msg, pa, hostTag, remote);
            break;
        case Common.PartyDungeonEntranceInquiryReq:
            ProcessReceivedMessage_PartyDungeonEntranceInquiryReq(__msg, pa, hostTag, remote);
            break;
        case Common.PartyEnterDungeonReplyReq:
            ProcessReceivedMessage_PartyEnterDungeonReplyReq(__msg, pa, hostTag, remote);
            break;
        case Common.PartyEnterDungeonReq:
            ProcessReceivedMessage_PartyEnterDungeonReq(__msg, pa, hostTag, remote);
            break;
        case Common.PartyInfoReq:
            ProcessReceivedMessage_PartyInfoReq(__msg, pa, hostTag, remote);
            break;
        case Common.PartyInviteReplyReq:
            ProcessReceivedMessage_PartyInviteReplyReq(__msg, pa, hostTag, remote);
            break;
        case Common.PartyInviteReq:
            ProcessReceivedMessage_PartyInviteReq(__msg, pa, hostTag, remote);
            break;
        case Common.PartyLeaderChangeReq:
            ProcessReceivedMessage_PartyLeaderChangeReq(__msg, pa, hostTag, remote);
            break;
        case Common.PartyLeaveReq:
            ProcessReceivedMessage_PartyLeaveReq(__msg, pa, hostTag, remote);
            break;
        case Common.PartyMemberKickReq:
            ProcessReceivedMessage_PartyMemberKickReq(__msg, pa, hostTag, remote);
            break;
        case Common.PartySuggestionPlayersReq:
            ProcessReceivedMessage_PartySuggestionPlayersReq(__msg, pa, hostTag, remote);
            break;
        case Common.PartyEnterDungeonCanceledReq:
            ProcessReceivedMessage_PartyEnterDungeonCanceledReq(__msg, pa, hostTag, remote);
            break;
        case Common.PetCollectInfoV2Req:
            ProcessReceivedMessage_PetCollectInfoV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.PetEquipOffV2Req:
            ProcessReceivedMessage_PetEquipOffV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.PetEquipV2Req:
            ProcessReceivedMessage_PetEquipV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.PetFeedUseV2Req:
            ProcessReceivedMessage_PetFeedUseV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.PetGachaV2Req:
            ProcessReceivedMessage_PetGachaV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.PetInfoV2Req:
            ProcessReceivedMessage_PetInfoV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.PetMixV2Req:
            ProcessReceivedMessage_PetMixV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.PetUpgradeV2Req:
            ProcessReceivedMessage_PetUpgradeV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.PetInActiveBuffReq:
            ProcessReceivedMessage_PetInActiveBuffReq(__msg, pa, hostTag, remote);
            break;
        case Common.PhaseFieldEndV2Req:
            ProcessReceivedMessage_PhaseFieldEndV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.PhaseFieldStartV2Req:
            ProcessReceivedMessage_PhaseFieldStartV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerDeleteReq:
            ProcessReceivedMessage_PlayerDeleteReq(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerGetMacroReq:
            ProcessReceivedMessage_PlayerGetMacroReq(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerMapMoveV2Req:
            ProcessReceivedMessage_PlayerMapMoveV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerMoveV2Req:
            ProcessReceivedMessage_PlayerMoveV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerMoveZoneV2Req:
            ProcessReceivedMessage_PlayerMoveZoneV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerResurrectionV2Req:
            ProcessReceivedMessage_PlayerResurrectionV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerSetMacroReq:
            ProcessReceivedMessage_PlayerSetMacroReq(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerSlotChangeV2Req:
            ProcessReceivedMessage_PlayerSlotChangeV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerStatPointChangeV2Req:
            ProcessReceivedMessage_PlayerStatPointChangeV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerStatPointInitV2Req:
            ProcessReceivedMessage_PlayerStatPointInitV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerStatV2Req:
            ProcessReceivedMessage_PlayerStatV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerDeathInfoReq:
            ProcessReceivedMessage_PlayerDeathInfoReq(__msg, pa, hostTag, remote);
            break;
        case Common.RecoverPlayerExpReq:
            ProcessReceivedMessage_RecoverPlayerExpReq(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerClassUpV2Req:
            ProcessReceivedMessage_PlayerClassUpV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.QuickslotSetReq:
            ProcessReceivedMessage_QuickslotSetReq(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerExpRecoveryPopupReq:
            ProcessReceivedMessage_PlayerExpRecoveryPopupReq(__msg, pa, hostTag, remote);
            break;
        case Common.RTTPlayerMoveV2Req:
            ProcessReceivedMessage_RTTPlayerMoveV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.QuestAbandonV2Req:
            ProcessReceivedMessage_QuestAbandonV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.QuestAcceptV2Req:
            ProcessReceivedMessage_QuestAcceptV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.QuestCompleteV2Req:
            ProcessReceivedMessage_QuestCompleteV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.QuestConditionCompleteV2Req:
            ProcessReceivedMessage_QuestConditionCompleteV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.QuestListV2Req:
            ProcessReceivedMessage_QuestListV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.QuestPortalV2Req:
            ProcessReceivedMessage_QuestPortalV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.QuestRegisterV2Req:
            ProcessReceivedMessage_QuestRegisterV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.QuestRerollV2Req:
            ProcessReceivedMessage_QuestRerollV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.QuestRewardV2Req:
            ProcessReceivedMessage_QuestRewardV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.QuestTalkCompleteV2Req:
            ProcessReceivedMessage_QuestTalkCompleteV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.TutorialSkipV2Req:
            ProcessReceivedMessage_TutorialSkipV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.GuildRelationReq:
            ProcessReceivedMessage_GuildRelationReq(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerRelationReq:
            ProcessReceivedMessage_PlayerRelationReq(__msg, pa, hostTag, remote);
            break;
        case Common.RideAttachDeleteV2Req:
            ProcessReceivedMessage_RideAttachDeleteV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.RideAttachDisassembleV2Req:
            ProcessReceivedMessage_RideAttachDisassembleV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.RideAttachEquipOffV2Req:
            ProcessReceivedMessage_RideAttachEquipOffV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.RideAttachEquipV2Req:
            ProcessReceivedMessage_RideAttachEquipV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.RideAttachGachaV2Req:
            ProcessReceivedMessage_RideAttachGachaV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.RideAttachInvenExtendV2Req:
            ProcessReceivedMessage_RideAttachInvenExtendV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.RideEquipOffV2Req:
            ProcessReceivedMessage_RideEquipOffV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.RideEquipV2Req:
            ProcessReceivedMessage_RideEquipV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.RideGachaV2Req:
            ProcessReceivedMessage_RideGachaV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.RideMixV2Req:
            ProcessReceivedMessage_RideMixV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.RideSitOffV2Req:
            ProcessReceivedMessage_RideSitOffV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.RideSitV2Req:
            ProcessReceivedMessage_RideSitV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.BuyCashShopItemV2Req:
            ProcessReceivedMessage_BuyCashShopItemV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.BuyGameShopItemV2Req:
            ProcessReceivedMessage_BuyGameShopItemV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.GameShopSellItemV2Req:
            ProcessReceivedMessage_GameShopSellItemV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.ChangeSiegeModeV2Req:
            ProcessReceivedMessage_ChangeSiegeModeV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.ChoiceSiegeWarFactionV2Req:
            ProcessReceivedMessage_ChoiceSiegeWarFactionV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.GetSiegeWarInfoV2Req:
            ProcessReceivedMessage_GetSiegeWarInfoV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.GetSiegeWarMatchInfoV2Req:
            ProcessReceivedMessage_GetSiegeWarMatchInfoV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.BuffListInfoV2Req:
            ProcessReceivedMessage_BuffListInfoV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.SkillChangeAutoUseV2Req:
            ProcessReceivedMessage_SkillChangeAutoUseV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.SkillChangePresetV2Req:
            ProcessReceivedMessage_SkillChangePresetV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.SkillEquipV2Req:
            ProcessReceivedMessage_SkillEquipV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.SkillHitV2Req:
            ProcessReceivedMessage_SkillHitV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.SkillLearnV2Req:
            ProcessReceivedMessage_SkillLearnV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.SkillLevelUpV2Req:
            ProcessReceivedMessage_SkillLevelUpV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.SkillListInfoV2Req:
            ProcessReceivedMessage_SkillListInfoV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.SkillUnEquipV2Req:
            ProcessReceivedMessage_SkillUnEquipV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.SkillUpgradeV2Req:
            ProcessReceivedMessage_SkillUpgradeV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.SkillUseV2Req:
            ProcessReceivedMessage_SkillUseV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.RTTSkillUseV2Req:
            ProcessReceivedMessage_RTTSkillUseV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.RTTSkillHitV2Req:
            ProcessReceivedMessage_RTTSkillHitV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.PlayerTitleChangeV2Req:
            ProcessReceivedMessage_PlayerTitleChangeV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.TitleChangeV2Req:
            ProcessReceivedMessage_TitleChangeV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.TitleListV2Req:
            ProcessReceivedMessage_TitleListV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.TradeCronAverageBalanceReq:
            ProcessReceivedMessage_TradeCronAverageBalanceReq(__msg, pa, hostTag, remote);
            break;
        case Common.TradeCronBalanceReq:
            ProcessReceivedMessage_TradeCronBalanceReq(__msg, pa, hostTag, remote);
            break;
        case Common.TradeCronBuyReq:
            ProcessReceivedMessage_TradeCronBuyReq(__msg, pa, hostTag, remote);
            break;
        case Common.TradeCronInfoReq:
            ProcessReceivedMessage_TradeCronInfoReq(__msg, pa, hostTag, remote);
            break;
        case Common.TradeCronListReq:
            ProcessReceivedMessage_TradeCronListReq(__msg, pa, hostTag, remote);
            break;
        case Common.TradeCronPreviousDayBalanceReq:
            ProcessReceivedMessage_TradeCronPreviousDayBalanceReq(__msg, pa, hostTag, remote);
            break;
        case Common.TradeCronSellReq:
            ProcessReceivedMessage_TradeCronSellReq(__msg, pa, hostTag, remote);
            break;
        case Common.TradeCronWeeklyBalanceReq:
            ProcessReceivedMessage_TradeCronWeeklyBalanceReq(__msg, pa, hostTag, remote);
            break;
        case Common.TradePersonalRequestReq:
            ProcessReceivedMessage_TradePersonalRequestReq(__msg, pa, hostTag, remote);
            break;
        case Common.TradePersonalAcceptReq:
            ProcessReceivedMessage_TradePersonalAcceptReq(__msg, pa, hostTag, remote);
            break;
        case Common.TradePersonalRefuseReq:
            ProcessReceivedMessage_TradePersonalRefuseReq(__msg, pa, hostTag, remote);
            break;
        case Common.TradePersonalCancelReq:
            ProcessReceivedMessage_TradePersonalCancelReq(__msg, pa, hostTag, remote);
            break;
        case Common.TradePersonalWithdrawReq:
            ProcessReceivedMessage_TradePersonalWithdrawReq(__msg, pa, hostTag, remote);
            break;
        case Common.TradePersonalFinishReq:
            ProcessReceivedMessage_TradePersonalFinishReq(__msg, pa, hostTag, remote);
            break;
        case Common.TradePersonalHistoryReq:
            ProcessReceivedMessage_TradePersonalHistoryReq(__msg, pa, hostTag, remote);
            break;
        case Common.TradeCronMyListReq:
            ProcessReceivedMessage_TradeCronMyListReq(__msg, pa, hostTag, remote);
            break;
        case Common.TradeCronSettleReq:
            ProcessReceivedMessage_TradeCronSettleReq(__msg, pa, hostTag, remote);
            break;
        case Common.TradeCronTradesReq:
            ProcessReceivedMessage_TradeCronTradesReq(__msg, pa, hostTag, remote);
            break;
        case Common.TradeCronTimeToNextChangeBalanceReq:
            ProcessReceivedMessage_TradeCronTimeToNextChangeBalanceReq(__msg, pa, hostTag, remote);
            break;
        case Common.TradeCronCancelReq:
            ProcessReceivedMessage_TradeCronCancelReq(__msg, pa, hostTag, remote);
            break;
        case Common.TradeCronReclaimExpiredReq:
            ProcessReceivedMessage_TradeCronReclaimExpiredReq(__msg, pa, hostTag, remote);
            break;
        case Common.TradeCronRemainingCanceledPenaltyTimeReq:
            ProcessReceivedMessage_TradeCronRemainingCanceledPenaltyTimeReq(__msg, pa, hostTag, remote);
            break;
        case Common.TradeItemRegistReq:
            ProcessReceivedMessage_TradeItemRegistReq(__msg, pa, hostTag, remote);
            break;
        case Common.TradeItemCancelReq:
            ProcessReceivedMessage_TradeItemCancelReq(__msg, pa, hostTag, remote);
            break;
        case Common.TradeItemBuyReq:
            ProcessReceivedMessage_TradeItemBuyReq(__msg, pa, hostTag, remote);
            break;
        case Common.TradeItemWithdrawReq:
            ProcessReceivedMessage_TradeItemWithdrawReq(__msg, pa, hostTag, remote);
            break;
        case Common.TradeItemFinishReq:
            ProcessReceivedMessage_TradeItemFinishReq(__msg, pa, hostTag, remote);
            break;
        case Common.TradeItemHistoryReq:
            ProcessReceivedMessage_TradeItemHistoryReq(__msg, pa, hostTag, remote);
            break;
        case Common.TradeItemSearchCategoryReq:
            ProcessReceivedMessage_TradeItemSearchCategoryReq(__msg, pa, hostTag, remote);
            break;
        case Common.TradeItemSearchItemIndexReq:
            ProcessReceivedMessage_TradeItemSearchItemIndexReq(__msg, pa, hostTag, remote);
            break;
        case Common.TradeItemBookmarkAddReq:
            ProcessReceivedMessage_TradeItemBookmarkAddReq(__msg, pa, hostTag, remote);
            break;
        case Common.TradeItemBookmarkDeleteReq:
            ProcessReceivedMessage_TradeItemBookmarkDeleteReq(__msg, pa, hostTag, remote);
            break;
        case Common.WeaponAppearanceCollectListV2Req:
            ProcessReceivedMessage_WeaponAppearanceCollectListV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.WeaponAppearanceEquipV2Req:
            ProcessReceivedMessage_WeaponAppearanceEquipV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.WeaponAppearanceExtractFromItemV2Req:
            ProcessReceivedMessage_WeaponAppearanceExtractFromItemV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.WeaponAppearanceHiddenV2Req:
            ProcessReceivedMessage_WeaponAppearanceHiddenV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.WeaponAppearanceListV2Req:
            ProcessReceivedMessage_WeaponAppearanceListV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.WeaponAppearanceUnequipV2Req:
            ProcessReceivedMessage_WeaponAppearanceUnequipV2Req(__msg, pa, hostTag, remote);
            break;
        case Common.AccountCreateNameReq:
            ProcessReceivedMessage_AccountCreateNameReq(__msg, pa, hostTag, remote);
            break;
        case Common.ZoneStatusReq:
            ProcessReceivedMessage_ZoneStatusReq(__msg, pa, hostTag, remote);
            break;
        case Common.BloodFogEnterReq:
            ProcessReceivedMessage_BloodFogEnterReq(__msg, pa, hostTag, remote);
            break;
        case Common.BloodFogLeaveReq:
            ProcessReceivedMessage_BloodFogLeaveReq(__msg, pa, hostTag, remote);
            break;
        case Common.BloodFogUseBuffReq:
            ProcessReceivedMessage_BloodFogUseBuffReq(__msg, pa, hostTag, remote);
            break;
        case Common.C2SRttReq:
            ProcessReceivedMessage_C2SRttReq(__msg, pa, hostTag, remote);
            break;
        case Common.C2SRttRes:
            ProcessReceivedMessage_C2SRttRes(__msg, pa, hostTag, remote);
            break;
		default:
			 goto __fail;
		}
		return true;
__fail:
	  {
			__msg.ReadOffset = orgReadOffset;
			return false;
	  }
	}
    void ProcessReceivedMessage_PlayerSelectReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PlayerSelectReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerSelectReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerSelectReq, RmiName_PlayerSelectReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerSelectReq;
        summary.rmiName = RmiName_PlayerSelectReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerSelectReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerSelectReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerSelectReq;
        summary.rmiName = RmiName_PlayerSelectReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerEnterStageFirstReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PlayerEnterStageFirstReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerEnterStageFirstReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerEnterStageFirstReq, RmiName_PlayerEnterStageFirstReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerEnterStageFirstReq;
        summary.rmiName = RmiName_PlayerEnterStageFirstReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerEnterStageFirstReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerEnterStageFirstReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerEnterStageFirstReq;
        summary.rmiName = RmiName_PlayerEnterStageFirstReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerEnterStageSecondReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PlayerEnterStageSecondReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerEnterStageSecondReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerEnterStageSecondReq, RmiName_PlayerEnterStageSecondReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerEnterStageSecondReq;
        summary.rmiName = RmiName_PlayerEnterStageSecondReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerEnterStageSecondReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerEnterStageSecondReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerEnterStageSecondReq;
        summary.rmiName = RmiName_PlayerEnterStageSecondReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerEnterStageThirdReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PlayerEnterStageThirdReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerEnterStageThirdReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerEnterStageThirdReq, RmiName_PlayerEnterStageThirdReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerEnterStageThirdReq;
        summary.rmiName = RmiName_PlayerEnterStageThirdReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerEnterStageThirdReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerEnterStageThirdReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerEnterStageThirdReq;
        summary.rmiName = RmiName_PlayerEnterStageThirdReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerEnterStageFourthReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PlayerEnterStageFourthReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerEnterStageFourthReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerEnterStageFourthReq, RmiName_PlayerEnterStageFourthReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerEnterStageFourthReq;
        summary.rmiName = RmiName_PlayerEnterStageFourthReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerEnterStageFourthReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerEnterStageFourthReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerEnterStageFourthReq;
        summary.rmiName = RmiName_PlayerEnterStageFourthReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerEnterStageFifthReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PlayerEnterStageFifthReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerEnterStageFifthReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerEnterStageFifthReq, RmiName_PlayerEnterStageFifthReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerEnterStageFifthReq;
        summary.rmiName = RmiName_PlayerEnterStageFifthReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerEnterStageFifthReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerEnterStageFifthReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerEnterStageFifthReq;
        summary.rmiName = RmiName_PlayerEnterStageFifthReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerGameEnterReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PlayerGameEnterReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerGameEnterReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerGameEnterReq, RmiName_PlayerGameEnterReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerGameEnterReq;
        summary.rmiName = RmiName_PlayerGameEnterReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerGameEnterReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerGameEnterReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerGameEnterReq;
        summary.rmiName = RmiName_PlayerGameEnterReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AuthenticateBotCredentialReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.AuthenticateBotCredentialReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_AuthenticateBotCredentialReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.AuthenticateBotCredentialReq, RmiName_AuthenticateBotCredentialReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AuthenticateBotCredentialReq;
        summary.rmiName = RmiName_AuthenticateBotCredentialReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AuthenticateBotCredentialReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AuthenticateBotCredentialReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AuthenticateBotCredentialReq;
        summary.rmiName = RmiName_AuthenticateBotCredentialReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_DesignateBindStoneReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.DesignateBindStoneReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_DesignateBindStoneReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.DesignateBindStoneReq, RmiName_DesignateBindStoneReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.DesignateBindStoneReq;
        summary.rmiName = RmiName_DesignateBindStoneReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =DesignateBindStoneReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_DesignateBindStoneReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.DesignateBindStoneReq;
        summary.rmiName = RmiName_DesignateBindStoneReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PortalByBindStoneReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PortalByBindStoneReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PortalByBindStoneReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PortalByBindStoneReq, RmiName_PortalByBindStoneReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PortalByBindStoneReq;
        summary.rmiName = RmiName_PortalByBindStoneReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PortalByBindStoneReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PortalByBindStoneReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PortalByBindStoneReq;
        summary.rmiName = RmiName_PortalByBindStoneReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerBlackRosterGetPreferenceReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PlayerBlackRosterGetPreferenceReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerBlackRosterGetPreferenceReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerBlackRosterGetPreferenceReq, RmiName_PlayerBlackRosterGetPreferenceReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterGetPreferenceReq;
        summary.rmiName = RmiName_PlayerBlackRosterGetPreferenceReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerBlackRosterGetPreferenceReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerBlackRosterGetPreferenceReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterGetPreferenceReq;
        summary.rmiName = RmiName_PlayerBlackRosterGetPreferenceReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerBlackRosterObservingReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PlayerBlackRosterObservingReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerBlackRosterObservingReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerBlackRosterObservingReq, RmiName_PlayerBlackRosterObservingReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterObservingReq;
        summary.rmiName = RmiName_PlayerBlackRosterObservingReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerBlackRosterObservingReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerBlackRosterObservingReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterObservingReq;
        summary.rmiName = RmiName_PlayerBlackRosterObservingReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerBlackRosterProvocationReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PlayerBlackRosterProvocationReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerBlackRosterProvocationReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerBlackRosterProvocationReq, RmiName_PlayerBlackRosterProvocationReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterProvocationReq;
        summary.rmiName = RmiName_PlayerBlackRosterProvocationReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerBlackRosterProvocationReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerBlackRosterProvocationReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterProvocationReq;
        summary.rmiName = RmiName_PlayerBlackRosterProvocationReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerBlackRosterRankReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PlayerBlackRosterRankReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerBlackRosterRankReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerBlackRosterRankReq, RmiName_PlayerBlackRosterRankReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterRankReq;
        summary.rmiName = RmiName_PlayerBlackRosterRankReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerBlackRosterRankReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerBlackRosterRankReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterRankReq;
        summary.rmiName = RmiName_PlayerBlackRosterRankReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerBlackRosterRevengeReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PlayerBlackRosterRevengeReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerBlackRosterRevengeReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerBlackRosterRevengeReq, RmiName_PlayerBlackRosterRevengeReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterRevengeReq;
        summary.rmiName = RmiName_PlayerBlackRosterRevengeReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerBlackRosterRevengeReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerBlackRosterRevengeReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterRevengeReq;
        summary.rmiName = RmiName_PlayerBlackRosterRevengeReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerBlackRosterSetPreferenceReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PlayerBlackRosterSetPreferenceReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerBlackRosterSetPreferenceReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerBlackRosterSetPreferenceReq, RmiName_PlayerBlackRosterSetPreferenceReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterSetPreferenceReq;
        summary.rmiName = RmiName_PlayerBlackRosterSetPreferenceReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerBlackRosterSetPreferenceReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerBlackRosterSetPreferenceReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterSetPreferenceReq;
        summary.rmiName = RmiName_PlayerBlackRosterSetPreferenceReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerBlackRostersReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PlayerBlackRostersReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerBlackRostersReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerBlackRostersReq, RmiName_PlayerBlackRostersReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerBlackRostersReq;
        summary.rmiName = RmiName_PlayerBlackRostersReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerBlackRostersReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerBlackRostersReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerBlackRostersReq;
        summary.rmiName = RmiName_PlayerBlackRostersReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerBlackRosterLastWeekRankReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PlayerBlackRosterLastWeekRankReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerBlackRosterLastWeekRankReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerBlackRosterLastWeekRankReq, RmiName_PlayerBlackRosterLastWeekRankReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterLastWeekRankReq;
        summary.rmiName = RmiName_PlayerBlackRosterLastWeekRankReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerBlackRosterLastWeekRankReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerBlackRosterLastWeekRankReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerBlackRosterLastWeekRankReq;
        summary.rmiName = RmiName_PlayerBlackRosterLastWeekRankReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CheatMessageV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.CheatMessageV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CheatMessageV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CheatMessageV2Req, RmiName_CheatMessageV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CheatMessageV2Req;
        summary.rmiName = RmiName_CheatMessageV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CheatMessageV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CheatMessageV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CheatMessageV2Req;
        summary.rmiName = RmiName_CheatMessageV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AccountBlockPlayerAddReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.AccountBlockPlayerAddReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_AccountBlockPlayerAddReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.AccountBlockPlayerAddReq, RmiName_AccountBlockPlayerAddReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AccountBlockPlayerAddReq;
        summary.rmiName = RmiName_AccountBlockPlayerAddReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AccountBlockPlayerAddReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AccountBlockPlayerAddReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AccountBlockPlayerAddReq;
        summary.rmiName = RmiName_AccountBlockPlayerAddReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AccountBlockPlayerDeleteReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.AccountBlockPlayerDeleteReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_AccountBlockPlayerDeleteReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.AccountBlockPlayerDeleteReq, RmiName_AccountBlockPlayerDeleteReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AccountBlockPlayerDeleteReq;
        summary.rmiName = RmiName_AccountBlockPlayerDeleteReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AccountBlockPlayerDeleteReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AccountBlockPlayerDeleteReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AccountBlockPlayerDeleteReq;
        summary.rmiName = RmiName_AccountBlockPlayerDeleteReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AccountBlockPlayerReasonEditReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.AccountBlockPlayerReasonEditReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_AccountBlockPlayerReasonEditReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.AccountBlockPlayerReasonEditReq, RmiName_AccountBlockPlayerReasonEditReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AccountBlockPlayerReasonEditReq;
        summary.rmiName = RmiName_AccountBlockPlayerReasonEditReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AccountBlockPlayerReasonEditReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AccountBlockPlayerReasonEditReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AccountBlockPlayerReasonEditReq;
        summary.rmiName = RmiName_AccountBlockPlayerReasonEditReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AccountBlockPlayersReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.AccountBlockPlayersReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_AccountBlockPlayersReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.AccountBlockPlayersReq, RmiName_AccountBlockPlayersReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AccountBlockPlayersReq;
        summary.rmiName = RmiName_AccountBlockPlayersReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AccountBlockPlayersReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AccountBlockPlayersReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AccountBlockPlayersReq;
        summary.rmiName = RmiName_AccountBlockPlayersReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ChatMessageV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.ChatMessageV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ChatMessageV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ChatMessageV2Req, RmiName_ChatMessageV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ChatMessageV2Req;
        summary.rmiName = RmiName_ChatMessageV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ChatMessageV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ChatMessageV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ChatMessageV2Req;
        summary.rmiName = RmiName_ChatMessageV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerSearchV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PlayerSearchV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerSearchV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerSearchV2Req, RmiName_PlayerSearchV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerSearchV2Req;
        summary.rmiName = RmiName_PlayerSearchV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerSearchV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerSearchV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerSearchV2Req;
        summary.rmiName = RmiName_PlayerSearchV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_LinkItemInfoReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.LinkItemInfoReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_LinkItemInfoReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.LinkItemInfoReq, RmiName_LinkItemInfoReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.LinkItemInfoReq;
        summary.rmiName = RmiName_LinkItemInfoReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =LinkItemInfoReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_LinkItemInfoReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.LinkItemInfoReq;
        summary.rmiName = RmiName_LinkItemInfoReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CostumeCardBuildReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.CostumeCardBuildReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CostumeCardBuildReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CostumeCardBuildReq, RmiName_CostumeCardBuildReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CostumeCardBuildReq;
        summary.rmiName = RmiName_CostumeCardBuildReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CostumeCardBuildReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CostumeCardBuildReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CostumeCardBuildReq;
        summary.rmiName = RmiName_CostumeCardBuildReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CostumeCardGachaReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.CostumeCardGachaReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CostumeCardGachaReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CostumeCardGachaReq, RmiName_CostumeCardGachaReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CostumeCardGachaReq;
        summary.rmiName = RmiName_CostumeCardGachaReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CostumeCardGachaReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CostumeCardGachaReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CostumeCardGachaReq;
        summary.rmiName = RmiName_CostumeCardGachaReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CostumeCardInfoReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CostumeCardInfoReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CostumeCardInfoReq, RmiName_CostumeCardInfoReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CostumeCardInfoReq;
        summary.rmiName = RmiName_CostumeCardInfoReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CostumeCardInfoReq (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CostumeCardInfoReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CostumeCardInfoReq;
        summary.rmiName = RmiName_CostumeCardInfoReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CostumeCardMixReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.CostumeCardMixReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CostumeCardMixReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CostumeCardMixReq, RmiName_CostumeCardMixReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CostumeCardMixReq;
        summary.rmiName = RmiName_CostumeCardMixReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CostumeCardMixReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CostumeCardMixReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CostumeCardMixReq;
        summary.rmiName = RmiName_CostumeCardMixReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CostumeCollectReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CostumeCollectReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CostumeCollectReq, RmiName_CostumeCollectReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CostumeCollectReq;
        summary.rmiName = RmiName_CostumeCollectReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CostumeCollectReq (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CostumeCollectReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CostumeCollectReq;
        summary.rmiName = RmiName_CostumeCollectReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CostumeEquipBodyReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.CostumeEquipBodyReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CostumeEquipBodyReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CostumeEquipBodyReq, RmiName_CostumeEquipBodyReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CostumeEquipBodyReq;
        summary.rmiName = RmiName_CostumeEquipBodyReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CostumeEquipBodyReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CostumeEquipBodyReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CostumeEquipBodyReq;
        summary.rmiName = RmiName_CostumeEquipBodyReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CostumeEquipBodyShowReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.CostumeEquipBodyShowReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CostumeEquipBodyShowReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CostumeEquipBodyShowReq, RmiName_CostumeEquipBodyShowReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CostumeEquipBodyShowReq;
        summary.rmiName = RmiName_CostumeEquipBodyShowReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CostumeEquipBodyShowReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CostumeEquipBodyShowReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CostumeEquipBodyShowReq;
        summary.rmiName = RmiName_CostumeEquipBodyShowReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CostumeEquipHeadReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.CostumeEquipHeadReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CostumeEquipHeadReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CostumeEquipHeadReq, RmiName_CostumeEquipHeadReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CostumeEquipHeadReq;
        summary.rmiName = RmiName_CostumeEquipHeadReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CostumeEquipHeadReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CostumeEquipHeadReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CostumeEquipHeadReq;
        summary.rmiName = RmiName_CostumeEquipHeadReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CostumeEquipHeadShowReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.CostumeEquipHeadShowReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CostumeEquipHeadShowReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CostumeEquipHeadShowReq, RmiName_CostumeEquipHeadShowReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CostumeEquipHeadShowReq;
        summary.rmiName = RmiName_CostumeEquipHeadShowReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CostumeEquipHeadShowReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CostumeEquipHeadShowReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CostumeEquipHeadShowReq;
        summary.rmiName = RmiName_CostumeEquipHeadShowReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CostumeInfoReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CostumeInfoReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CostumeInfoReq, RmiName_CostumeInfoReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CostumeInfoReq;
        summary.rmiName = RmiName_CostumeInfoReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CostumeInfoReq (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CostumeInfoReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CostumeInfoReq;
        summary.rmiName = RmiName_CostumeInfoReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CostumeConfirmAcceptReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.CostumeConfirmAcceptReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CostumeConfirmAcceptReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CostumeConfirmAcceptReq, RmiName_CostumeConfirmAcceptReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CostumeConfirmAcceptReq;
        summary.rmiName = RmiName_CostumeConfirmAcceptReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CostumeConfirmAcceptReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CostumeConfirmAcceptReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CostumeConfirmAcceptReq;
        summary.rmiName = RmiName_CostumeConfirmAcceptReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CostumeConfirmChangeReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.CostumeConfirmChangeReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CostumeConfirmChangeReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CostumeConfirmChangeReq, RmiName_CostumeConfirmChangeReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CostumeConfirmChangeReq;
        summary.rmiName = RmiName_CostumeConfirmChangeReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CostumeConfirmChangeReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CostumeConfirmChangeReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CostumeConfirmChangeReq;
        summary.rmiName = RmiName_CostumeConfirmChangeReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CostumeConfirmInfoReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_CostumeConfirmInfoReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.CostumeConfirmInfoReq, RmiName_CostumeConfirmInfoReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CostumeConfirmInfoReq;
        summary.rmiName = RmiName_CostumeConfirmInfoReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CostumeConfirmInfoReq (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CostumeConfirmInfoReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CostumeConfirmInfoReq;
        summary.rmiName = RmiName_CostumeConfirmInfoReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PortalEffectReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PortalEffectReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PortalEffectReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PortalEffectReq, RmiName_PortalEffectReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PortalEffectReq;
        summary.rmiName = RmiName_PortalEffectReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PortalEffectReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PortalEffectReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PortalEffectReq;
        summary.rmiName = RmiName_PortalEffectReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AttainmentDailyRewardV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.AttainmentDailyRewardV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_AttainmentDailyRewardV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.AttainmentDailyRewardV2Req, RmiName_AttainmentDailyRewardV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AttainmentDailyRewardV2Req;
        summary.rmiName = RmiName_AttainmentDailyRewardV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AttainmentDailyRewardV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AttainmentDailyRewardV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AttainmentDailyRewardV2Req;
        summary.rmiName = RmiName_AttainmentDailyRewardV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AttainmentNormalRewardV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.AttainmentNormalRewardV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_AttainmentNormalRewardV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.AttainmentNormalRewardV2Req, RmiName_AttainmentNormalRewardV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AttainmentNormalRewardV2Req;
        summary.rmiName = RmiName_AttainmentNormalRewardV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AttainmentNormalRewardV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AttainmentNormalRewardV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AttainmentNormalRewardV2Req;
        summary.rmiName = RmiName_AttainmentNormalRewardV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AttendanceRewardV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.AttendanceRewardV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_AttendanceRewardV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.AttendanceRewardV2Req, RmiName_AttendanceRewardV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AttendanceRewardV2Req;
        summary.rmiName = RmiName_AttendanceRewardV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AttendanceRewardV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AttendanceRewardV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AttendanceRewardV2Req;
        summary.rmiName = RmiName_AttendanceRewardV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BossScheduleReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.BossScheduleReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_BossScheduleReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.BossScheduleReq, RmiName_BossScheduleReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BossScheduleReq;
        summary.rmiName = RmiName_BossScheduleReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BossScheduleReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BossScheduleReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BossScheduleReq;
        summary.rmiName = RmiName_BossScheduleReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_EventExchangeRewardV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.EventExchangeRewardV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_EventExchangeRewardV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.EventExchangeRewardV2Req, RmiName_EventExchangeRewardV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.EventExchangeRewardV2Req;
        summary.rmiName = RmiName_EventExchangeRewardV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =EventExchangeRewardV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_EventExchangeRewardV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.EventExchangeRewardV2Req;
        summary.rmiName = RmiName_EventExchangeRewardV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildAdminBuffActiveReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.GuildAdminBuffActiveReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildAdminBuffActiveReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildAdminBuffActiveReq, RmiName_GuildAdminBuffActiveReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildAdminBuffActiveReq;
        summary.rmiName = RmiName_GuildAdminBuffActiveReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildAdminBuffActiveReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildAdminBuffActiveReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildAdminBuffActiveReq;
        summary.rmiName = RmiName_GuildAdminBuffActiveReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildAdminBuffBuyReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.GuildAdminBuffBuyReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildAdminBuffBuyReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildAdminBuffBuyReq, RmiName_GuildAdminBuffBuyReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildAdminBuffBuyReq;
        summary.rmiName = RmiName_GuildAdminBuffBuyReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildAdminBuffBuyReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildAdminBuffBuyReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildAdminBuffBuyReq;
        summary.rmiName = RmiName_GuildAdminBuffBuyReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildAdminInfoReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_GuildAdminInfoReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.GuildAdminInfoReq, RmiName_GuildAdminInfoReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildAdminInfoReq;
        summary.rmiName = RmiName_GuildAdminInfoReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildAdminInfoReq (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildAdminInfoReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildAdminInfoReq;
        summary.rmiName = RmiName_GuildAdminInfoReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildAdminLevelUpReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.GuildAdminLevelUpReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildAdminLevelUpReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildAdminLevelUpReq, RmiName_GuildAdminLevelUpReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildAdminLevelUpReq;
        summary.rmiName = RmiName_GuildAdminLevelUpReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildAdminLevelUpReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildAdminLevelUpReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildAdminLevelUpReq;
        summary.rmiName = RmiName_GuildAdminLevelUpReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildAdminMasterChangeReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.GuildAdminMasterChangeReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildAdminMasterChangeReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildAdminMasterChangeReq, RmiName_GuildAdminMasterChangeReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildAdminMasterChangeReq;
        summary.rmiName = RmiName_GuildAdminMasterChangeReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildAdminMasterChangeReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildAdminMasterChangeReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildAdminMasterChangeReq;
        summary.rmiName = RmiName_GuildAdminMasterChangeReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildAdminMemberBanishReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.GuildAdminMemberBanishReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildAdminMemberBanishReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildAdminMemberBanishReq, RmiName_GuildAdminMemberBanishReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildAdminMemberBanishReq;
        summary.rmiName = RmiName_GuildAdminMemberBanishReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildAdminMemberBanishReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildAdminMemberBanishReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildAdminMemberBanishReq;
        summary.rmiName = RmiName_GuildAdminMemberBanishReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildAdminMemberUpdateReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.GuildAdminMemberUpdateReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildAdminMemberUpdateReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildAdminMemberUpdateReq, RmiName_GuildAdminMemberUpdateReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildAdminMemberUpdateReq;
        summary.rmiName = RmiName_GuildAdminMemberUpdateReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildAdminMemberUpdateReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildAdminMemberUpdateReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildAdminMemberUpdateReq;
        summary.rmiName = RmiName_GuildAdminMemberUpdateReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildAdminUpdateBaseReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.GuildAdminUpdateBaseReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildAdminUpdateBaseReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildAdminUpdateBaseReq, RmiName_GuildAdminUpdateBaseReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildAdminUpdateBaseReq;
        summary.rmiName = RmiName_GuildAdminUpdateBaseReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildAdminUpdateBaseReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildAdminUpdateBaseReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildAdminUpdateBaseReq;
        summary.rmiName = RmiName_GuildAdminUpdateBaseReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildAdminUpdateIntroReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.GuildAdminUpdateIntroReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildAdminUpdateIntroReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildAdminUpdateIntroReq, RmiName_GuildAdminUpdateIntroReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildAdminUpdateIntroReq;
        summary.rmiName = RmiName_GuildAdminUpdateIntroReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildAdminUpdateIntroReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildAdminUpdateIntroReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildAdminUpdateIntroReq;
        summary.rmiName = RmiName_GuildAdminUpdateIntroReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildAdminUpdateNoticeReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.GuildAdminUpdateNoticeReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildAdminUpdateNoticeReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildAdminUpdateNoticeReq, RmiName_GuildAdminUpdateNoticeReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildAdminUpdateNoticeReq;
        summary.rmiName = RmiName_GuildAdminUpdateNoticeReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildAdminUpdateNoticeReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildAdminUpdateNoticeReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildAdminUpdateNoticeReq;
        summary.rmiName = RmiName_GuildAdminUpdateNoticeReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildAdminUpdateTendencyReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.GuildAdminUpdateTendencyReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildAdminUpdateTendencyReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildAdminUpdateTendencyReq, RmiName_GuildAdminUpdateTendencyReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildAdminUpdateTendencyReq;
        summary.rmiName = RmiName_GuildAdminUpdateTendencyReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildAdminUpdateTendencyReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildAdminUpdateTendencyReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildAdminUpdateTendencyReq;
        summary.rmiName = RmiName_GuildAdminUpdateTendencyReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildAdminUpdateTypeReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.GuildAdminUpdateTypeReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildAdminUpdateTypeReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildAdminUpdateTypeReq, RmiName_GuildAdminUpdateTypeReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildAdminUpdateTypeReq;
        summary.rmiName = RmiName_GuildAdminUpdateTypeReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildAdminUpdateTypeReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildAdminUpdateTypeReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildAdminUpdateTypeReq;
        summary.rmiName = RmiName_GuildAdminUpdateTypeReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildAttendReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_GuildAttendReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.GuildAttendReq, RmiName_GuildAttendReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildAttendReq;
        summary.rmiName = RmiName_GuildAttendReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildAttendReq (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildAttendReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildAttendReq;
        summary.rmiName = RmiName_GuildAttendReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildBuffInfoReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_GuildBuffInfoReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.GuildBuffInfoReq, RmiName_GuildBuffInfoReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildBuffInfoReq;
        summary.rmiName = RmiName_GuildBuffInfoReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildBuffInfoReq (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildBuffInfoReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildBuffInfoReq;
        summary.rmiName = RmiName_GuildBuffInfoReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildCreateReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.GuildCreateReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildCreateReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildCreateReq, RmiName_GuildCreateReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildCreateReq;
        summary.rmiName = RmiName_GuildCreateReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildCreateReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildCreateReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildCreateReq;
        summary.rmiName = RmiName_GuildCreateReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildDeleteReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_GuildDeleteReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.GuildDeleteReq, RmiName_GuildDeleteReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildDeleteReq;
        summary.rmiName = RmiName_GuildDeleteReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildDeleteReq (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildDeleteReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildDeleteReq;
        summary.rmiName = RmiName_GuildDeleteReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildDonateReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.GuildDonateReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildDonateReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildDonateReq, RmiName_GuildDonateReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildDonateReq;
        summary.rmiName = RmiName_GuildDonateReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildDonateReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildDonateReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildDonateReq;
        summary.rmiName = RmiName_GuildDonateReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildDonationByCronV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_GuildDonationByCronV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.GuildDonationByCronV2Req, RmiName_GuildDonationByCronV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildDonationByCronV2Req;
        summary.rmiName = RmiName_GuildDonationByCronV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildDonationByCronV2Req (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildDonationByCronV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildDonationByCronV2Req;
        summary.rmiName = RmiName_GuildDonationByCronV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildFindReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.GuildFindReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildFindReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildFindReq, RmiName_GuildFindReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildFindReq;
        summary.rmiName = RmiName_GuildFindReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildFindReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildFindReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildFindReq;
        summary.rmiName = RmiName_GuildFindReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildHistroyReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.GuildHistroyReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildHistroyReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildHistroyReq, RmiName_GuildHistroyReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildHistroyReq;
        summary.rmiName = RmiName_GuildHistroyReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildHistroyReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildHistroyReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildHistroyReq;
        summary.rmiName = RmiName_GuildHistroyReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildInfoCallReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.GuildInfoCallReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildInfoCallReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildInfoCallReq, RmiName_GuildInfoCallReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildInfoCallReq;
        summary.rmiName = RmiName_GuildInfoCallReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildInfoCallReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildInfoCallReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildInfoCallReq;
        summary.rmiName = RmiName_GuildInfoCallReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildInfoReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_GuildInfoReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.GuildInfoReq, RmiName_GuildInfoReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildInfoReq;
        summary.rmiName = RmiName_GuildInfoReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildInfoReq (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildInfoReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildInfoReq;
        summary.rmiName = RmiName_GuildInfoReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildJoinRequestConfirmReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.GuildJoinRequestConfirmReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildJoinRequestConfirmReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildJoinRequestConfirmReq, RmiName_GuildJoinRequestConfirmReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildJoinRequestConfirmReq;
        summary.rmiName = RmiName_GuildJoinRequestConfirmReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildJoinRequestConfirmReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildJoinRequestConfirmReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildJoinRequestConfirmReq;
        summary.rmiName = RmiName_GuildJoinRequestConfirmReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildJoinRequestListReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_GuildJoinRequestListReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.GuildJoinRequestListReq, RmiName_GuildJoinRequestListReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildJoinRequestListReq;
        summary.rmiName = RmiName_GuildJoinRequestListReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildJoinRequestListReq (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildJoinRequestListReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildJoinRequestListReq;
        summary.rmiName = RmiName_GuildJoinRequestListReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildLeaveReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_GuildLeaveReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.GuildLeaveReq, RmiName_GuildLeaveReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildLeaveReq;
        summary.rmiName = RmiName_GuildLeaveReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildLeaveReq (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildLeaveReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildLeaveReq;
        summary.rmiName = RmiName_GuildLeaveReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildLiveInviteConfirmReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.GuildLiveInviteConfirmReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildLiveInviteConfirmReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildLiveInviteConfirmReq, RmiName_GuildLiveInviteConfirmReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildLiveInviteConfirmReq;
        summary.rmiName = RmiName_GuildLiveInviteConfirmReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildLiveInviteConfirmReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildLiveInviteConfirmReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildLiveInviteConfirmReq;
        summary.rmiName = RmiName_GuildLiveInviteConfirmReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildLiveInviteReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.GuildLiveInviteReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildLiveInviteReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildLiveInviteReq, RmiName_GuildLiveInviteReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildLiveInviteReq;
        summary.rmiName = RmiName_GuildLiveInviteReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildLiveInviteReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildLiveInviteReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildLiveInviteReq;
        summary.rmiName = RmiName_GuildLiveInviteReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildMemberInfoReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_GuildMemberInfoReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.GuildMemberInfoReq, RmiName_GuildMemberInfoReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildMemberInfoReq;
        summary.rmiName = RmiName_GuildMemberInfoReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildMemberInfoReq (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildMemberInfoReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildMemberInfoReq;
        summary.rmiName = RmiName_GuildMemberInfoReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildSignRequestCancelReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.GuildSignRequestCancelReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildSignRequestCancelReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildSignRequestCancelReq, RmiName_GuildSignRequestCancelReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildSignRequestCancelReq;
        summary.rmiName = RmiName_GuildSignRequestCancelReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildSignRequestCancelReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildSignRequestCancelReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildSignRequestCancelReq;
        summary.rmiName = RmiName_GuildSignRequestCancelReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildSignRequestListReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_GuildSignRequestListReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.GuildSignRequestListReq, RmiName_GuildSignRequestListReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildSignRequestListReq;
        summary.rmiName = RmiName_GuildSignRequestListReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildSignRequestListReq (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildSignRequestListReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildSignRequestListReq;
        summary.rmiName = RmiName_GuildSignRequestListReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildSignRequestReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.GuildSignRequestReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildSignRequestReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildSignRequestReq, RmiName_GuildSignRequestReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildSignRequestReq;
        summary.rmiName = RmiName_GuildSignRequestReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildSignRequestReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildSignRequestReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildSignRequestReq;
        summary.rmiName = RmiName_GuildSignRequestReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildVoteInfoReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_GuildVoteInfoReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.GuildVoteInfoReq, RmiName_GuildVoteInfoReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildVoteInfoReq;
        summary.rmiName = RmiName_GuildVoteInfoReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildVoteInfoReq (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildVoteInfoReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildVoteInfoReq;
        summary.rmiName = RmiName_GuildVoteInfoReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildVoteMasterImpeachReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_GuildVoteMasterImpeachReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.GuildVoteMasterImpeachReq, RmiName_GuildVoteMasterImpeachReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildVoteMasterImpeachReq;
        summary.rmiName = RmiName_GuildVoteMasterImpeachReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildVoteMasterImpeachReq (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildVoteMasterImpeachReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildVoteMasterImpeachReq;
        summary.rmiName = RmiName_GuildVoteMasterImpeachReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildVoteReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.GuildVoteReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildVoteReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildVoteReq, RmiName_GuildVoteReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildVoteReq;
        summary.rmiName = RmiName_GuildVoteReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildVoteReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildVoteReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildVoteReq;
        summary.rmiName = RmiName_GuildVoteReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildWaitingMemberListV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_GuildWaitingMemberListV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.GuildWaitingMemberListV2Req, RmiName_GuildWaitingMemberListV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildWaitingMemberListV2Req;
        summary.rmiName = RmiName_GuildWaitingMemberListV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildWaitingMemberListV2Req (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildWaitingMemberListV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildWaitingMemberListV2Req;
        summary.rmiName = RmiName_GuildWaitingMemberListV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildWarehouseChangeSizeV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.GuildWarehouseChangeSizeV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildWarehouseChangeSizeV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildWarehouseChangeSizeV2Req, RmiName_GuildWarehouseChangeSizeV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildWarehouseChangeSizeV2Req;
        summary.rmiName = RmiName_GuildWarehouseChangeSizeV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildWarehouseChangeSizeV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildWarehouseChangeSizeV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildWarehouseChangeSizeV2Req;
        summary.rmiName = RmiName_GuildWarehouseChangeSizeV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildWarehouseInfoV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_GuildWarehouseInfoV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.GuildWarehouseInfoV2Req, RmiName_GuildWarehouseInfoV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildWarehouseInfoV2Req;
        summary.rmiName = RmiName_GuildWarehouseInfoV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildWarehouseInfoV2Req (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildWarehouseInfoV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildWarehouseInfoV2Req;
        summary.rmiName = RmiName_GuildWarehouseInfoV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildWarehouseItemMoveV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.GuildWarehouseItemMoveV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildWarehouseItemMoveV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildWarehouseItemMoveV2Req, RmiName_GuildWarehouseItemMoveV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildWarehouseItemMoveV2Req;
        summary.rmiName = RmiName_GuildWarehouseItemMoveV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildWarehouseItemMoveV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildWarehouseItemMoveV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildWarehouseItemMoveV2Req;
        summary.rmiName = RmiName_GuildWarehouseItemMoveV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildWarehouseWalletMoveV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.GuildWarehouseWalletMoveV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildWarehouseWalletMoveV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildWarehouseWalletMoveV2Req, RmiName_GuildWarehouseWalletMoveV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildWarehouseWalletMoveV2Req;
        summary.rmiName = RmiName_GuildWarehouseWalletMoveV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildWarehouseWalletMoveV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildWarehouseWalletMoveV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildWarehouseWalletMoveV2Req;
        summary.rmiName = RmiName_GuildWarehouseWalletMoveV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildTerritoryInfoReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.GuildTerritoryInfoReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildTerritoryInfoReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildTerritoryInfoReq, RmiName_GuildTerritoryInfoReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildTerritoryInfoReq;
        summary.rmiName = RmiName_GuildTerritoryInfoReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildTerritoryInfoReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildTerritoryInfoReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildTerritoryInfoReq;
        summary.rmiName = RmiName_GuildTerritoryInfoReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildTerritorySetReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.GuildTerritorySetReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildTerritorySetReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildTerritorySetReq, RmiName_GuildTerritorySetReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildTerritorySetReq;
        summary.rmiName = RmiName_GuildTerritorySetReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildTerritorySetReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildTerritorySetReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildTerritorySetReq;
        summary.rmiName = RmiName_GuildTerritorySetReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_WorldTerritoryOverviewReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.WorldTerritoryOverviewReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_WorldTerritoryOverviewReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.WorldTerritoryOverviewReq, RmiName_WorldTerritoryOverviewReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.WorldTerritoryOverviewReq;
        summary.rmiName = RmiName_WorldTerritoryOverviewReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =WorldTerritoryOverviewReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_WorldTerritoryOverviewReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.WorldTerritoryOverviewReq;
        summary.rmiName = RmiName_WorldTerritoryOverviewReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_DungeonEnterV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.DungeonEnterV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_DungeonEnterV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.DungeonEnterV2Req, RmiName_DungeonEnterV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.DungeonEnterV2Req;
        summary.rmiName = RmiName_DungeonEnterV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =DungeonEnterV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_DungeonEnterV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.DungeonEnterV2Req;
        summary.rmiName = RmiName_DungeonEnterV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_DungeonGiveUpV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.DungeonGiveUpV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_DungeonGiveUpV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.DungeonGiveUpV2Req, RmiName_DungeonGiveUpV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.DungeonGiveUpV2Req;
        summary.rmiName = RmiName_DungeonGiveUpV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =DungeonGiveUpV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_DungeonGiveUpV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.DungeonGiveUpV2Req;
        summary.rmiName = RmiName_DungeonGiveUpV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_DungeonLeaveV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.DungeonLeaveV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_DungeonLeaveV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.DungeonLeaveV2Req, RmiName_DungeonLeaveV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.DungeonLeaveV2Req;
        summary.rmiName = RmiName_DungeonLeaveV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =DungeonLeaveV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_DungeonLeaveV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.DungeonLeaveV2Req;
        summary.rmiName = RmiName_DungeonLeaveV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_DungeonLoadingCompleteV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.DungeonLoadingCompleteV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_DungeonLoadingCompleteV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.DungeonLoadingCompleteV2Req, RmiName_DungeonLoadingCompleteV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.DungeonLoadingCompleteV2Req;
        summary.rmiName = RmiName_DungeonLoadingCompleteV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =DungeonLoadingCompleteV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_DungeonLoadingCompleteV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.DungeonLoadingCompleteV2Req;
        summary.rmiName = RmiName_DungeonLoadingCompleteV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_InteractStartReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.InteractStartReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_InteractStartReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.InteractStartReq, RmiName_InteractStartReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.InteractStartReq;
        summary.rmiName = RmiName_InteractStartReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =InteractStartReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_InteractStartReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.InteractStartReq;
        summary.rmiName = RmiName_InteractStartReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_InteractEndReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.InteractEndReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_InteractEndReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.InteractEndReq, RmiName_InteractEndReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.InteractEndReq;
        summary.rmiName = RmiName_InteractEndReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =InteractEndReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_InteractEndReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.InteractEndReq;
        summary.rmiName = RmiName_InteractEndReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_InteractCancelReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.InteractCancelReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_InteractCancelReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.InteractCancelReq, RmiName_InteractCancelReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.InteractCancelReq;
        summary.rmiName = RmiName_InteractCancelReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =InteractCancelReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_InteractCancelReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.InteractCancelReq;
        summary.rmiName = RmiName_InteractCancelReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_EquipmentVisibleV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.EquipmentVisibleV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_EquipmentVisibleV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.EquipmentVisibleV2Req, RmiName_EquipmentVisibleV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.EquipmentVisibleV2Req;
        summary.rmiName = RmiName_EquipmentVisibleV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =EquipmentVisibleV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_EquipmentVisibleV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.EquipmentVisibleV2Req;
        summary.rmiName = RmiName_EquipmentVisibleV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_InventoryChangeSizeV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.InventoryChangeSizeV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_InventoryChangeSizeV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.InventoryChangeSizeV2Req, RmiName_InventoryChangeSizeV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.InventoryChangeSizeV2Req;
        summary.rmiName = RmiName_InventoryChangeSizeV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =InventoryChangeSizeV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_InventoryChangeSizeV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.InventoryChangeSizeV2Req;
        summary.rmiName = RmiName_InventoryChangeSizeV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemAddOptionV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.ItemAddOptionV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemAddOptionV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemAddOptionV2Req, RmiName_ItemAddOptionV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemAddOptionV2Req;
        summary.rmiName = RmiName_ItemAddOptionV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemAddOptionV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemAddOptionV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemAddOptionV2Req;
        summary.rmiName = RmiName_ItemAddOptionV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemChangeOptionV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.ItemChangeOptionV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemChangeOptionV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemChangeOptionV2Req, RmiName_ItemChangeOptionV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemChangeOptionV2Req;
        summary.rmiName = RmiName_ItemChangeOptionV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemChangeOptionV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemChangeOptionV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemChangeOptionV2Req;
        summary.rmiName = RmiName_ItemChangeOptionV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemCollectionBookmarksRegisterV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.ItemCollectionBookmarksRegisterV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemCollectionBookmarksRegisterV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemCollectionBookmarksRegisterV2Req, RmiName_ItemCollectionBookmarksRegisterV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemCollectionBookmarksRegisterV2Req;
        summary.rmiName = RmiName_ItemCollectionBookmarksRegisterV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemCollectionBookmarksRegisterV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemCollectionBookmarksRegisterV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemCollectionBookmarksRegisterV2Req;
        summary.rmiName = RmiName_ItemCollectionBookmarksRegisterV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemCollectionBookmarksUnregisterV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.ItemCollectionBookmarksUnregisterV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemCollectionBookmarksUnregisterV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemCollectionBookmarksUnregisterV2Req, RmiName_ItemCollectionBookmarksUnregisterV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemCollectionBookmarksUnregisterV2Req;
        summary.rmiName = RmiName_ItemCollectionBookmarksUnregisterV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemCollectionBookmarksUnregisterV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemCollectionBookmarksUnregisterV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemCollectionBookmarksUnregisterV2Req;
        summary.rmiName = RmiName_ItemCollectionBookmarksUnregisterV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemCollectionRegisterV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.ItemCollectionRegisterV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemCollectionRegisterV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemCollectionRegisterV2Req, RmiName_ItemCollectionRegisterV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemCollectionRegisterV2Req;
        summary.rmiName = RmiName_ItemCollectionRegisterV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemCollectionRegisterV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemCollectionRegisterV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemCollectionRegisterV2Req;
        summary.rmiName = RmiName_ItemCollectionRegisterV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemCombineV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.ItemCombineV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemCombineV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemCombineV2Req, RmiName_ItemCombineV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemCombineV2Req;
        summary.rmiName = RmiName_ItemCombineV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemCombineV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemCombineV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemCombineV2Req;
        summary.rmiName = RmiName_ItemCombineV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemDeleteV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.ItemDeleteV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemDeleteV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemDeleteV2Req, RmiName_ItemDeleteV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemDeleteV2Req;
        summary.rmiName = RmiName_ItemDeleteV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemDeleteV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemDeleteV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemDeleteV2Req;
        summary.rmiName = RmiName_ItemDeleteV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemDisassembleV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.ItemDisassembleV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemDisassembleV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemDisassembleV2Req, RmiName_ItemDisassembleV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemDisassembleV2Req;
        summary.rmiName = RmiName_ItemDisassembleV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemDisassembleV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemDisassembleV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemDisassembleV2Req;
        summary.rmiName = RmiName_ItemDisassembleV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemEnchantV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.ItemEnchantV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemEnchantV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemEnchantV2Req, RmiName_ItemEnchantV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemEnchantV2Req;
        summary.rmiName = RmiName_ItemEnchantV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemEnchantV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemEnchantV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemEnchantV2Req;
        summary.rmiName = RmiName_ItemEnchantV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemEquipV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.ItemEquipV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemEquipV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemEquipV2Req, RmiName_ItemEquipV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemEquipV2Req;
        summary.rmiName = RmiName_ItemEquipV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemEquipV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemEquipV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemEquipV2Req;
        summary.rmiName = RmiName_ItemEquipV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemIntensionV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.ItemIntensionV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemIntensionV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemIntensionV2Req, RmiName_ItemIntensionV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemIntensionV2Req;
        summary.rmiName = RmiName_ItemIntensionV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemIntensionV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemIntensionV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemIntensionV2Req;
        summary.rmiName = RmiName_ItemIntensionV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemMixOptionV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.ItemMixOptionV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemMixOptionV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemMixOptionV2Req, RmiName_ItemMixOptionV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemMixOptionV2Req;
        summary.rmiName = RmiName_ItemMixOptionV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemMixOptionV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemMixOptionV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemMixOptionV2Req;
        summary.rmiName = RmiName_ItemMixOptionV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemPackageUseV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.ItemPackageUseV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemPackageUseV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemPackageUseV2Req, RmiName_ItemPackageUseV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemPackageUseV2Req;
        summary.rmiName = RmiName_ItemPackageUseV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemPackageUseV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemPackageUseV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemPackageUseV2Req;
        summary.rmiName = RmiName_ItemPackageUseV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemProductionV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.ItemProductionV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemProductionV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemProductionV2Req, RmiName_ItemProductionV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemProductionV2Req;
        summary.rmiName = RmiName_ItemProductionV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemProductionV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemProductionV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemProductionV2Req;
        summary.rmiName = RmiName_ItemProductionV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemSelectUseV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.ItemSelectUseV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemSelectUseV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemSelectUseV2Req, RmiName_ItemSelectUseV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemSelectUseV2Req;
        summary.rmiName = RmiName_ItemSelectUseV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemSelectUseV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemSelectUseV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemSelectUseV2Req;
        summary.rmiName = RmiName_ItemSelectUseV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemUpgradeV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.ItemUpgradeV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemUpgradeV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemUpgradeV2Req, RmiName_ItemUpgradeV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemUpgradeV2Req;
        summary.rmiName = RmiName_ItemUpgradeV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemUpgradeV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemUpgradeV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemUpgradeV2Req;
        summary.rmiName = RmiName_ItemUpgradeV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemUseV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.ItemUseV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemUseV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemUseV2Req, RmiName_ItemUseV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemUseV2Req;
        summary.rmiName = RmiName_ItemUseV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemUseV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemUseV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemUseV2Req;
        summary.rmiName = RmiName_ItemUseV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PkLootingItemV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PkLootingItemV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PkLootingItemV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PkLootingItemV2Req, RmiName_PkLootingItemV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PkLootingItemV2Req;
        summary.rmiName = RmiName_PkLootingItemV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PkLootingItemV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PkLootingItemV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PkLootingItemV2Req;
        summary.rmiName = RmiName_PkLootingItemV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PkLootingListV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PkLootingListV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PkLootingListV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PkLootingListV2Req, RmiName_PkLootingListV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PkLootingListV2Req;
        summary.rmiName = RmiName_PkLootingListV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PkLootingListV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PkLootingListV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PkLootingListV2Req;
        summary.rmiName = RmiName_PkLootingListV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_WarehouseChangeSizeV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.WarehouseChangeSizeV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_WarehouseChangeSizeV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.WarehouseChangeSizeV2Req, RmiName_WarehouseChangeSizeV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.WarehouseChangeSizeV2Req;
        summary.rmiName = RmiName_WarehouseChangeSizeV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =WarehouseChangeSizeV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_WarehouseChangeSizeV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.WarehouseChangeSizeV2Req;
        summary.rmiName = RmiName_WarehouseChangeSizeV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_WarehouseInfoV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.WarehouseInfoV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_WarehouseInfoV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.WarehouseInfoV2Req, RmiName_WarehouseInfoV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.WarehouseInfoV2Req;
        summary.rmiName = RmiName_WarehouseInfoV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =WarehouseInfoV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_WarehouseInfoV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.WarehouseInfoV2Req;
        summary.rmiName = RmiName_WarehouseInfoV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_WarehouseItemMoveV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.WarehouseItemMoveV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_WarehouseItemMoveV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.WarehouseItemMoveV2Req, RmiName_WarehouseItemMoveV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.WarehouseItemMoveV2Req;
        summary.rmiName = RmiName_WarehouseItemMoveV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =WarehouseItemMoveV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_WarehouseItemMoveV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.WarehouseItemMoveV2Req;
        summary.rmiName = RmiName_WarehouseItemMoveV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemSetLockReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.ItemSetLockReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemSetLockReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemSetLockReq, RmiName_ItemSetLockReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemSetLockReq;
        summary.rmiName = RmiName_ItemSetLockReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemSetLockReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemSetLockReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemSetLockReq;
        summary.rmiName = RmiName_ItemSetLockReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemMarketPriceReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.ItemMarketPriceReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemMarketPriceReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemMarketPriceReq, RmiName_ItemMarketPriceReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemMarketPriceReq;
        summary.rmiName = RmiName_ItemMarketPriceReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemMarketPriceReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemMarketPriceReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemMarketPriceReq;
        summary.rmiName = RmiName_ItemMarketPriceReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ItemInheritReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.ItemInheritReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ItemInheritReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ItemInheritReq, RmiName_ItemInheritReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ItemInheritReq;
        summary.rmiName = RmiName_ItemInheritReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ItemInheritReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ItemInheritReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ItemInheritReq;
        summary.rmiName = RmiName_ItemInheritReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MailListV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.MailListV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_MailListV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.MailListV2Req, RmiName_MailListV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MailListV2Req;
        summary.rmiName = RmiName_MailListV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MailListV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MailListV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MailListV2Req;
        summary.rmiName = RmiName_MailListV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MailReadAllV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.MailReadAllV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_MailReadAllV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.MailReadAllV2Req, RmiName_MailReadAllV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MailReadAllV2Req;
        summary.rmiName = RmiName_MailReadAllV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MailReadAllV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MailReadAllV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MailReadAllV2Req;
        summary.rmiName = RmiName_MailReadAllV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MailReadV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.MailReadV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_MailReadV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.MailReadV2Req, RmiName_MailReadV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MailReadV2Req;
        summary.rmiName = RmiName_MailReadV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MailReadV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MailReadV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MailReadV2Req;
        summary.rmiName = RmiName_MailReadV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MatchingApplyReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.MatchingApplyReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_MatchingApplyReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.MatchingApplyReq, RmiName_MatchingApplyReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MatchingApplyReq;
        summary.rmiName = RmiName_MatchingApplyReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MatchingApplyReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MatchingApplyReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MatchingApplyReq;
        summary.rmiName = RmiName_MatchingApplyReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MatchingCancelReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.MatchingCancelReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_MatchingCancelReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.MatchingCancelReq, RmiName_MatchingCancelReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MatchingCancelReq;
        summary.rmiName = RmiName_MatchingCancelReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MatchingCancelReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MatchingCancelReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MatchingCancelReq;
        summary.rmiName = RmiName_MatchingCancelReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_MatchingReplyReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.MatchingReplyReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_MatchingReplyReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.MatchingReplyReq, RmiName_MatchingReplyReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.MatchingReplyReq;
        summary.rmiName = RmiName_MatchingReplyReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =MatchingReplyReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_MatchingReplyReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.MatchingReplyReq;
        summary.rmiName = RmiName_MatchingReplyReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AuthenticatePlayerCredentialReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.AuthenticatePlayerCredentialReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_AuthenticatePlayerCredentialReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.AuthenticatePlayerCredentialReq, RmiName_AuthenticatePlayerCredentialReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AuthenticatePlayerCredentialReq;
        summary.rmiName = RmiName_AuthenticatePlayerCredentialReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AuthenticatePlayerCredentialReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AuthenticatePlayerCredentialReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AuthenticatePlayerCredentialReq;
        summary.rmiName = RmiName_AuthenticatePlayerCredentialReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BroadCastContextReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.BroadCastContextReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_BroadCastContextReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.BroadCastContextReq, RmiName_BroadCastContextReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BroadCastContextReq;
        summary.rmiName = RmiName_BroadCastContextReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BroadCastContextReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BroadCastContextReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BroadCastContextReq;
        summary.rmiName = RmiName_BroadCastContextReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CutSceneEndV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.CutSceneEndV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CutSceneEndV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CutSceneEndV2Req, RmiName_CutSceneEndV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CutSceneEndV2Req;
        summary.rmiName = RmiName_CutSceneEndV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CutSceneEndV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CutSceneEndV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CutSceneEndV2Req;
        summary.rmiName = RmiName_CutSceneEndV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_CutSceneStartV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.CutSceneStartV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_CutSceneStartV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.CutSceneStartV2Req, RmiName_CutSceneStartV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.CutSceneStartV2Req;
        summary.rmiName = RmiName_CutSceneStartV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =CutSceneStartV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_CutSceneStartV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.CutSceneStartV2Req;
        summary.rmiName = RmiName_CutSceneStartV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_LogOutReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.LogOutReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_LogOutReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.LogOutReq, RmiName_LogOutReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.LogOutReq;
        summary.rmiName = RmiName_LogOutReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =LogOutReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_LogOutReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.LogOutReq;
        summary.rmiName = RmiName_LogOutReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PortalV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PortalV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PortalV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PortalV2Req, RmiName_PortalV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PortalV2Req;
        summary.rmiName = RmiName_PortalV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PortalV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PortalV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PortalV2Req;
        summary.rmiName = RmiName_PortalV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ReturnToLobbyReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.ReturnToLobbyReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ReturnToLobbyReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ReturnToLobbyReq, RmiName_ReturnToLobbyReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ReturnToLobbyReq;
        summary.rmiName = RmiName_ReturnToLobbyReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ReturnToLobbyReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ReturnToLobbyReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ReturnToLobbyReq;
        summary.rmiName = RmiName_ReturnToLobbyReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ServerTimeV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ServerTimeV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ServerTimeV2Req, RmiName_ServerTimeV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ServerTimeV2Req;
        summary.rmiName = RmiName_ServerTimeV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ServerTimeV2Req (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ServerTimeV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ServerTimeV2Req;
        summary.rmiName = RmiName_ServerTimeV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TestPacketV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TestPacketV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TestPacketV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TestPacketV2Req, RmiName_TestPacketV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TestPacketV2Req;
        summary.rmiName = RmiName_TestPacketV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TestPacketV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TestPacketV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TestPacketV2Req;
        summary.rmiName = RmiName_TestPacketV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TriggerActivateV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TriggerActivateV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TriggerActivateV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TriggerActivateV2Req, RmiName_TriggerActivateV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TriggerActivateV2Req;
        summary.rmiName = RmiName_TriggerActivateV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TriggerActivateV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TriggerActivateV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TriggerActivateV2Req;
        summary.rmiName = RmiName_TriggerActivateV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_UnionV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.UnionV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_UnionV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.UnionV2Req, RmiName_UnionV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.UnionV2Req;
        summary.rmiName = RmiName_UnionV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =UnionV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_UnionV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.UnionV2Req;
        summary.rmiName = RmiName_UnionV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ZoneLoadingCompletedReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_ZoneLoadingCompletedReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.ZoneLoadingCompletedReq, RmiName_ZoneLoadingCompletedReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ZoneLoadingCompletedReq;
        summary.rmiName = RmiName_ZoneLoadingCompletedReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ZoneLoadingCompletedReq (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ZoneLoadingCompletedReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ZoneLoadingCompletedReq;
        summary.rmiName = RmiName_ZoneLoadingCompletedReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BossDamagedInfoReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.BossDamagedInfoReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_BossDamagedInfoReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.BossDamagedInfoReq, RmiName_BossDamagedInfoReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BossDamagedInfoReq;
        summary.rmiName = RmiName_BossDamagedInfoReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BossDamagedInfoReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BossDamagedInfoReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BossDamagedInfoReq;
        summary.rmiName = RmiName_BossDamagedInfoReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyChangeLootingReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PartyChangeLootingReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyChangeLootingReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyChangeLootingReq, RmiName_PartyChangeLootingReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyChangeLootingReq;
        summary.rmiName = RmiName_PartyChangeLootingReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyChangeLootingReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyChangeLootingReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyChangeLootingReq;
        summary.rmiName = RmiName_PartyChangeLootingReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyCreateReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PartyCreateReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyCreateReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyCreateReq, RmiName_PartyCreateReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyCreateReq;
        summary.rmiName = RmiName_PartyCreateReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyCreateReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyCreateReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyCreateReq;
        summary.rmiName = RmiName_PartyCreateReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyDisbandReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PartyDisbandReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyDisbandReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyDisbandReq, RmiName_PartyDisbandReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyDisbandReq;
        summary.rmiName = RmiName_PartyDisbandReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyDisbandReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyDisbandReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyDisbandReq;
        summary.rmiName = RmiName_PartyDisbandReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyDungeonEntranceInquiryReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PartyDungeonEntranceInquiryReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyDungeonEntranceInquiryReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyDungeonEntranceInquiryReq, RmiName_PartyDungeonEntranceInquiryReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyDungeonEntranceInquiryReq;
        summary.rmiName = RmiName_PartyDungeonEntranceInquiryReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyDungeonEntranceInquiryReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyDungeonEntranceInquiryReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyDungeonEntranceInquiryReq;
        summary.rmiName = RmiName_PartyDungeonEntranceInquiryReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyEnterDungeonReplyReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PartyEnterDungeonReplyReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyEnterDungeonReplyReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyEnterDungeonReplyReq, RmiName_PartyEnterDungeonReplyReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyEnterDungeonReplyReq;
        summary.rmiName = RmiName_PartyEnterDungeonReplyReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyEnterDungeonReplyReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyEnterDungeonReplyReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyEnterDungeonReplyReq;
        summary.rmiName = RmiName_PartyEnterDungeonReplyReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyEnterDungeonReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PartyEnterDungeonReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyEnterDungeonReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyEnterDungeonReq, RmiName_PartyEnterDungeonReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyEnterDungeonReq;
        summary.rmiName = RmiName_PartyEnterDungeonReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyEnterDungeonReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyEnterDungeonReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyEnterDungeonReq;
        summary.rmiName = RmiName_PartyEnterDungeonReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyInfoReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PartyInfoReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyInfoReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyInfoReq, RmiName_PartyInfoReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyInfoReq;
        summary.rmiName = RmiName_PartyInfoReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyInfoReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyInfoReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyInfoReq;
        summary.rmiName = RmiName_PartyInfoReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyInviteReplyReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PartyInviteReplyReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyInviteReplyReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyInviteReplyReq, RmiName_PartyInviteReplyReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyInviteReplyReq;
        summary.rmiName = RmiName_PartyInviteReplyReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyInviteReplyReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyInviteReplyReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyInviteReplyReq;
        summary.rmiName = RmiName_PartyInviteReplyReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyInviteReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PartyInviteReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyInviteReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyInviteReq, RmiName_PartyInviteReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyInviteReq;
        summary.rmiName = RmiName_PartyInviteReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyInviteReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyInviteReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyInviteReq;
        summary.rmiName = RmiName_PartyInviteReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyLeaderChangeReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PartyLeaderChangeReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyLeaderChangeReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyLeaderChangeReq, RmiName_PartyLeaderChangeReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyLeaderChangeReq;
        summary.rmiName = RmiName_PartyLeaderChangeReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyLeaderChangeReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyLeaderChangeReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyLeaderChangeReq;
        summary.rmiName = RmiName_PartyLeaderChangeReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyLeaveReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PartyLeaveReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyLeaveReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyLeaveReq, RmiName_PartyLeaveReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyLeaveReq;
        summary.rmiName = RmiName_PartyLeaveReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyLeaveReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyLeaveReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyLeaveReq;
        summary.rmiName = RmiName_PartyLeaveReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyMemberKickReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PartyMemberKickReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyMemberKickReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyMemberKickReq, RmiName_PartyMemberKickReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyMemberKickReq;
        summary.rmiName = RmiName_PartyMemberKickReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyMemberKickReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyMemberKickReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyMemberKickReq;
        summary.rmiName = RmiName_PartyMemberKickReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartySuggestionPlayersReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PartySuggestionPlayersReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartySuggestionPlayersReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartySuggestionPlayersReq, RmiName_PartySuggestionPlayersReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartySuggestionPlayersReq;
        summary.rmiName = RmiName_PartySuggestionPlayersReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartySuggestionPlayersReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartySuggestionPlayersReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartySuggestionPlayersReq;
        summary.rmiName = RmiName_PartySuggestionPlayersReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PartyEnterDungeonCanceledReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PartyEnterDungeonCanceledReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PartyEnterDungeonCanceledReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PartyEnterDungeonCanceledReq, RmiName_PartyEnterDungeonCanceledReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PartyEnterDungeonCanceledReq;
        summary.rmiName = RmiName_PartyEnterDungeonCanceledReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PartyEnterDungeonCanceledReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PartyEnterDungeonCanceledReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PartyEnterDungeonCanceledReq;
        summary.rmiName = RmiName_PartyEnterDungeonCanceledReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PetCollectInfoV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PetCollectInfoV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PetCollectInfoV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PetCollectInfoV2Req, RmiName_PetCollectInfoV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PetCollectInfoV2Req;
        summary.rmiName = RmiName_PetCollectInfoV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PetCollectInfoV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PetCollectInfoV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PetCollectInfoV2Req;
        summary.rmiName = RmiName_PetCollectInfoV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PetEquipOffV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_PetEquipOffV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.PetEquipOffV2Req, RmiName_PetEquipOffV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PetEquipOffV2Req;
        summary.rmiName = RmiName_PetEquipOffV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PetEquipOffV2Req (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PetEquipOffV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PetEquipOffV2Req;
        summary.rmiName = RmiName_PetEquipOffV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PetEquipV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PetEquipV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PetEquipV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PetEquipV2Req, RmiName_PetEquipV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PetEquipV2Req;
        summary.rmiName = RmiName_PetEquipV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PetEquipV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PetEquipV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PetEquipV2Req;
        summary.rmiName = RmiName_PetEquipV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PetFeedUseV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PetFeedUseV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PetFeedUseV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PetFeedUseV2Req, RmiName_PetFeedUseV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PetFeedUseV2Req;
        summary.rmiName = RmiName_PetFeedUseV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PetFeedUseV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PetFeedUseV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PetFeedUseV2Req;
        summary.rmiName = RmiName_PetFeedUseV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PetGachaV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PetGachaV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PetGachaV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PetGachaV2Req, RmiName_PetGachaV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PetGachaV2Req;
        summary.rmiName = RmiName_PetGachaV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PetGachaV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PetGachaV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PetGachaV2Req;
        summary.rmiName = RmiName_PetGachaV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PetInfoV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_PetInfoV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.PetInfoV2Req, RmiName_PetInfoV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PetInfoV2Req;
        summary.rmiName = RmiName_PetInfoV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PetInfoV2Req (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PetInfoV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PetInfoV2Req;
        summary.rmiName = RmiName_PetInfoV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PetMixV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PetMixV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PetMixV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PetMixV2Req, RmiName_PetMixV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PetMixV2Req;
        summary.rmiName = RmiName_PetMixV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PetMixV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PetMixV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PetMixV2Req;
        summary.rmiName = RmiName_PetMixV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PetUpgradeV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PetUpgradeV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PetUpgradeV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PetUpgradeV2Req, RmiName_PetUpgradeV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PetUpgradeV2Req;
        summary.rmiName = RmiName_PetUpgradeV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PetUpgradeV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PetUpgradeV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PetUpgradeV2Req;
        summary.rmiName = RmiName_PetUpgradeV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PetInActiveBuffReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PetInActiveBuffReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PetInActiveBuffReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PetInActiveBuffReq, RmiName_PetInActiveBuffReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PetInActiveBuffReq;
        summary.rmiName = RmiName_PetInActiveBuffReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PetInActiveBuffReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PetInActiveBuffReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PetInActiveBuffReq;
        summary.rmiName = RmiName_PetInActiveBuffReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PhaseFieldEndV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PhaseFieldEndV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PhaseFieldEndV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PhaseFieldEndV2Req, RmiName_PhaseFieldEndV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PhaseFieldEndV2Req;
        summary.rmiName = RmiName_PhaseFieldEndV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PhaseFieldEndV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PhaseFieldEndV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PhaseFieldEndV2Req;
        summary.rmiName = RmiName_PhaseFieldEndV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PhaseFieldStartV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PhaseFieldStartV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PhaseFieldStartV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PhaseFieldStartV2Req, RmiName_PhaseFieldStartV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PhaseFieldStartV2Req;
        summary.rmiName = RmiName_PhaseFieldStartV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PhaseFieldStartV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PhaseFieldStartV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PhaseFieldStartV2Req;
        summary.rmiName = RmiName_PhaseFieldStartV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerDeleteReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PlayerDeleteReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerDeleteReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerDeleteReq, RmiName_PlayerDeleteReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerDeleteReq;
        summary.rmiName = RmiName_PlayerDeleteReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerDeleteReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerDeleteReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerDeleteReq;
        summary.rmiName = RmiName_PlayerDeleteReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerGetMacroReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PlayerGetMacroReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerGetMacroReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerGetMacroReq, RmiName_PlayerGetMacroReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerGetMacroReq;
        summary.rmiName = RmiName_PlayerGetMacroReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerGetMacroReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerGetMacroReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerGetMacroReq;
        summary.rmiName = RmiName_PlayerGetMacroReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerMapMoveV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PlayerMapMoveV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerMapMoveV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerMapMoveV2Req, RmiName_PlayerMapMoveV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerMapMoveV2Req;
        summary.rmiName = RmiName_PlayerMapMoveV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerMapMoveV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerMapMoveV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerMapMoveV2Req;
        summary.rmiName = RmiName_PlayerMapMoveV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerMoveV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PlayerMoveV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerMoveV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerMoveV2Req, RmiName_PlayerMoveV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerMoveV2Req;
        summary.rmiName = RmiName_PlayerMoveV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerMoveV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerMoveV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerMoveV2Req;
        summary.rmiName = RmiName_PlayerMoveV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerMoveZoneV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PlayerMoveZoneV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerMoveZoneV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerMoveZoneV2Req, RmiName_PlayerMoveZoneV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerMoveZoneV2Req;
        summary.rmiName = RmiName_PlayerMoveZoneV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerMoveZoneV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerMoveZoneV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerMoveZoneV2Req;
        summary.rmiName = RmiName_PlayerMoveZoneV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerResurrectionV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PlayerResurrectionV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerResurrectionV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerResurrectionV2Req, RmiName_PlayerResurrectionV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerResurrectionV2Req;
        summary.rmiName = RmiName_PlayerResurrectionV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerResurrectionV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerResurrectionV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerResurrectionV2Req;
        summary.rmiName = RmiName_PlayerResurrectionV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerSetMacroReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PlayerSetMacroReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerSetMacroReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerSetMacroReq, RmiName_PlayerSetMacroReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerSetMacroReq;
        summary.rmiName = RmiName_PlayerSetMacroReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerSetMacroReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerSetMacroReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerSetMacroReq;
        summary.rmiName = RmiName_PlayerSetMacroReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerSlotChangeV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PlayerSlotChangeV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerSlotChangeV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerSlotChangeV2Req, RmiName_PlayerSlotChangeV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerSlotChangeV2Req;
        summary.rmiName = RmiName_PlayerSlotChangeV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerSlotChangeV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerSlotChangeV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerSlotChangeV2Req;
        summary.rmiName = RmiName_PlayerSlotChangeV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerStatPointChangeV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PlayerStatPointChangeV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerStatPointChangeV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerStatPointChangeV2Req, RmiName_PlayerStatPointChangeV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerStatPointChangeV2Req;
        summary.rmiName = RmiName_PlayerStatPointChangeV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerStatPointChangeV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerStatPointChangeV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerStatPointChangeV2Req;
        summary.rmiName = RmiName_PlayerStatPointChangeV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerStatPointInitV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PlayerStatPointInitV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerStatPointInitV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerStatPointInitV2Req, RmiName_PlayerStatPointInitV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerStatPointInitV2Req;
        summary.rmiName = RmiName_PlayerStatPointInitV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerStatPointInitV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerStatPointInitV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerStatPointInitV2Req;
        summary.rmiName = RmiName_PlayerStatPointInitV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerStatV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PlayerStatV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerStatV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerStatV2Req, RmiName_PlayerStatV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerStatV2Req;
        summary.rmiName = RmiName_PlayerStatV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerStatV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerStatV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerStatV2Req;
        summary.rmiName = RmiName_PlayerStatV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerDeathInfoReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PlayerDeathInfoReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerDeathInfoReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerDeathInfoReq, RmiName_PlayerDeathInfoReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerDeathInfoReq;
        summary.rmiName = RmiName_PlayerDeathInfoReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerDeathInfoReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerDeathInfoReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerDeathInfoReq;
        summary.rmiName = RmiName_PlayerDeathInfoReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RecoverPlayerExpReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.RecoverPlayerExpReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RecoverPlayerExpReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RecoverPlayerExpReq, RmiName_RecoverPlayerExpReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RecoverPlayerExpReq;
        summary.rmiName = RmiName_RecoverPlayerExpReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RecoverPlayerExpReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RecoverPlayerExpReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RecoverPlayerExpReq;
        summary.rmiName = RmiName_RecoverPlayerExpReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerClassUpV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PlayerClassUpV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerClassUpV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerClassUpV2Req, RmiName_PlayerClassUpV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerClassUpV2Req;
        summary.rmiName = RmiName_PlayerClassUpV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerClassUpV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerClassUpV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerClassUpV2Req;
        summary.rmiName = RmiName_PlayerClassUpV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_QuickslotSetReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.QuickslotSetReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_QuickslotSetReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.QuickslotSetReq, RmiName_QuickslotSetReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.QuickslotSetReq;
        summary.rmiName = RmiName_QuickslotSetReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =QuickslotSetReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_QuickslotSetReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.QuickslotSetReq;
        summary.rmiName = RmiName_QuickslotSetReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerExpRecoveryPopupReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PlayerExpRecoveryPopupReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerExpRecoveryPopupReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerExpRecoveryPopupReq, RmiName_PlayerExpRecoveryPopupReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerExpRecoveryPopupReq;
        summary.rmiName = RmiName_PlayerExpRecoveryPopupReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerExpRecoveryPopupReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerExpRecoveryPopupReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerExpRecoveryPopupReq;
        summary.rmiName = RmiName_PlayerExpRecoveryPopupReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RTTPlayerMoveV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.RTTPlayerMoveV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RTTPlayerMoveV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RTTPlayerMoveV2Req, RmiName_RTTPlayerMoveV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RTTPlayerMoveV2Req;
        summary.rmiName = RmiName_RTTPlayerMoveV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RTTPlayerMoveV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RTTPlayerMoveV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RTTPlayerMoveV2Req;
        summary.rmiName = RmiName_RTTPlayerMoveV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_QuestAbandonV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.QuestAbandonV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_QuestAbandonV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.QuestAbandonV2Req, RmiName_QuestAbandonV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.QuestAbandonV2Req;
        summary.rmiName = RmiName_QuestAbandonV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =QuestAbandonV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_QuestAbandonV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.QuestAbandonV2Req;
        summary.rmiName = RmiName_QuestAbandonV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_QuestAcceptV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.QuestAcceptV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_QuestAcceptV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.QuestAcceptV2Req, RmiName_QuestAcceptV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.QuestAcceptV2Req;
        summary.rmiName = RmiName_QuestAcceptV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =QuestAcceptV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_QuestAcceptV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.QuestAcceptV2Req;
        summary.rmiName = RmiName_QuestAcceptV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_QuestCompleteV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.QuestCompleteV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_QuestCompleteV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.QuestCompleteV2Req, RmiName_QuestCompleteV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.QuestCompleteV2Req;
        summary.rmiName = RmiName_QuestCompleteV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =QuestCompleteV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_QuestCompleteV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.QuestCompleteV2Req;
        summary.rmiName = RmiName_QuestCompleteV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_QuestConditionCompleteV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.QuestConditionCompleteV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_QuestConditionCompleteV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.QuestConditionCompleteV2Req, RmiName_QuestConditionCompleteV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.QuestConditionCompleteV2Req;
        summary.rmiName = RmiName_QuestConditionCompleteV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =QuestConditionCompleteV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_QuestConditionCompleteV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.QuestConditionCompleteV2Req;
        summary.rmiName = RmiName_QuestConditionCompleteV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_QuestListV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.QuestListV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_QuestListV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.QuestListV2Req, RmiName_QuestListV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.QuestListV2Req;
        summary.rmiName = RmiName_QuestListV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =QuestListV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_QuestListV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.QuestListV2Req;
        summary.rmiName = RmiName_QuestListV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_QuestPortalV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.QuestPortalV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_QuestPortalV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.QuestPortalV2Req, RmiName_QuestPortalV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.QuestPortalV2Req;
        summary.rmiName = RmiName_QuestPortalV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =QuestPortalV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_QuestPortalV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.QuestPortalV2Req;
        summary.rmiName = RmiName_QuestPortalV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_QuestRegisterV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.QuestRegisterV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_QuestRegisterV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.QuestRegisterV2Req, RmiName_QuestRegisterV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.QuestRegisterV2Req;
        summary.rmiName = RmiName_QuestRegisterV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =QuestRegisterV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_QuestRegisterV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.QuestRegisterV2Req;
        summary.rmiName = RmiName_QuestRegisterV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_QuestRerollV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_QuestRerollV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.QuestRerollV2Req, RmiName_QuestRerollV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.QuestRerollV2Req;
        summary.rmiName = RmiName_QuestRerollV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =QuestRerollV2Req (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_QuestRerollV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.QuestRerollV2Req;
        summary.rmiName = RmiName_QuestRerollV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_QuestRewardV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.QuestRewardV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_QuestRewardV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.QuestRewardV2Req, RmiName_QuestRewardV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.QuestRewardV2Req;
        summary.rmiName = RmiName_QuestRewardV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =QuestRewardV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_QuestRewardV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.QuestRewardV2Req;
        summary.rmiName = RmiName_QuestRewardV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_QuestTalkCompleteV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.QuestTalkCompleteV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_QuestTalkCompleteV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.QuestTalkCompleteV2Req, RmiName_QuestTalkCompleteV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.QuestTalkCompleteV2Req;
        summary.rmiName = RmiName_QuestTalkCompleteV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =QuestTalkCompleteV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_QuestTalkCompleteV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.QuestTalkCompleteV2Req;
        summary.rmiName = RmiName_QuestTalkCompleteV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TutorialSkipV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_TutorialSkipV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.TutorialSkipV2Req, RmiName_TutorialSkipV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TutorialSkipV2Req;
        summary.rmiName = RmiName_TutorialSkipV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TutorialSkipV2Req (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TutorialSkipV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TutorialSkipV2Req;
        summary.rmiName = RmiName_TutorialSkipV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GuildRelationReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.GuildRelationReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GuildRelationReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GuildRelationReq, RmiName_GuildRelationReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GuildRelationReq;
        summary.rmiName = RmiName_GuildRelationReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GuildRelationReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GuildRelationReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GuildRelationReq;
        summary.rmiName = RmiName_GuildRelationReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerRelationReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PlayerRelationReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerRelationReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerRelationReq, RmiName_PlayerRelationReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerRelationReq;
        summary.rmiName = RmiName_PlayerRelationReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerRelationReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerRelationReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerRelationReq;
        summary.rmiName = RmiName_PlayerRelationReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RideAttachDeleteV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.RideAttachDeleteV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RideAttachDeleteV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RideAttachDeleteV2Req, RmiName_RideAttachDeleteV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RideAttachDeleteV2Req;
        summary.rmiName = RmiName_RideAttachDeleteV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RideAttachDeleteV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RideAttachDeleteV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RideAttachDeleteV2Req;
        summary.rmiName = RmiName_RideAttachDeleteV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RideAttachDisassembleV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.RideAttachDisassembleV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RideAttachDisassembleV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RideAttachDisassembleV2Req, RmiName_RideAttachDisassembleV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RideAttachDisassembleV2Req;
        summary.rmiName = RmiName_RideAttachDisassembleV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RideAttachDisassembleV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RideAttachDisassembleV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RideAttachDisassembleV2Req;
        summary.rmiName = RmiName_RideAttachDisassembleV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RideAttachEquipOffV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.RideAttachEquipOffV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RideAttachEquipOffV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RideAttachEquipOffV2Req, RmiName_RideAttachEquipOffV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RideAttachEquipOffV2Req;
        summary.rmiName = RmiName_RideAttachEquipOffV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RideAttachEquipOffV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RideAttachEquipOffV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RideAttachEquipOffV2Req;
        summary.rmiName = RmiName_RideAttachEquipOffV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RideAttachEquipV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.RideAttachEquipV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RideAttachEquipV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RideAttachEquipV2Req, RmiName_RideAttachEquipV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RideAttachEquipV2Req;
        summary.rmiName = RmiName_RideAttachEquipV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RideAttachEquipV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RideAttachEquipV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RideAttachEquipV2Req;
        summary.rmiName = RmiName_RideAttachEquipV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RideAttachGachaV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.RideAttachGachaV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RideAttachGachaV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RideAttachGachaV2Req, RmiName_RideAttachGachaV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RideAttachGachaV2Req;
        summary.rmiName = RmiName_RideAttachGachaV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RideAttachGachaV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RideAttachGachaV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RideAttachGachaV2Req;
        summary.rmiName = RmiName_RideAttachGachaV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RideAttachInvenExtendV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.RideAttachInvenExtendV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RideAttachInvenExtendV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RideAttachInvenExtendV2Req, RmiName_RideAttachInvenExtendV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RideAttachInvenExtendV2Req;
        summary.rmiName = RmiName_RideAttachInvenExtendV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RideAttachInvenExtendV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RideAttachInvenExtendV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RideAttachInvenExtendV2Req;
        summary.rmiName = RmiName_RideAttachInvenExtendV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RideEquipOffV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_RideEquipOffV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.RideEquipOffV2Req, RmiName_RideEquipOffV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RideEquipOffV2Req;
        summary.rmiName = RmiName_RideEquipOffV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RideEquipOffV2Req (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RideEquipOffV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RideEquipOffV2Req;
        summary.rmiName = RmiName_RideEquipOffV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RideEquipV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.RideEquipV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RideEquipV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RideEquipV2Req, RmiName_RideEquipV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RideEquipV2Req;
        summary.rmiName = RmiName_RideEquipV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RideEquipV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RideEquipV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RideEquipV2Req;
        summary.rmiName = RmiName_RideEquipV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RideGachaV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.RideGachaV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RideGachaV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RideGachaV2Req, RmiName_RideGachaV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RideGachaV2Req;
        summary.rmiName = RmiName_RideGachaV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RideGachaV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RideGachaV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RideGachaV2Req;
        summary.rmiName = RmiName_RideGachaV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RideMixV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.RideMixV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RideMixV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RideMixV2Req, RmiName_RideMixV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RideMixV2Req;
        summary.rmiName = RmiName_RideMixV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RideMixV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RideMixV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RideMixV2Req;
        summary.rmiName = RmiName_RideMixV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RideSitOffV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_RideSitOffV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.RideSitOffV2Req, RmiName_RideSitOffV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RideSitOffV2Req;
        summary.rmiName = RmiName_RideSitOffV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RideSitOffV2Req (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RideSitOffV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RideSitOffV2Req;
        summary.rmiName = RmiName_RideSitOffV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RideSitV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        core.PostCheckReadMessage(__msg, RmiName_RideSitV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
                NotifyCallFromStub(Common.RideSitV2Req, RmiName_RideSitV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RideSitV2Req;
        summary.rmiName = RmiName_RideSitV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RideSitV2Req (remote,ctx  );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RideSitV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RideSitV2Req;
        summary.rmiName = RmiName_RideSitV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BuyCashShopItemV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.BuyCashShopItemV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_BuyCashShopItemV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.BuyCashShopItemV2Req, RmiName_BuyCashShopItemV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BuyCashShopItemV2Req;
        summary.rmiName = RmiName_BuyCashShopItemV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BuyCashShopItemV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BuyCashShopItemV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BuyCashShopItemV2Req;
        summary.rmiName = RmiName_BuyCashShopItemV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BuyGameShopItemV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.BuyGameShopItemV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_BuyGameShopItemV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.BuyGameShopItemV2Req, RmiName_BuyGameShopItemV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BuyGameShopItemV2Req;
        summary.rmiName = RmiName_BuyGameShopItemV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BuyGameShopItemV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BuyGameShopItemV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BuyGameShopItemV2Req;
        summary.rmiName = RmiName_BuyGameShopItemV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GameShopSellItemV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.GameShopSellItemV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GameShopSellItemV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GameShopSellItemV2Req, RmiName_GameShopSellItemV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GameShopSellItemV2Req;
        summary.rmiName = RmiName_GameShopSellItemV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GameShopSellItemV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GameShopSellItemV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GameShopSellItemV2Req;
        summary.rmiName = RmiName_GameShopSellItemV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ChangeSiegeModeV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.ChangeSiegeModeV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ChangeSiegeModeV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ChangeSiegeModeV2Req, RmiName_ChangeSiegeModeV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ChangeSiegeModeV2Req;
        summary.rmiName = RmiName_ChangeSiegeModeV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ChangeSiegeModeV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ChangeSiegeModeV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ChangeSiegeModeV2Req;
        summary.rmiName = RmiName_ChangeSiegeModeV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ChoiceSiegeWarFactionV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.ChoiceSiegeWarFactionV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ChoiceSiegeWarFactionV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ChoiceSiegeWarFactionV2Req, RmiName_ChoiceSiegeWarFactionV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ChoiceSiegeWarFactionV2Req;
        summary.rmiName = RmiName_ChoiceSiegeWarFactionV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ChoiceSiegeWarFactionV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ChoiceSiegeWarFactionV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ChoiceSiegeWarFactionV2Req;
        summary.rmiName = RmiName_ChoiceSiegeWarFactionV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GetSiegeWarInfoV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.GetSiegeWarInfoV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GetSiegeWarInfoV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GetSiegeWarInfoV2Req, RmiName_GetSiegeWarInfoV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GetSiegeWarInfoV2Req;
        summary.rmiName = RmiName_GetSiegeWarInfoV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GetSiegeWarInfoV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GetSiegeWarInfoV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GetSiegeWarInfoV2Req;
        summary.rmiName = RmiName_GetSiegeWarInfoV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_GetSiegeWarMatchInfoV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.GetSiegeWarMatchInfoV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_GetSiegeWarMatchInfoV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.GetSiegeWarMatchInfoV2Req, RmiName_GetSiegeWarMatchInfoV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.GetSiegeWarMatchInfoV2Req;
        summary.rmiName = RmiName_GetSiegeWarMatchInfoV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =GetSiegeWarMatchInfoV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_GetSiegeWarMatchInfoV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.GetSiegeWarMatchInfoV2Req;
        summary.rmiName = RmiName_GetSiegeWarMatchInfoV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BuffListInfoV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.BuffListInfoV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_BuffListInfoV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.BuffListInfoV2Req, RmiName_BuffListInfoV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BuffListInfoV2Req;
        summary.rmiName = RmiName_BuffListInfoV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BuffListInfoV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BuffListInfoV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BuffListInfoV2Req;
        summary.rmiName = RmiName_BuffListInfoV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SkillChangeAutoUseV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.SkillChangeAutoUseV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_SkillChangeAutoUseV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.SkillChangeAutoUseV2Req, RmiName_SkillChangeAutoUseV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SkillChangeAutoUseV2Req;
        summary.rmiName = RmiName_SkillChangeAutoUseV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SkillChangeAutoUseV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SkillChangeAutoUseV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SkillChangeAutoUseV2Req;
        summary.rmiName = RmiName_SkillChangeAutoUseV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SkillChangePresetV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.SkillChangePresetV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_SkillChangePresetV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.SkillChangePresetV2Req, RmiName_SkillChangePresetV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SkillChangePresetV2Req;
        summary.rmiName = RmiName_SkillChangePresetV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SkillChangePresetV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SkillChangePresetV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SkillChangePresetV2Req;
        summary.rmiName = RmiName_SkillChangePresetV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SkillEquipV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.SkillEquipV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_SkillEquipV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.SkillEquipV2Req, RmiName_SkillEquipV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SkillEquipV2Req;
        summary.rmiName = RmiName_SkillEquipV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SkillEquipV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SkillEquipV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SkillEquipV2Req;
        summary.rmiName = RmiName_SkillEquipV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SkillHitV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.SkillHitV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_SkillHitV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.SkillHitV2Req, RmiName_SkillHitV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SkillHitV2Req;
        summary.rmiName = RmiName_SkillHitV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SkillHitV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SkillHitV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SkillHitV2Req;
        summary.rmiName = RmiName_SkillHitV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SkillLearnV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.SkillLearnV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_SkillLearnV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.SkillLearnV2Req, RmiName_SkillLearnV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SkillLearnV2Req;
        summary.rmiName = RmiName_SkillLearnV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SkillLearnV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SkillLearnV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SkillLearnV2Req;
        summary.rmiName = RmiName_SkillLearnV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SkillLevelUpV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.SkillLevelUpV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_SkillLevelUpV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.SkillLevelUpV2Req, RmiName_SkillLevelUpV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SkillLevelUpV2Req;
        summary.rmiName = RmiName_SkillLevelUpV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SkillLevelUpV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SkillLevelUpV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SkillLevelUpV2Req;
        summary.rmiName = RmiName_SkillLevelUpV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SkillListInfoV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.SkillListInfoV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_SkillListInfoV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.SkillListInfoV2Req, RmiName_SkillListInfoV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SkillListInfoV2Req;
        summary.rmiName = RmiName_SkillListInfoV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SkillListInfoV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SkillListInfoV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SkillListInfoV2Req;
        summary.rmiName = RmiName_SkillListInfoV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SkillUnEquipV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.SkillUnEquipV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_SkillUnEquipV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.SkillUnEquipV2Req, RmiName_SkillUnEquipV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SkillUnEquipV2Req;
        summary.rmiName = RmiName_SkillUnEquipV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SkillUnEquipV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SkillUnEquipV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SkillUnEquipV2Req;
        summary.rmiName = RmiName_SkillUnEquipV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SkillUpgradeV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.SkillUpgradeV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_SkillUpgradeV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.SkillUpgradeV2Req, RmiName_SkillUpgradeV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SkillUpgradeV2Req;
        summary.rmiName = RmiName_SkillUpgradeV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SkillUpgradeV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SkillUpgradeV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SkillUpgradeV2Req;
        summary.rmiName = RmiName_SkillUpgradeV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_SkillUseV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.SkillUseV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_SkillUseV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.SkillUseV2Req, RmiName_SkillUseV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.SkillUseV2Req;
        summary.rmiName = RmiName_SkillUseV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =SkillUseV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_SkillUseV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.SkillUseV2Req;
        summary.rmiName = RmiName_SkillUseV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RTTSkillUseV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.RTTSkillUseV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RTTSkillUseV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RTTSkillUseV2Req, RmiName_RTTSkillUseV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RTTSkillUseV2Req;
        summary.rmiName = RmiName_RTTSkillUseV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RTTSkillUseV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RTTSkillUseV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RTTSkillUseV2Req;
        summary.rmiName = RmiName_RTTSkillUseV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_RTTSkillHitV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.RTTSkillHitV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_RTTSkillHitV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.RTTSkillHitV2Req, RmiName_RTTSkillHitV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.RTTSkillHitV2Req;
        summary.rmiName = RmiName_RTTSkillHitV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =RTTSkillHitV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_RTTSkillHitV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.RTTSkillHitV2Req;
        summary.rmiName = RmiName_RTTSkillHitV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_PlayerTitleChangeV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.PlayerTitleChangeV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_PlayerTitleChangeV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.PlayerTitleChangeV2Req, RmiName_PlayerTitleChangeV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.PlayerTitleChangeV2Req;
        summary.rmiName = RmiName_PlayerTitleChangeV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =PlayerTitleChangeV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_PlayerTitleChangeV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.PlayerTitleChangeV2Req;
        summary.rmiName = RmiName_PlayerTitleChangeV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TitleChangeV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TitleChangeV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TitleChangeV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TitleChangeV2Req, RmiName_TitleChangeV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TitleChangeV2Req;
        summary.rmiName = RmiName_TitleChangeV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TitleChangeV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TitleChangeV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TitleChangeV2Req;
        summary.rmiName = RmiName_TitleChangeV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TitleListV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TitleListV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TitleListV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TitleListV2Req, RmiName_TitleListV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TitleListV2Req;
        summary.rmiName = RmiName_TitleListV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TitleListV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TitleListV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TitleListV2Req;
        summary.rmiName = RmiName_TitleListV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeCronAverageBalanceReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TradeCronAverageBalanceReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeCronAverageBalanceReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeCronAverageBalanceReq, RmiName_TradeCronAverageBalanceReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeCronAverageBalanceReq;
        summary.rmiName = RmiName_TradeCronAverageBalanceReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeCronAverageBalanceReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeCronAverageBalanceReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeCronAverageBalanceReq;
        summary.rmiName = RmiName_TradeCronAverageBalanceReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeCronBalanceReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TradeCronBalanceReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeCronBalanceReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeCronBalanceReq, RmiName_TradeCronBalanceReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeCronBalanceReq;
        summary.rmiName = RmiName_TradeCronBalanceReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeCronBalanceReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeCronBalanceReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeCronBalanceReq;
        summary.rmiName = RmiName_TradeCronBalanceReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeCronBuyReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TradeCronBuyReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeCronBuyReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeCronBuyReq, RmiName_TradeCronBuyReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeCronBuyReq;
        summary.rmiName = RmiName_TradeCronBuyReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeCronBuyReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeCronBuyReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeCronBuyReq;
        summary.rmiName = RmiName_TradeCronBuyReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeCronInfoReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TradeCronInfoReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeCronInfoReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeCronInfoReq, RmiName_TradeCronInfoReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeCronInfoReq;
        summary.rmiName = RmiName_TradeCronInfoReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeCronInfoReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeCronInfoReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeCronInfoReq;
        summary.rmiName = RmiName_TradeCronInfoReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeCronListReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TradeCronListReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeCronListReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeCronListReq, RmiName_TradeCronListReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeCronListReq;
        summary.rmiName = RmiName_TradeCronListReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeCronListReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeCronListReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeCronListReq;
        summary.rmiName = RmiName_TradeCronListReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeCronPreviousDayBalanceReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TradeCronPreviousDayBalanceReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeCronPreviousDayBalanceReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeCronPreviousDayBalanceReq, RmiName_TradeCronPreviousDayBalanceReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeCronPreviousDayBalanceReq;
        summary.rmiName = RmiName_TradeCronPreviousDayBalanceReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeCronPreviousDayBalanceReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeCronPreviousDayBalanceReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeCronPreviousDayBalanceReq;
        summary.rmiName = RmiName_TradeCronPreviousDayBalanceReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeCronSellReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TradeCronSellReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeCronSellReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeCronSellReq, RmiName_TradeCronSellReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeCronSellReq;
        summary.rmiName = RmiName_TradeCronSellReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeCronSellReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeCronSellReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeCronSellReq;
        summary.rmiName = RmiName_TradeCronSellReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeCronWeeklyBalanceReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TradeCronWeeklyBalanceReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeCronWeeklyBalanceReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeCronWeeklyBalanceReq, RmiName_TradeCronWeeklyBalanceReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeCronWeeklyBalanceReq;
        summary.rmiName = RmiName_TradeCronWeeklyBalanceReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeCronWeeklyBalanceReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeCronWeeklyBalanceReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeCronWeeklyBalanceReq;
        summary.rmiName = RmiName_TradeCronWeeklyBalanceReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradePersonalRequestReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TradePersonalRequestReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradePersonalRequestReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradePersonalRequestReq, RmiName_TradePersonalRequestReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradePersonalRequestReq;
        summary.rmiName = RmiName_TradePersonalRequestReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradePersonalRequestReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradePersonalRequestReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradePersonalRequestReq;
        summary.rmiName = RmiName_TradePersonalRequestReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradePersonalAcceptReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TradePersonalAcceptReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradePersonalAcceptReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradePersonalAcceptReq, RmiName_TradePersonalAcceptReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradePersonalAcceptReq;
        summary.rmiName = RmiName_TradePersonalAcceptReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradePersonalAcceptReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradePersonalAcceptReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradePersonalAcceptReq;
        summary.rmiName = RmiName_TradePersonalAcceptReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradePersonalRefuseReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TradePersonalRefuseReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradePersonalRefuseReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradePersonalRefuseReq, RmiName_TradePersonalRefuseReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradePersonalRefuseReq;
        summary.rmiName = RmiName_TradePersonalRefuseReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradePersonalRefuseReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradePersonalRefuseReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradePersonalRefuseReq;
        summary.rmiName = RmiName_TradePersonalRefuseReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradePersonalCancelReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TradePersonalCancelReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradePersonalCancelReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradePersonalCancelReq, RmiName_TradePersonalCancelReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradePersonalCancelReq;
        summary.rmiName = RmiName_TradePersonalCancelReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradePersonalCancelReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradePersonalCancelReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradePersonalCancelReq;
        summary.rmiName = RmiName_TradePersonalCancelReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradePersonalWithdrawReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TradePersonalWithdrawReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradePersonalWithdrawReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradePersonalWithdrawReq, RmiName_TradePersonalWithdrawReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradePersonalWithdrawReq;
        summary.rmiName = RmiName_TradePersonalWithdrawReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradePersonalWithdrawReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradePersonalWithdrawReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradePersonalWithdrawReq;
        summary.rmiName = RmiName_TradePersonalWithdrawReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradePersonalFinishReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TradePersonalFinishReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradePersonalFinishReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradePersonalFinishReq, RmiName_TradePersonalFinishReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradePersonalFinishReq;
        summary.rmiName = RmiName_TradePersonalFinishReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradePersonalFinishReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradePersonalFinishReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradePersonalFinishReq;
        summary.rmiName = RmiName_TradePersonalFinishReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradePersonalHistoryReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TradePersonalHistoryReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradePersonalHistoryReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradePersonalHistoryReq, RmiName_TradePersonalHistoryReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradePersonalHistoryReq;
        summary.rmiName = RmiName_TradePersonalHistoryReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradePersonalHistoryReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradePersonalHistoryReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradePersonalHistoryReq;
        summary.rmiName = RmiName_TradePersonalHistoryReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeCronMyListReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TradeCronMyListReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeCronMyListReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeCronMyListReq, RmiName_TradeCronMyListReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeCronMyListReq;
        summary.rmiName = RmiName_TradeCronMyListReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeCronMyListReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeCronMyListReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeCronMyListReq;
        summary.rmiName = RmiName_TradeCronMyListReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeCronSettleReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TradeCronSettleReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeCronSettleReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeCronSettleReq, RmiName_TradeCronSettleReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeCronSettleReq;
        summary.rmiName = RmiName_TradeCronSettleReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeCronSettleReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeCronSettleReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeCronSettleReq;
        summary.rmiName = RmiName_TradeCronSettleReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeCronTradesReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TradeCronTradesReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeCronTradesReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeCronTradesReq, RmiName_TradeCronTradesReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeCronTradesReq;
        summary.rmiName = RmiName_TradeCronTradesReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeCronTradesReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeCronTradesReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeCronTradesReq;
        summary.rmiName = RmiName_TradeCronTradesReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeCronTimeToNextChangeBalanceReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TradeCronTimeToNextChangeBalanceReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeCronTimeToNextChangeBalanceReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeCronTimeToNextChangeBalanceReq, RmiName_TradeCronTimeToNextChangeBalanceReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeCronTimeToNextChangeBalanceReq;
        summary.rmiName = RmiName_TradeCronTimeToNextChangeBalanceReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeCronTimeToNextChangeBalanceReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeCronTimeToNextChangeBalanceReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeCronTimeToNextChangeBalanceReq;
        summary.rmiName = RmiName_TradeCronTimeToNextChangeBalanceReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeCronCancelReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TradeCronCancelReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeCronCancelReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeCronCancelReq, RmiName_TradeCronCancelReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeCronCancelReq;
        summary.rmiName = RmiName_TradeCronCancelReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeCronCancelReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeCronCancelReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeCronCancelReq;
        summary.rmiName = RmiName_TradeCronCancelReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeCronReclaimExpiredReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TradeCronReclaimExpiredReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeCronReclaimExpiredReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeCronReclaimExpiredReq, RmiName_TradeCronReclaimExpiredReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeCronReclaimExpiredReq;
        summary.rmiName = RmiName_TradeCronReclaimExpiredReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeCronReclaimExpiredReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeCronReclaimExpiredReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeCronReclaimExpiredReq;
        summary.rmiName = RmiName_TradeCronReclaimExpiredReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeCronRemainingCanceledPenaltyTimeReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TradeCronRemainingCanceledPenaltyTimeReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeCronRemainingCanceledPenaltyTimeReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeCronRemainingCanceledPenaltyTimeReq, RmiName_TradeCronRemainingCanceledPenaltyTimeReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeCronRemainingCanceledPenaltyTimeReq;
        summary.rmiName = RmiName_TradeCronRemainingCanceledPenaltyTimeReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeCronRemainingCanceledPenaltyTimeReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeCronRemainingCanceledPenaltyTimeReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeCronRemainingCanceledPenaltyTimeReq;
        summary.rmiName = RmiName_TradeCronRemainingCanceledPenaltyTimeReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeItemRegistReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TradeItemRegistReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeItemRegistReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeItemRegistReq, RmiName_TradeItemRegistReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeItemRegistReq;
        summary.rmiName = RmiName_TradeItemRegistReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeItemRegistReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeItemRegistReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeItemRegistReq;
        summary.rmiName = RmiName_TradeItemRegistReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeItemCancelReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TradeItemCancelReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeItemCancelReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeItemCancelReq, RmiName_TradeItemCancelReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeItemCancelReq;
        summary.rmiName = RmiName_TradeItemCancelReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeItemCancelReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeItemCancelReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeItemCancelReq;
        summary.rmiName = RmiName_TradeItemCancelReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeItemBuyReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TradeItemBuyReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeItemBuyReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeItemBuyReq, RmiName_TradeItemBuyReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeItemBuyReq;
        summary.rmiName = RmiName_TradeItemBuyReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeItemBuyReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeItemBuyReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeItemBuyReq;
        summary.rmiName = RmiName_TradeItemBuyReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeItemWithdrawReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TradeItemWithdrawReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeItemWithdrawReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeItemWithdrawReq, RmiName_TradeItemWithdrawReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeItemWithdrawReq;
        summary.rmiName = RmiName_TradeItemWithdrawReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeItemWithdrawReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeItemWithdrawReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeItemWithdrawReq;
        summary.rmiName = RmiName_TradeItemWithdrawReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeItemFinishReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TradeItemFinishReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeItemFinishReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeItemFinishReq, RmiName_TradeItemFinishReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeItemFinishReq;
        summary.rmiName = RmiName_TradeItemFinishReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeItemFinishReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeItemFinishReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeItemFinishReq;
        summary.rmiName = RmiName_TradeItemFinishReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeItemHistoryReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TradeItemHistoryReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeItemHistoryReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeItemHistoryReq, RmiName_TradeItemHistoryReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeItemHistoryReq;
        summary.rmiName = RmiName_TradeItemHistoryReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeItemHistoryReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeItemHistoryReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeItemHistoryReq;
        summary.rmiName = RmiName_TradeItemHistoryReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeItemSearchCategoryReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TradeItemSearchCategoryReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeItemSearchCategoryReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeItemSearchCategoryReq, RmiName_TradeItemSearchCategoryReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeItemSearchCategoryReq;
        summary.rmiName = RmiName_TradeItemSearchCategoryReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeItemSearchCategoryReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeItemSearchCategoryReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeItemSearchCategoryReq;
        summary.rmiName = RmiName_TradeItemSearchCategoryReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeItemSearchItemIndexReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TradeItemSearchItemIndexReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeItemSearchItemIndexReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeItemSearchItemIndexReq, RmiName_TradeItemSearchItemIndexReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeItemSearchItemIndexReq;
        summary.rmiName = RmiName_TradeItemSearchItemIndexReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeItemSearchItemIndexReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeItemSearchItemIndexReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeItemSearchItemIndexReq;
        summary.rmiName = RmiName_TradeItemSearchItemIndexReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeItemBookmarkAddReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TradeItemBookmarkAddReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeItemBookmarkAddReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeItemBookmarkAddReq, RmiName_TradeItemBookmarkAddReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeItemBookmarkAddReq;
        summary.rmiName = RmiName_TradeItemBookmarkAddReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeItemBookmarkAddReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeItemBookmarkAddReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeItemBookmarkAddReq;
        summary.rmiName = RmiName_TradeItemBookmarkAddReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_TradeItemBookmarkDeleteReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.TradeItemBookmarkDeleteReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_TradeItemBookmarkDeleteReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.TradeItemBookmarkDeleteReq, RmiName_TradeItemBookmarkDeleteReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.TradeItemBookmarkDeleteReq;
        summary.rmiName = RmiName_TradeItemBookmarkDeleteReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =TradeItemBookmarkDeleteReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_TradeItemBookmarkDeleteReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.TradeItemBookmarkDeleteReq;
        summary.rmiName = RmiName_TradeItemBookmarkDeleteReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_WeaponAppearanceCollectListV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.WeaponAppearanceCollectListV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_WeaponAppearanceCollectListV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.WeaponAppearanceCollectListV2Req, RmiName_WeaponAppearanceCollectListV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.WeaponAppearanceCollectListV2Req;
        summary.rmiName = RmiName_WeaponAppearanceCollectListV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =WeaponAppearanceCollectListV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_WeaponAppearanceCollectListV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.WeaponAppearanceCollectListV2Req;
        summary.rmiName = RmiName_WeaponAppearanceCollectListV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_WeaponAppearanceEquipV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.WeaponAppearanceEquipV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_WeaponAppearanceEquipV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.WeaponAppearanceEquipV2Req, RmiName_WeaponAppearanceEquipV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.WeaponAppearanceEquipV2Req;
        summary.rmiName = RmiName_WeaponAppearanceEquipV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =WeaponAppearanceEquipV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_WeaponAppearanceEquipV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.WeaponAppearanceEquipV2Req;
        summary.rmiName = RmiName_WeaponAppearanceEquipV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_WeaponAppearanceExtractFromItemV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.WeaponAppearanceExtractFromItemV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_WeaponAppearanceExtractFromItemV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.WeaponAppearanceExtractFromItemV2Req, RmiName_WeaponAppearanceExtractFromItemV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.WeaponAppearanceExtractFromItemV2Req;
        summary.rmiName = RmiName_WeaponAppearanceExtractFromItemV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =WeaponAppearanceExtractFromItemV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_WeaponAppearanceExtractFromItemV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.WeaponAppearanceExtractFromItemV2Req;
        summary.rmiName = RmiName_WeaponAppearanceExtractFromItemV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_WeaponAppearanceHiddenV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.WeaponAppearanceHiddenV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_WeaponAppearanceHiddenV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.WeaponAppearanceHiddenV2Req, RmiName_WeaponAppearanceHiddenV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.WeaponAppearanceHiddenV2Req;
        summary.rmiName = RmiName_WeaponAppearanceHiddenV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =WeaponAppearanceHiddenV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_WeaponAppearanceHiddenV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.WeaponAppearanceHiddenV2Req;
        summary.rmiName = RmiName_WeaponAppearanceHiddenV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_WeaponAppearanceListV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.WeaponAppearanceListV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_WeaponAppearanceListV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.WeaponAppearanceListV2Req, RmiName_WeaponAppearanceListV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.WeaponAppearanceListV2Req;
        summary.rmiName = RmiName_WeaponAppearanceListV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =WeaponAppearanceListV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_WeaponAppearanceListV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.WeaponAppearanceListV2Req;
        summary.rmiName = RmiName_WeaponAppearanceListV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_WeaponAppearanceUnequipV2Req(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.WeaponAppearanceUnequipV2Req packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_WeaponAppearanceUnequipV2Req);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.WeaponAppearanceUnequipV2Req, RmiName_WeaponAppearanceUnequipV2Req,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.WeaponAppearanceUnequipV2Req;
        summary.rmiName = RmiName_WeaponAppearanceUnequipV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =WeaponAppearanceUnequipV2Req (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_WeaponAppearanceUnequipV2Req);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.WeaponAppearanceUnequipV2Req;
        summary.rmiName = RmiName_WeaponAppearanceUnequipV2Req;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_AccountCreateNameReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.AccountCreateNameReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_AccountCreateNameReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.AccountCreateNameReq, RmiName_AccountCreateNameReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.AccountCreateNameReq;
        summary.rmiName = RmiName_AccountCreateNameReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =AccountCreateNameReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_AccountCreateNameReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.AccountCreateNameReq;
        summary.rmiName = RmiName_AccountCreateNameReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_ZoneStatusReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.ZoneStatusReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_ZoneStatusReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.ZoneStatusReq, RmiName_ZoneStatusReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.ZoneStatusReq;
        summary.rmiName = RmiName_ZoneStatusReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =ZoneStatusReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_ZoneStatusReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.ZoneStatusReq;
        summary.rmiName = RmiName_ZoneStatusReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BloodFogEnterReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.BloodFogEnterReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_BloodFogEnterReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.BloodFogEnterReq, RmiName_BloodFogEnterReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BloodFogEnterReq;
        summary.rmiName = RmiName_BloodFogEnterReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BloodFogEnterReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BloodFogEnterReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BloodFogEnterReq;
        summary.rmiName = RmiName_BloodFogEnterReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BloodFogLeaveReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.BloodFogLeaveReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_BloodFogLeaveReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.BloodFogLeaveReq, RmiName_BloodFogLeaveReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BloodFogLeaveReq;
        summary.rmiName = RmiName_BloodFogLeaveReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BloodFogLeaveReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BloodFogLeaveReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BloodFogLeaveReq;
        summary.rmiName = RmiName_BloodFogLeaveReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_BloodFogUseBuffReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.BloodFogUseBuffReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_BloodFogUseBuffReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.BloodFogUseBuffReq, RmiName_BloodFogUseBuffReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.BloodFogUseBuffReq;
        summary.rmiName = RmiName_BloodFogUseBuffReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =BloodFogUseBuffReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_BloodFogUseBuffReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.BloodFogUseBuffReq;
        summary.rmiName = RmiName_BloodFogUseBuffReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_C2SRttReq(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.C2SRttReq packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_C2SRttReq);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.C2SRttReq, RmiName_C2SRttReq,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.C2SRttReq;
        summary.rmiName = RmiName_C2SRttReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =C2SRttReq (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_C2SRttReq);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.C2SRttReq;
        summary.rmiName = RmiName_C2SRttReq;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
    void ProcessReceivedMessage_C2SRttRes(Nettention.Proud.Message __msg, Nettention.Proud.ReceivedMessage pa, Object hostTag, Nettention.Proud.HostID remote)
    {
        Nettention.Proud.RmiContext ctx = new Nettention.Proud.RmiContext();
        ctx.sentFrom=pa.RemoteHostID;
        ctx.relayed=pa.IsRelayed;
        ctx.hostTag=hostTag;
        ctx.encryptMode = pa.EncryptMode;
        ctx.compressMode = pa.CompressMode;

        C2G.C2SRttRes packet; NetMarshaler.Read(__msg,out packet);	
core.PostCheckReadMessage(__msg, RmiName_C2SRttRes);
        if(enableNotifyCallFromStub==true)
        {
        string parameterString = "";
        parameterString+=packet.ToString()+",";
        NotifyCallFromStub(Common.C2SRttRes, RmiName_C2SRttRes,parameterString);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.BeforeRmiSummary summary = new Nettention.Proud.BeforeRmiSummary();
        summary.rmiID = Common.C2SRttRes;
        summary.rmiName = RmiName_C2SRttRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        BeforeRmiInvocation(summary);
        }

        long t0 = Nettention.Proud.PreciseCurrentTime.GetTimeMs();

        // Call this method.
        bool __ret =C2SRttRes (remote,ctx , packet );

        if(__ret==false)
        {
        // Error: RMI function that a user did not create has been called. 
        core.ShowNotImplementedRmiWarning(RmiName_C2SRttRes);
        }

        if(enableStubProfiling)
        {
        Nettention.Proud.AfterRmiSummary summary = new Nettention.Proud.AfterRmiSummary();
        summary.rmiID = Common.C2SRttRes;
        summary.rmiName = RmiName_C2SRttRes;
        summary.hostID = remote;
        summary.hostTag = hostTag;
        summary.elapsedTime = Nettention.Proud.PreciseCurrentTime.GetTimeMs()-t0;
        AfterRmiInvocation(summary);
        }
    }
		#if USE_RMI_NAME_STRING
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_PlayerSelectReq="PlayerSelectReq";
public const string RmiName_PlayerEnterStageFirstReq="PlayerEnterStageFirstReq";
public const string RmiName_PlayerEnterStageSecondReq="PlayerEnterStageSecondReq";
public const string RmiName_PlayerEnterStageThirdReq="PlayerEnterStageThirdReq";
public const string RmiName_PlayerEnterStageFourthReq="PlayerEnterStageFourthReq";
public const string RmiName_PlayerEnterStageFifthReq="PlayerEnterStageFifthReq";
public const string RmiName_PlayerGameEnterReq="PlayerGameEnterReq";
public const string RmiName_AuthenticateBotCredentialReq="AuthenticateBotCredentialReq";
public const string RmiName_DesignateBindStoneReq="DesignateBindStoneReq";
public const string RmiName_PortalByBindStoneReq="PortalByBindStoneReq";
public const string RmiName_PlayerBlackRosterGetPreferenceReq="PlayerBlackRosterGetPreferenceReq";
public const string RmiName_PlayerBlackRosterObservingReq="PlayerBlackRosterObservingReq";
public const string RmiName_PlayerBlackRosterProvocationReq="PlayerBlackRosterProvocationReq";
public const string RmiName_PlayerBlackRosterRankReq="PlayerBlackRosterRankReq";
public const string RmiName_PlayerBlackRosterRevengeReq="PlayerBlackRosterRevengeReq";
public const string RmiName_PlayerBlackRosterSetPreferenceReq="PlayerBlackRosterSetPreferenceReq";
public const string RmiName_PlayerBlackRostersReq="PlayerBlackRostersReq";
public const string RmiName_PlayerBlackRosterLastWeekRankReq="PlayerBlackRosterLastWeekRankReq";
public const string RmiName_CheatMessageV2Req="CheatMessageV2Req";
public const string RmiName_AccountBlockPlayerAddReq="AccountBlockPlayerAddReq";
public const string RmiName_AccountBlockPlayerDeleteReq="AccountBlockPlayerDeleteReq";
public const string RmiName_AccountBlockPlayerReasonEditReq="AccountBlockPlayerReasonEditReq";
public const string RmiName_AccountBlockPlayersReq="AccountBlockPlayersReq";
public const string RmiName_ChatMessageV2Req="ChatMessageV2Req";
public const string RmiName_PlayerSearchV2Req="PlayerSearchV2Req";
public const string RmiName_LinkItemInfoReq="LinkItemInfoReq";
public const string RmiName_CostumeCardBuildReq="CostumeCardBuildReq";
public const string RmiName_CostumeCardGachaReq="CostumeCardGachaReq";
public const string RmiName_CostumeCardInfoReq="CostumeCardInfoReq";
public const string RmiName_CostumeCardMixReq="CostumeCardMixReq";
public const string RmiName_CostumeCollectReq="CostumeCollectReq";
public const string RmiName_CostumeEquipBodyReq="CostumeEquipBodyReq";
public const string RmiName_CostumeEquipBodyShowReq="CostumeEquipBodyShowReq";
public const string RmiName_CostumeEquipHeadReq="CostumeEquipHeadReq";
public const string RmiName_CostumeEquipHeadShowReq="CostumeEquipHeadShowReq";
public const string RmiName_CostumeInfoReq="CostumeInfoReq";
public const string RmiName_CostumeConfirmAcceptReq="CostumeConfirmAcceptReq";
public const string RmiName_CostumeConfirmChangeReq="CostumeConfirmChangeReq";
public const string RmiName_CostumeConfirmInfoReq="CostumeConfirmInfoReq";
public const string RmiName_PortalEffectReq="PortalEffectReq";
public const string RmiName_AttainmentDailyRewardV2Req="AttainmentDailyRewardV2Req";
public const string RmiName_AttainmentNormalRewardV2Req="AttainmentNormalRewardV2Req";
public const string RmiName_AttendanceRewardV2Req="AttendanceRewardV2Req";
public const string RmiName_BossScheduleReq="BossScheduleReq";
public const string RmiName_EventExchangeRewardV2Req="EventExchangeRewardV2Req";
public const string RmiName_GuildAdminBuffActiveReq="GuildAdminBuffActiveReq";
public const string RmiName_GuildAdminBuffBuyReq="GuildAdminBuffBuyReq";
public const string RmiName_GuildAdminInfoReq="GuildAdminInfoReq";
public const string RmiName_GuildAdminLevelUpReq="GuildAdminLevelUpReq";
public const string RmiName_GuildAdminMasterChangeReq="GuildAdminMasterChangeReq";
public const string RmiName_GuildAdminMemberBanishReq="GuildAdminMemberBanishReq";
public const string RmiName_GuildAdminMemberUpdateReq="GuildAdminMemberUpdateReq";
public const string RmiName_GuildAdminUpdateBaseReq="GuildAdminUpdateBaseReq";
public const string RmiName_GuildAdminUpdateIntroReq="GuildAdminUpdateIntroReq";
public const string RmiName_GuildAdminUpdateNoticeReq="GuildAdminUpdateNoticeReq";
public const string RmiName_GuildAdminUpdateTendencyReq="GuildAdminUpdateTendencyReq";
public const string RmiName_GuildAdminUpdateTypeReq="GuildAdminUpdateTypeReq";
public const string RmiName_GuildAttendReq="GuildAttendReq";
public const string RmiName_GuildBuffInfoReq="GuildBuffInfoReq";
public const string RmiName_GuildCreateReq="GuildCreateReq";
public const string RmiName_GuildDeleteReq="GuildDeleteReq";
public const string RmiName_GuildDonateReq="GuildDonateReq";
public const string RmiName_GuildDonationByCronV2Req="GuildDonationByCronV2Req";
public const string RmiName_GuildFindReq="GuildFindReq";
public const string RmiName_GuildHistroyReq="GuildHistroyReq";
public const string RmiName_GuildInfoCallReq="GuildInfoCallReq";
public const string RmiName_GuildInfoReq="GuildInfoReq";
public const string RmiName_GuildJoinRequestConfirmReq="GuildJoinRequestConfirmReq";
public const string RmiName_GuildJoinRequestListReq="GuildJoinRequestListReq";
public const string RmiName_GuildLeaveReq="GuildLeaveReq";
public const string RmiName_GuildLiveInviteConfirmReq="GuildLiveInviteConfirmReq";
public const string RmiName_GuildLiveInviteReq="GuildLiveInviteReq";
public const string RmiName_GuildMemberInfoReq="GuildMemberInfoReq";
public const string RmiName_GuildSignRequestCancelReq="GuildSignRequestCancelReq";
public const string RmiName_GuildSignRequestListReq="GuildSignRequestListReq";
public const string RmiName_GuildSignRequestReq="GuildSignRequestReq";
public const string RmiName_GuildVoteInfoReq="GuildVoteInfoReq";
public const string RmiName_GuildVoteMasterImpeachReq="GuildVoteMasterImpeachReq";
public const string RmiName_GuildVoteReq="GuildVoteReq";
public const string RmiName_GuildWaitingMemberListV2Req="GuildWaitingMemberListV2Req";
public const string RmiName_GuildWarehouseChangeSizeV2Req="GuildWarehouseChangeSizeV2Req";
public const string RmiName_GuildWarehouseInfoV2Req="GuildWarehouseInfoV2Req";
public const string RmiName_GuildWarehouseItemMoveV2Req="GuildWarehouseItemMoveV2Req";
public const string RmiName_GuildWarehouseWalletMoveV2Req="GuildWarehouseWalletMoveV2Req";
public const string RmiName_GuildTerritoryInfoReq="GuildTerritoryInfoReq";
public const string RmiName_GuildTerritorySetReq="GuildTerritorySetReq";
public const string RmiName_WorldTerritoryOverviewReq="WorldTerritoryOverviewReq";
public const string RmiName_DungeonEnterV2Req="DungeonEnterV2Req";
public const string RmiName_DungeonGiveUpV2Req="DungeonGiveUpV2Req";
public const string RmiName_DungeonLeaveV2Req="DungeonLeaveV2Req";
public const string RmiName_DungeonLoadingCompleteV2Req="DungeonLoadingCompleteV2Req";
public const string RmiName_InteractStartReq="InteractStartReq";
public const string RmiName_InteractEndReq="InteractEndReq";
public const string RmiName_InteractCancelReq="InteractCancelReq";
public const string RmiName_EquipmentVisibleV2Req="EquipmentVisibleV2Req";
public const string RmiName_InventoryChangeSizeV2Req="InventoryChangeSizeV2Req";
public const string RmiName_ItemAddOptionV2Req="ItemAddOptionV2Req";
public const string RmiName_ItemChangeOptionV2Req="ItemChangeOptionV2Req";
public const string RmiName_ItemCollectionBookmarksRegisterV2Req="ItemCollectionBookmarksRegisterV2Req";
public const string RmiName_ItemCollectionBookmarksUnregisterV2Req="ItemCollectionBookmarksUnregisterV2Req";
public const string RmiName_ItemCollectionRegisterV2Req="ItemCollectionRegisterV2Req";
public const string RmiName_ItemCombineV2Req="ItemCombineV2Req";
public const string RmiName_ItemDeleteV2Req="ItemDeleteV2Req";
public const string RmiName_ItemDisassembleV2Req="ItemDisassembleV2Req";
public const string RmiName_ItemEnchantV2Req="ItemEnchantV2Req";
public const string RmiName_ItemEquipV2Req="ItemEquipV2Req";
public const string RmiName_ItemIntensionV2Req="ItemIntensionV2Req";
public const string RmiName_ItemMixOptionV2Req="ItemMixOptionV2Req";
public const string RmiName_ItemPackageUseV2Req="ItemPackageUseV2Req";
public const string RmiName_ItemProductionV2Req="ItemProductionV2Req";
public const string RmiName_ItemSelectUseV2Req="ItemSelectUseV2Req";
public const string RmiName_ItemUpgradeV2Req="ItemUpgradeV2Req";
public const string RmiName_ItemUseV2Req="ItemUseV2Req";
public const string RmiName_PkLootingItemV2Req="PkLootingItemV2Req";
public const string RmiName_PkLootingListV2Req="PkLootingListV2Req";
public const string RmiName_WarehouseChangeSizeV2Req="WarehouseChangeSizeV2Req";
public const string RmiName_WarehouseInfoV2Req="WarehouseInfoV2Req";
public const string RmiName_WarehouseItemMoveV2Req="WarehouseItemMoveV2Req";
public const string RmiName_ItemSetLockReq="ItemSetLockReq";
public const string RmiName_ItemMarketPriceReq="ItemMarketPriceReq";
public const string RmiName_ItemInheritReq="ItemInheritReq";
public const string RmiName_MailListV2Req="MailListV2Req";
public const string RmiName_MailReadAllV2Req="MailReadAllV2Req";
public const string RmiName_MailReadV2Req="MailReadV2Req";
public const string RmiName_MatchingApplyReq="MatchingApplyReq";
public const string RmiName_MatchingCancelReq="MatchingCancelReq";
public const string RmiName_MatchingReplyReq="MatchingReplyReq";
public const string RmiName_AuthenticatePlayerCredentialReq="AuthenticatePlayerCredentialReq";
public const string RmiName_BroadCastContextReq="BroadCastContextReq";
public const string RmiName_CutSceneEndV2Req="CutSceneEndV2Req";
public const string RmiName_CutSceneStartV2Req="CutSceneStartV2Req";
public const string RmiName_LogOutReq="LogOutReq";
public const string RmiName_PortalV2Req="PortalV2Req";
public const string RmiName_ReturnToLobbyReq="ReturnToLobbyReq";
public const string RmiName_ServerTimeV2Req="ServerTimeV2Req";
public const string RmiName_TestPacketV2Req="TestPacketV2Req";
public const string RmiName_TriggerActivateV2Req="TriggerActivateV2Req";
public const string RmiName_UnionV2Req="UnionV2Req";
public const string RmiName_ZoneLoadingCompletedReq="ZoneLoadingCompletedReq";
public const string RmiName_BossDamagedInfoReq="BossDamagedInfoReq";
public const string RmiName_PartyChangeLootingReq="PartyChangeLootingReq";
public const string RmiName_PartyCreateReq="PartyCreateReq";
public const string RmiName_PartyDisbandReq="PartyDisbandReq";
public const string RmiName_PartyDungeonEntranceInquiryReq="PartyDungeonEntranceInquiryReq";
public const string RmiName_PartyEnterDungeonReplyReq="PartyEnterDungeonReplyReq";
public const string RmiName_PartyEnterDungeonReq="PartyEnterDungeonReq";
public const string RmiName_PartyInfoReq="PartyInfoReq";
public const string RmiName_PartyInviteReplyReq="PartyInviteReplyReq";
public const string RmiName_PartyInviteReq="PartyInviteReq";
public const string RmiName_PartyLeaderChangeReq="PartyLeaderChangeReq";
public const string RmiName_PartyLeaveReq="PartyLeaveReq";
public const string RmiName_PartyMemberKickReq="PartyMemberKickReq";
public const string RmiName_PartySuggestionPlayersReq="PartySuggestionPlayersReq";
public const string RmiName_PartyEnterDungeonCanceledReq="PartyEnterDungeonCanceledReq";
public const string RmiName_PetCollectInfoV2Req="PetCollectInfoV2Req";
public const string RmiName_PetEquipOffV2Req="PetEquipOffV2Req";
public const string RmiName_PetEquipV2Req="PetEquipV2Req";
public const string RmiName_PetFeedUseV2Req="PetFeedUseV2Req";
public const string RmiName_PetGachaV2Req="PetGachaV2Req";
public const string RmiName_PetInfoV2Req="PetInfoV2Req";
public const string RmiName_PetMixV2Req="PetMixV2Req";
public const string RmiName_PetUpgradeV2Req="PetUpgradeV2Req";
public const string RmiName_PetInActiveBuffReq="PetInActiveBuffReq";
public const string RmiName_PhaseFieldEndV2Req="PhaseFieldEndV2Req";
public const string RmiName_PhaseFieldStartV2Req="PhaseFieldStartV2Req";
public const string RmiName_PlayerDeleteReq="PlayerDeleteReq";
public const string RmiName_PlayerGetMacroReq="PlayerGetMacroReq";
public const string RmiName_PlayerMapMoveV2Req="PlayerMapMoveV2Req";
public const string RmiName_PlayerMoveV2Req="PlayerMoveV2Req";
public const string RmiName_PlayerMoveZoneV2Req="PlayerMoveZoneV2Req";
public const string RmiName_PlayerResurrectionV2Req="PlayerResurrectionV2Req";
public const string RmiName_PlayerSetMacroReq="PlayerSetMacroReq";
public const string RmiName_PlayerSlotChangeV2Req="PlayerSlotChangeV2Req";
public const string RmiName_PlayerStatPointChangeV2Req="PlayerStatPointChangeV2Req";
public const string RmiName_PlayerStatPointInitV2Req="PlayerStatPointInitV2Req";
public const string RmiName_PlayerStatV2Req="PlayerStatV2Req";
public const string RmiName_PlayerDeathInfoReq="PlayerDeathInfoReq";
public const string RmiName_RecoverPlayerExpReq="RecoverPlayerExpReq";
public const string RmiName_PlayerClassUpV2Req="PlayerClassUpV2Req";
public const string RmiName_QuickslotSetReq="QuickslotSetReq";
public const string RmiName_PlayerExpRecoveryPopupReq="PlayerExpRecoveryPopupReq";
public const string RmiName_RTTPlayerMoveV2Req="RTTPlayerMoveV2Req";
public const string RmiName_QuestAbandonV2Req="QuestAbandonV2Req";
public const string RmiName_QuestAcceptV2Req="QuestAcceptV2Req";
public const string RmiName_QuestCompleteV2Req="QuestCompleteV2Req";
public const string RmiName_QuestConditionCompleteV2Req="QuestConditionCompleteV2Req";
public const string RmiName_QuestListV2Req="QuestListV2Req";
public const string RmiName_QuestPortalV2Req="QuestPortalV2Req";
public const string RmiName_QuestRegisterV2Req="QuestRegisterV2Req";
public const string RmiName_QuestRerollV2Req="QuestRerollV2Req";
public const string RmiName_QuestRewardV2Req="QuestRewardV2Req";
public const string RmiName_QuestTalkCompleteV2Req="QuestTalkCompleteV2Req";
public const string RmiName_TutorialSkipV2Req="TutorialSkipV2Req";
public const string RmiName_GuildRelationReq="GuildRelationReq";
public const string RmiName_PlayerRelationReq="PlayerRelationReq";
public const string RmiName_RideAttachDeleteV2Req="RideAttachDeleteV2Req";
public const string RmiName_RideAttachDisassembleV2Req="RideAttachDisassembleV2Req";
public const string RmiName_RideAttachEquipOffV2Req="RideAttachEquipOffV2Req";
public const string RmiName_RideAttachEquipV2Req="RideAttachEquipV2Req";
public const string RmiName_RideAttachGachaV2Req="RideAttachGachaV2Req";
public const string RmiName_RideAttachInvenExtendV2Req="RideAttachInvenExtendV2Req";
public const string RmiName_RideEquipOffV2Req="RideEquipOffV2Req";
public const string RmiName_RideEquipV2Req="RideEquipV2Req";
public const string RmiName_RideGachaV2Req="RideGachaV2Req";
public const string RmiName_RideMixV2Req="RideMixV2Req";
public const string RmiName_RideSitOffV2Req="RideSitOffV2Req";
public const string RmiName_RideSitV2Req="RideSitV2Req";
public const string RmiName_BuyCashShopItemV2Req="BuyCashShopItemV2Req";
public const string RmiName_BuyGameShopItemV2Req="BuyGameShopItemV2Req";
public const string RmiName_GameShopSellItemV2Req="GameShopSellItemV2Req";
public const string RmiName_ChangeSiegeModeV2Req="ChangeSiegeModeV2Req";
public const string RmiName_ChoiceSiegeWarFactionV2Req="ChoiceSiegeWarFactionV2Req";
public const string RmiName_GetSiegeWarInfoV2Req="GetSiegeWarInfoV2Req";
public const string RmiName_GetSiegeWarMatchInfoV2Req="GetSiegeWarMatchInfoV2Req";
public const string RmiName_BuffListInfoV2Req="BuffListInfoV2Req";
public const string RmiName_SkillChangeAutoUseV2Req="SkillChangeAutoUseV2Req";
public const string RmiName_SkillChangePresetV2Req="SkillChangePresetV2Req";
public const string RmiName_SkillEquipV2Req="SkillEquipV2Req";
public const string RmiName_SkillHitV2Req="SkillHitV2Req";
public const string RmiName_SkillLearnV2Req="SkillLearnV2Req";
public const string RmiName_SkillLevelUpV2Req="SkillLevelUpV2Req";
public const string RmiName_SkillListInfoV2Req="SkillListInfoV2Req";
public const string RmiName_SkillUnEquipV2Req="SkillUnEquipV2Req";
public const string RmiName_SkillUpgradeV2Req="SkillUpgradeV2Req";
public const string RmiName_SkillUseV2Req="SkillUseV2Req";
public const string RmiName_RTTSkillUseV2Req="RTTSkillUseV2Req";
public const string RmiName_RTTSkillHitV2Req="RTTSkillHitV2Req";
public const string RmiName_PlayerTitleChangeV2Req="PlayerTitleChangeV2Req";
public const string RmiName_TitleChangeV2Req="TitleChangeV2Req";
public const string RmiName_TitleListV2Req="TitleListV2Req";
public const string RmiName_TradeCronAverageBalanceReq="TradeCronAverageBalanceReq";
public const string RmiName_TradeCronBalanceReq="TradeCronBalanceReq";
public const string RmiName_TradeCronBuyReq="TradeCronBuyReq";
public const string RmiName_TradeCronInfoReq="TradeCronInfoReq";
public const string RmiName_TradeCronListReq="TradeCronListReq";
public const string RmiName_TradeCronPreviousDayBalanceReq="TradeCronPreviousDayBalanceReq";
public const string RmiName_TradeCronSellReq="TradeCronSellReq";
public const string RmiName_TradeCronWeeklyBalanceReq="TradeCronWeeklyBalanceReq";
public const string RmiName_TradePersonalRequestReq="TradePersonalRequestReq";
public const string RmiName_TradePersonalAcceptReq="TradePersonalAcceptReq";
public const string RmiName_TradePersonalRefuseReq="TradePersonalRefuseReq";
public const string RmiName_TradePersonalCancelReq="TradePersonalCancelReq";
public const string RmiName_TradePersonalWithdrawReq="TradePersonalWithdrawReq";
public const string RmiName_TradePersonalFinishReq="TradePersonalFinishReq";
public const string RmiName_TradePersonalHistoryReq="TradePersonalHistoryReq";
public const string RmiName_TradeCronMyListReq="TradeCronMyListReq";
public const string RmiName_TradeCronSettleReq="TradeCronSettleReq";
public const string RmiName_TradeCronTradesReq="TradeCronTradesReq";
public const string RmiName_TradeCronTimeToNextChangeBalanceReq="TradeCronTimeToNextChangeBalanceReq";
public const string RmiName_TradeCronCancelReq="TradeCronCancelReq";
public const string RmiName_TradeCronReclaimExpiredReq="TradeCronReclaimExpiredReq";
public const string RmiName_TradeCronRemainingCanceledPenaltyTimeReq="TradeCronRemainingCanceledPenaltyTimeReq";
public const string RmiName_TradeItemRegistReq="TradeItemRegistReq";
public const string RmiName_TradeItemCancelReq="TradeItemCancelReq";
public const string RmiName_TradeItemBuyReq="TradeItemBuyReq";
public const string RmiName_TradeItemWithdrawReq="TradeItemWithdrawReq";
public const string RmiName_TradeItemFinishReq="TradeItemFinishReq";
public const string RmiName_TradeItemHistoryReq="TradeItemHistoryReq";
public const string RmiName_TradeItemSearchCategoryReq="TradeItemSearchCategoryReq";
public const string RmiName_TradeItemSearchItemIndexReq="TradeItemSearchItemIndexReq";
public const string RmiName_TradeItemBookmarkAddReq="TradeItemBookmarkAddReq";
public const string RmiName_TradeItemBookmarkDeleteReq="TradeItemBookmarkDeleteReq";
public const string RmiName_WeaponAppearanceCollectListV2Req="WeaponAppearanceCollectListV2Req";
public const string RmiName_WeaponAppearanceEquipV2Req="WeaponAppearanceEquipV2Req";
public const string RmiName_WeaponAppearanceExtractFromItemV2Req="WeaponAppearanceExtractFromItemV2Req";
public const string RmiName_WeaponAppearanceHiddenV2Req="WeaponAppearanceHiddenV2Req";
public const string RmiName_WeaponAppearanceListV2Req="WeaponAppearanceListV2Req";
public const string RmiName_WeaponAppearanceUnequipV2Req="WeaponAppearanceUnequipV2Req";
public const string RmiName_AccountCreateNameReq="AccountCreateNameReq";
public const string RmiName_ZoneStatusReq="ZoneStatusReq";
public const string RmiName_BloodFogEnterReq="BloodFogEnterReq";
public const string RmiName_BloodFogLeaveReq="BloodFogLeaveReq";
public const string RmiName_BloodFogUseBuffReq="BloodFogUseBuffReq";
public const string RmiName_C2SRttReq="C2SRttReq";
public const string RmiName_C2SRttRes="C2SRttRes";
       
public const string RmiName_First = RmiName_PlayerSelectReq;
		#else
// RMI name declaration.
// It is the unique pointer that indicates RMI name such as RMI profiler.
public const string RmiName_PlayerSelectReq="";
public const string RmiName_PlayerEnterStageFirstReq="";
public const string RmiName_PlayerEnterStageSecondReq="";
public const string RmiName_PlayerEnterStageThirdReq="";
public const string RmiName_PlayerEnterStageFourthReq="";
public const string RmiName_PlayerEnterStageFifthReq="";
public const string RmiName_PlayerGameEnterReq="";
public const string RmiName_AuthenticateBotCredentialReq="";
public const string RmiName_DesignateBindStoneReq="";
public const string RmiName_PortalByBindStoneReq="";
public const string RmiName_PlayerBlackRosterGetPreferenceReq="";
public const string RmiName_PlayerBlackRosterObservingReq="";
public const string RmiName_PlayerBlackRosterProvocationReq="";
public const string RmiName_PlayerBlackRosterRankReq="";
public const string RmiName_PlayerBlackRosterRevengeReq="";
public const string RmiName_PlayerBlackRosterSetPreferenceReq="";
public const string RmiName_PlayerBlackRostersReq="";
public const string RmiName_PlayerBlackRosterLastWeekRankReq="";
public const string RmiName_CheatMessageV2Req="";
public const string RmiName_AccountBlockPlayerAddReq="";
public const string RmiName_AccountBlockPlayerDeleteReq="";
public const string RmiName_AccountBlockPlayerReasonEditReq="";
public const string RmiName_AccountBlockPlayersReq="";
public const string RmiName_ChatMessageV2Req="";
public const string RmiName_PlayerSearchV2Req="";
public const string RmiName_LinkItemInfoReq="";
public const string RmiName_CostumeCardBuildReq="";
public const string RmiName_CostumeCardGachaReq="";
public const string RmiName_CostumeCardInfoReq="";
public const string RmiName_CostumeCardMixReq="";
public const string RmiName_CostumeCollectReq="";
public const string RmiName_CostumeEquipBodyReq="";
public const string RmiName_CostumeEquipBodyShowReq="";
public const string RmiName_CostumeEquipHeadReq="";
public const string RmiName_CostumeEquipHeadShowReq="";
public const string RmiName_CostumeInfoReq="";
public const string RmiName_CostumeConfirmAcceptReq="";
public const string RmiName_CostumeConfirmChangeReq="";
public const string RmiName_CostumeConfirmInfoReq="";
public const string RmiName_PortalEffectReq="";
public const string RmiName_AttainmentDailyRewardV2Req="";
public const string RmiName_AttainmentNormalRewardV2Req="";
public const string RmiName_AttendanceRewardV2Req="";
public const string RmiName_BossScheduleReq="";
public const string RmiName_EventExchangeRewardV2Req="";
public const string RmiName_GuildAdminBuffActiveReq="";
public const string RmiName_GuildAdminBuffBuyReq="";
public const string RmiName_GuildAdminInfoReq="";
public const string RmiName_GuildAdminLevelUpReq="";
public const string RmiName_GuildAdminMasterChangeReq="";
public const string RmiName_GuildAdminMemberBanishReq="";
public const string RmiName_GuildAdminMemberUpdateReq="";
public const string RmiName_GuildAdminUpdateBaseReq="";
public const string RmiName_GuildAdminUpdateIntroReq="";
public const string RmiName_GuildAdminUpdateNoticeReq="";
public const string RmiName_GuildAdminUpdateTendencyReq="";
public const string RmiName_GuildAdminUpdateTypeReq="";
public const string RmiName_GuildAttendReq="";
public const string RmiName_GuildBuffInfoReq="";
public const string RmiName_GuildCreateReq="";
public const string RmiName_GuildDeleteReq="";
public const string RmiName_GuildDonateReq="";
public const string RmiName_GuildDonationByCronV2Req="";
public const string RmiName_GuildFindReq="";
public const string RmiName_GuildHistroyReq="";
public const string RmiName_GuildInfoCallReq="";
public const string RmiName_GuildInfoReq="";
public const string RmiName_GuildJoinRequestConfirmReq="";
public const string RmiName_GuildJoinRequestListReq="";
public const string RmiName_GuildLeaveReq="";
public const string RmiName_GuildLiveInviteConfirmReq="";
public const string RmiName_GuildLiveInviteReq="";
public const string RmiName_GuildMemberInfoReq="";
public const string RmiName_GuildSignRequestCancelReq="";
public const string RmiName_GuildSignRequestListReq="";
public const string RmiName_GuildSignRequestReq="";
public const string RmiName_GuildVoteInfoReq="";
public const string RmiName_GuildVoteMasterImpeachReq="";
public const string RmiName_GuildVoteReq="";
public const string RmiName_GuildWaitingMemberListV2Req="";
public const string RmiName_GuildWarehouseChangeSizeV2Req="";
public const string RmiName_GuildWarehouseInfoV2Req="";
public const string RmiName_GuildWarehouseItemMoveV2Req="";
public const string RmiName_GuildWarehouseWalletMoveV2Req="";
public const string RmiName_GuildTerritoryInfoReq="";
public const string RmiName_GuildTerritorySetReq="";
public const string RmiName_WorldTerritoryOverviewReq="";
public const string RmiName_DungeonEnterV2Req="";
public const string RmiName_DungeonGiveUpV2Req="";
public const string RmiName_DungeonLeaveV2Req="";
public const string RmiName_DungeonLoadingCompleteV2Req="";
public const string RmiName_InteractStartReq="";
public const string RmiName_InteractEndReq="";
public const string RmiName_InteractCancelReq="";
public const string RmiName_EquipmentVisibleV2Req="";
public const string RmiName_InventoryChangeSizeV2Req="";
public const string RmiName_ItemAddOptionV2Req="";
public const string RmiName_ItemChangeOptionV2Req="";
public const string RmiName_ItemCollectionBookmarksRegisterV2Req="";
public const string RmiName_ItemCollectionBookmarksUnregisterV2Req="";
public const string RmiName_ItemCollectionRegisterV2Req="";
public const string RmiName_ItemCombineV2Req="";
public const string RmiName_ItemDeleteV2Req="";
public const string RmiName_ItemDisassembleV2Req="";
public const string RmiName_ItemEnchantV2Req="";
public const string RmiName_ItemEquipV2Req="";
public const string RmiName_ItemIntensionV2Req="";
public const string RmiName_ItemMixOptionV2Req="";
public const string RmiName_ItemPackageUseV2Req="";
public const string RmiName_ItemProductionV2Req="";
public const string RmiName_ItemSelectUseV2Req="";
public const string RmiName_ItemUpgradeV2Req="";
public const string RmiName_ItemUseV2Req="";
public const string RmiName_PkLootingItemV2Req="";
public const string RmiName_PkLootingListV2Req="";
public const string RmiName_WarehouseChangeSizeV2Req="";
public const string RmiName_WarehouseInfoV2Req="";
public const string RmiName_WarehouseItemMoveV2Req="";
public const string RmiName_ItemSetLockReq="";
public const string RmiName_ItemMarketPriceReq="";
public const string RmiName_ItemInheritReq="";
public const string RmiName_MailListV2Req="";
public const string RmiName_MailReadAllV2Req="";
public const string RmiName_MailReadV2Req="";
public const string RmiName_MatchingApplyReq="";
public const string RmiName_MatchingCancelReq="";
public const string RmiName_MatchingReplyReq="";
public const string RmiName_AuthenticatePlayerCredentialReq="";
public const string RmiName_BroadCastContextReq="";
public const string RmiName_CutSceneEndV2Req="";
public const string RmiName_CutSceneStartV2Req="";
public const string RmiName_LogOutReq="";
public const string RmiName_PortalV2Req="";
public const string RmiName_ReturnToLobbyReq="";
public const string RmiName_ServerTimeV2Req="";
public const string RmiName_TestPacketV2Req="";
public const string RmiName_TriggerActivateV2Req="";
public const string RmiName_UnionV2Req="";
public const string RmiName_ZoneLoadingCompletedReq="";
public const string RmiName_BossDamagedInfoReq="";
public const string RmiName_PartyChangeLootingReq="";
public const string RmiName_PartyCreateReq="";
public const string RmiName_PartyDisbandReq="";
public const string RmiName_PartyDungeonEntranceInquiryReq="";
public const string RmiName_PartyEnterDungeonReplyReq="";
public const string RmiName_PartyEnterDungeonReq="";
public const string RmiName_PartyInfoReq="";
public const string RmiName_PartyInviteReplyReq="";
public const string RmiName_PartyInviteReq="";
public const string RmiName_PartyLeaderChangeReq="";
public const string RmiName_PartyLeaveReq="";
public const string RmiName_PartyMemberKickReq="";
public const string RmiName_PartySuggestionPlayersReq="";
public const string RmiName_PartyEnterDungeonCanceledReq="";
public const string RmiName_PetCollectInfoV2Req="";
public const string RmiName_PetEquipOffV2Req="";
public const string RmiName_PetEquipV2Req="";
public const string RmiName_PetFeedUseV2Req="";
public const string RmiName_PetGachaV2Req="";
public const string RmiName_PetInfoV2Req="";
public const string RmiName_PetMixV2Req="";
public const string RmiName_PetUpgradeV2Req="";
public const string RmiName_PetInActiveBuffReq="";
public const string RmiName_PhaseFieldEndV2Req="";
public const string RmiName_PhaseFieldStartV2Req="";
public const string RmiName_PlayerDeleteReq="";
public const string RmiName_PlayerGetMacroReq="";
public const string RmiName_PlayerMapMoveV2Req="";
public const string RmiName_PlayerMoveV2Req="";
public const string RmiName_PlayerMoveZoneV2Req="";
public const string RmiName_PlayerResurrectionV2Req="";
public const string RmiName_PlayerSetMacroReq="";
public const string RmiName_PlayerSlotChangeV2Req="";
public const string RmiName_PlayerStatPointChangeV2Req="";
public const string RmiName_PlayerStatPointInitV2Req="";
public const string RmiName_PlayerStatV2Req="";
public const string RmiName_PlayerDeathInfoReq="";
public const string RmiName_RecoverPlayerExpReq="";
public const string RmiName_PlayerClassUpV2Req="";
public const string RmiName_QuickslotSetReq="";
public const string RmiName_PlayerExpRecoveryPopupReq="";
public const string RmiName_RTTPlayerMoveV2Req="";
public const string RmiName_QuestAbandonV2Req="";
public const string RmiName_QuestAcceptV2Req="";
public const string RmiName_QuestCompleteV2Req="";
public const string RmiName_QuestConditionCompleteV2Req="";
public const string RmiName_QuestListV2Req="";
public const string RmiName_QuestPortalV2Req="";
public const string RmiName_QuestRegisterV2Req="";
public const string RmiName_QuestRerollV2Req="";
public const string RmiName_QuestRewardV2Req="";
public const string RmiName_QuestTalkCompleteV2Req="";
public const string RmiName_TutorialSkipV2Req="";
public const string RmiName_GuildRelationReq="";
public const string RmiName_PlayerRelationReq="";
public const string RmiName_RideAttachDeleteV2Req="";
public const string RmiName_RideAttachDisassembleV2Req="";
public const string RmiName_RideAttachEquipOffV2Req="";
public const string RmiName_RideAttachEquipV2Req="";
public const string RmiName_RideAttachGachaV2Req="";
public const string RmiName_RideAttachInvenExtendV2Req="";
public const string RmiName_RideEquipOffV2Req="";
public const string RmiName_RideEquipV2Req="";
public const string RmiName_RideGachaV2Req="";
public const string RmiName_RideMixV2Req="";
public const string RmiName_RideSitOffV2Req="";
public const string RmiName_RideSitV2Req="";
public const string RmiName_BuyCashShopItemV2Req="";
public const string RmiName_BuyGameShopItemV2Req="";
public const string RmiName_GameShopSellItemV2Req="";
public const string RmiName_ChangeSiegeModeV2Req="";
public const string RmiName_ChoiceSiegeWarFactionV2Req="";
public const string RmiName_GetSiegeWarInfoV2Req="";
public const string RmiName_GetSiegeWarMatchInfoV2Req="";
public const string RmiName_BuffListInfoV2Req="";
public const string RmiName_SkillChangeAutoUseV2Req="";
public const string RmiName_SkillChangePresetV2Req="";
public const string RmiName_SkillEquipV2Req="";
public const string RmiName_SkillHitV2Req="";
public const string RmiName_SkillLearnV2Req="";
public const string RmiName_SkillLevelUpV2Req="";
public const string RmiName_SkillListInfoV2Req="";
public const string RmiName_SkillUnEquipV2Req="";
public const string RmiName_SkillUpgradeV2Req="";
public const string RmiName_SkillUseV2Req="";
public const string RmiName_RTTSkillUseV2Req="";
public const string RmiName_RTTSkillHitV2Req="";
public const string RmiName_PlayerTitleChangeV2Req="";
public const string RmiName_TitleChangeV2Req="";
public const string RmiName_TitleListV2Req="";
public const string RmiName_TradeCronAverageBalanceReq="";
public const string RmiName_TradeCronBalanceReq="";
public const string RmiName_TradeCronBuyReq="";
public const string RmiName_TradeCronInfoReq="";
public const string RmiName_TradeCronListReq="";
public const string RmiName_TradeCronPreviousDayBalanceReq="";
public const string RmiName_TradeCronSellReq="";
public const string RmiName_TradeCronWeeklyBalanceReq="";
public const string RmiName_TradePersonalRequestReq="";
public const string RmiName_TradePersonalAcceptReq="";
public const string RmiName_TradePersonalRefuseReq="";
public const string RmiName_TradePersonalCancelReq="";
public const string RmiName_TradePersonalWithdrawReq="";
public const string RmiName_TradePersonalFinishReq="";
public const string RmiName_TradePersonalHistoryReq="";
public const string RmiName_TradeCronMyListReq="";
public const string RmiName_TradeCronSettleReq="";
public const string RmiName_TradeCronTradesReq="";
public const string RmiName_TradeCronTimeToNextChangeBalanceReq="";
public const string RmiName_TradeCronCancelReq="";
public const string RmiName_TradeCronReclaimExpiredReq="";
public const string RmiName_TradeCronRemainingCanceledPenaltyTimeReq="";
public const string RmiName_TradeItemRegistReq="";
public const string RmiName_TradeItemCancelReq="";
public const string RmiName_TradeItemBuyReq="";
public const string RmiName_TradeItemWithdrawReq="";
public const string RmiName_TradeItemFinishReq="";
public const string RmiName_TradeItemHistoryReq="";
public const string RmiName_TradeItemSearchCategoryReq="";
public const string RmiName_TradeItemSearchItemIndexReq="";
public const string RmiName_TradeItemBookmarkAddReq="";
public const string RmiName_TradeItemBookmarkDeleteReq="";
public const string RmiName_WeaponAppearanceCollectListV2Req="";
public const string RmiName_WeaponAppearanceEquipV2Req="";
public const string RmiName_WeaponAppearanceExtractFromItemV2Req="";
public const string RmiName_WeaponAppearanceHiddenV2Req="";
public const string RmiName_WeaponAppearanceListV2Req="";
public const string RmiName_WeaponAppearanceUnequipV2Req="";
public const string RmiName_AccountCreateNameReq="";
public const string RmiName_ZoneStatusReq="";
public const string RmiName_BloodFogEnterReq="";
public const string RmiName_BloodFogLeaveReq="";
public const string RmiName_BloodFogUseBuffReq="";
public const string RmiName_C2SRttReq="";
public const string RmiName_C2SRttRes="";
       
public const string RmiName_First = "";
		#endif

		public override Nettention.Proud.RmiID[] GetRmiIDList { get{return Common.RmiIDList;} }
		
	}
}

